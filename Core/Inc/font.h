//////////////////////////////////////////////////////////////////////////////////	 
//本程序只供学习使用，未经作者许可，不得用于其它任何用途
//测试硬件：单片机STM32F103ZET6,正点原子WarShip STM32 V3开发板,主频72MHZ，晶振12MHZ
//QDtech-TFT液晶驱动 for STM32 FSMC
//xiao冯@ShenZhen QDtech co.,LTD
//公司网站:www.qdtft.com
//淘宝网站：http://qdtech.taobao.com
//wiki技术网站：http://www.lcdwiki.com
//我司提供技术支持，任何技术问题欢迎随时交流学习
//固话(传真) :+86 0755-23594567
//手机:15989313508（冯工）
//邮箱:lcdwiki01@gmail.com    support@lcdwiki.com    goodtft@163.com
//技术支持QQ:3002773612  3002778157
//技术交流QQ群:324828016
//创建日期:2018/08/09
//版本：V1.0
//版权所有，盗版必究。
//Copyright(C) 深圳市全动电子技术有限公司 2018-2028
//All rights reserved
/****************************************************************************************************
 //此模块可以直接插入正点原子WarShip STM32 V3开发板TFTLCD插槽，无需手动接线
 //STM32连接引脚是指TFTLCD插槽引脚内部连接的STM32引脚
 //=========================================电源接线================================================//
 //     LCD模块             TFTLCD插槽引脚        STM32连接引脚
 //      VDD       --->         5V/3.3              DC5V/3.3V          //电源
 //      GND       --->          GND                  GND              //电源地
 //=======================================液晶屏数据线接线==========================================//
 //本模块默认数据总线类型为16位并口总线
 //     LCD模块             TFTLCD插槽引脚        STM32连接引脚
 //      D1        --->          D0                   PD14        -|
 //      D2        --->          D1                   PD15         |
 //      D3        --->          D2                   PD0          |
 //      D4        --->          D3                   PD1          |
 //      D5        --->          D4                   PE7          |
 //      D6        --->          D5                   PE8          |
 //      D7        --->          D6                   PE9          |
 //      D8        --->          D7                   PE10         |
 //如果使用8位模式，请使用下面高8位并口数据线引脚                  |===>液晶屏16位并口数据信号
 //      D10       --->          D8                   PE11         |
 //      D11       --->          D9                   PE12         |
 //      D12       --->          D10                  PE13         |
 //      D13       --->          D11                  PE14         |
 //      D14       --->          D12                  PE15         |
 //      D15       --->          D13                  PD8          |
 //      D16       --->          D14                  PD9          |
 //      D17       --->          D15                  PD10        -|
 //=======================================液晶屏控制线接线==========================================//
 //     LCD模块 				     TFTLCD插槽引脚        STM32连接引脚
 //       WR       --->          WR                   PD5             //液晶屏写数据控制信号
 //       RD       --->          RD                   PD4             //液晶屏读数据控制信号
 //       RS       --->          RS                   PG0             //液晶屏数据/命令控制信号
 //       RST      --->          RST                复位引脚          //液晶屏复位控制信号
 //       CS       --->          CS                   PG12            //液晶屏片选控制信号
 //       BL       --->          BL                   PB0             //液晶屏背光控制信号
 //=========================================触摸屏触接线=========================================//
 //如果模块不带触摸功能或者带有触摸功能，但是不需要触摸功能，则不需要进行触摸屏接线
 //	   LCD模块             TFTLCD插槽引脚        STM32连接引脚
 //      PEN       --->          PEN                  PF10            //触摸屏触摸中断信号
 //      MI        --->          MISO                 PB2             //触摸屏SPI总线读信号
 //      MO        --->          MOSI                 PF9             //触摸屏SPI总线写信号
 //      TCS       --->          TCS                  PF11            //触摸屏片选控制信号
 //      CLK       --->          CLK                  PB1             //触摸屏SPI总线时钟信号
 **************************************************************************************************/
/* @attention
 *
 * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 * TIME. AS A RESULT, QD electronic SHALL NOT BE HELD LIABLE FOR ANY
 * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 **************************************************************************************************/

#ifndef __FONT_H
#define __FONT_H 	   
//常用ASCII表
//偏移量32
//ASCII字符集
//偏移量32
//大小:12*6
//字体:Default
//逐行式，逆向（低位在前）
const unsigned char asc2_1206[95][12] = { { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*" ",0*/
{ 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00 },/*"!",1*/
{ 0x00, 0x14, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*""",2*/
{ 0x00, 0x00, 0x14, 0x14, 0x3F, 0x14, 0x0A, 0x3F, 0x0A, 0x0A, 0x00, 0x00 },/*"#",3*/
{ 0x00, 0x04, 0x1E, 0x15, 0x05, 0x06, 0x0C, 0x14, 0x15, 0x0F, 0x04, 0x00 },/*"$",4*/
{ 0x00, 0x00, 0x12, 0x15, 0x0D, 0x0A, 0x14, 0x2C, 0x2A, 0x12, 0x00, 0x00 },/*"%",5*/
{ 0x00, 0x00, 0x04, 0x0A, 0x0A, 0x1E, 0x15, 0x15, 0x09, 0x36, 0x00, 0x00 },/*"&",6*/
{ 0x00, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*"'",7*/
{ 0x00, 0x20, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x20, 0x00 },/*"(",8*/
{ 0x00, 0x02, 0x04, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00 },/*")",9*/
{ 0x00, 0x00, 0x00, 0x04, 0x15, 0x0E, 0x0E, 0x15, 0x04, 0x00, 0x00, 0x00 },/*"*",10*/
{ 0x00, 0x00, 0x04, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00 },/*"+",11*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x01 },/*",",12*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*"-",13*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00 },/*".",14*/
{ 0x00, 0x10, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x02, 0x01, 0x00 },/*"/",15*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },/*"0",16*/
{ 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 },/*"1",17*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x08, 0x04, 0x02, 0x01, 0x1F, 0x00, 0x00 },/*"2",18*/
{ 0x00, 0x00, 0x0E, 0x11, 0x10, 0x0C, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00 },/*"3",19*/
{ 0x00, 0x00, 0x08, 0x0C, 0x0A, 0x0A, 0x09, 0x1E, 0x08, 0x18, 0x00, 0x00 },/*"4",20*/
{ 0x00, 0x00, 0x1F, 0x01, 0x01, 0x0F, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00 },/*"5",21*/
{ 0x00, 0x00, 0x0E, 0x09, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },/*"6",22*/
{ 0x00, 0x00, 0x1F, 0x09, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 },/*"7",23*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },/*"8",24*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x12, 0x0E, 0x00, 0x00 },/*"9",25*/
{ 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00 },/*":",26*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00 },/*";",27*/
{ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00 },/*"<",28*/
{ 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00 },/*"=",29*/
{ 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00 },/*">",30*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x08, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00 },/*"?",31*/
{ 0x00, 0x00, 0x0E, 0x11, 0x19, 0x15, 0x15, 0x1D, 0x01, 0x1E, 0x00, 0x00 },/*"@",32*/
{ 0x00, 0x00, 0x04, 0x04, 0x0C, 0x0A, 0x0A, 0x1E, 0x12, 0x33, 0x00, 0x00 },/*"A",33*/
{ 0x00, 0x00, 0x0F, 0x12, 0x12, 0x0E, 0x12, 0x12, 0x12, 0x0F, 0x00, 0x00 },/*"B",34*/
{ 0x00, 0x00, 0x1E, 0x11, 0x01, 0x01, 0x01, 0x01, 0x11, 0x0E, 0x00, 0x00 },/*"C",35*/
{ 0x00, 0x00, 0x0F, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x0F, 0x00, 0x00 },/*"D",36*/
{ 0x00, 0x00, 0x1F, 0x12, 0x0A, 0x0E, 0x0A, 0x02, 0x12, 0x1F, 0x00, 0x00 },/*"E",37*/
{ 0x00, 0x00, 0x1F, 0x12, 0x0A, 0x0E, 0x0A, 0x02, 0x02, 0x07, 0x00, 0x00 },/*"F",38*/
{ 0x00, 0x00, 0x1C, 0x12, 0x01, 0x01, 0x39, 0x11, 0x12, 0x0C, 0x00, 0x00 },/*"G",39*/
{ 0x00, 0x00, 0x33, 0x12, 0x12, 0x1E, 0x12, 0x12, 0x12, 0x33, 0x00, 0x00 },/*"H",40*/
{ 0x00, 0x00, 0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1F, 0x00, 0x00 },/*"I",41*/
{ 0x00, 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x07, 0x00 },/*"J",42*/
{ 0x00, 0x00, 0x37, 0x12, 0x0A, 0x06, 0x0A, 0x0A, 0x12, 0x37, 0x00, 0x00 },/*"K",43*/
{ 0x00, 0x00, 0x07, 0x02, 0x02, 0x02, 0x02, 0x02, 0x22, 0x3F, 0x00, 0x00 },/*"L",44*/
{ 0x00, 0x00, 0x1B, 0x1B, 0x1B, 0x1B, 0x15, 0x15, 0x15, 0x15, 0x00, 0x00 },/*"M",45*/
{ 0x00, 0x00, 0x3B, 0x12, 0x16, 0x16, 0x1A, 0x1A, 0x12, 0x17, 0x00, 0x00 },/*"N",46*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },/*"O",47*/
{ 0x00, 0x00, 0x0F, 0x12, 0x12, 0x0E, 0x02, 0x02, 0x02, 0x07, 0x00, 0x00 },/*"P",48*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x17, 0x19, 0x0E, 0x18, 0x00 },/*"Q",49*/
{ 0x00, 0x00, 0x0F, 0x12, 0x12, 0x0E, 0x0A, 0x12, 0x12, 0x37, 0x00, 0x00 },/*"R",50*/
{ 0x00, 0x00, 0x1E, 0x11, 0x01, 0x06, 0x08, 0x10, 0x11, 0x0F, 0x00, 0x00 },/*"S",51*/
{ 0x00, 0x00, 0x1F, 0x15, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 },/*"T",52*/
{ 0x00, 0x00, 0x33, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, 0x00 },/*"U",53*/
{ 0x00, 0x00, 0x33, 0x12, 0x12, 0x0A, 0x0A, 0x0C, 0x04, 0x04, 0x00, 0x00 },/*"V",54*/
{ 0x00, 0x00, 0x15, 0x15, 0x15, 0x0E, 0x0A, 0x0A, 0x0A, 0x0A, 0x00, 0x00 },/*"W",55*/
{ 0x00, 0x00, 0x1B, 0x0A, 0x0A, 0x04, 0x04, 0x0A, 0x0A, 0x1B, 0x00, 0x00 },/*"X",56*/
{ 0x00, 0x00, 0x1B, 0x0A, 0x0A, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 },/*"Y",57*/
{ 0x00, 0x00, 0x1F, 0x09, 0x08, 0x04, 0x04, 0x02, 0x12, 0x1F, 0x00, 0x00 },/*"Z",58*/
{ 0x00, 0x1C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1C, 0x00 },/*"[",59*/
{ 0x00, 0x02, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x00, 0x00 },/*"\",60*/
{ 0x00, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00 },/*"]",61*/
{ 0x00, 0x04, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*"^",62*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F },/*"_",63*/
{ 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*"`",64*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x12, 0x1C, 0x12, 0x3C, 0x00, 0x00 },/*"a",65*/
{ 0x00, 0x00, 0x03, 0x02, 0x02, 0x0E, 0x12, 0x12, 0x12, 0x0E, 0x00, 0x00 },/*"b",66*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x12, 0x02, 0x02, 0x1C, 0x00, 0x00 },/*"c",67*/
{ 0x00, 0x00, 0x18, 0x10, 0x10, 0x1C, 0x12, 0x12, 0x12, 0x3C, 0x00, 0x00 },/*"d",68*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x12, 0x1E, 0x02, 0x1C, 0x00, 0x00 },/*"e",69*/
{ 0x00, 0x00, 0x38, 0x04, 0x04, 0x1E, 0x04, 0x04, 0x04, 0x1E, 0x00, 0x00 },/*"f",70*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x12, 0x0C, 0x02, 0x1E, 0x22, 0x1C },/*"g",71*/
{ 0x00, 0x00, 0x03, 0x02, 0x02, 0x0E, 0x12, 0x12, 0x12, 0x37, 0x00, 0x00 },/*"h",72*/
{ 0x00, 0x00, 0x04, 0x00, 0x00, 0x06, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 },/*"i",73*/
{ 0x00, 0x00, 0x08, 0x00, 0x00, 0x0C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07 },/*"j",74*/
{ 0x00, 0x00, 0x03, 0x02, 0x02, 0x3A, 0x0A, 0x0E, 0x12, 0x37, 0x00, 0x00 },/*"k",75*/
{ 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1F, 0x00, 0x00 },/*"l",76*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x15, 0x15, 0x15, 0x15, 0x00, 0x00 },/*"m",77*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x12, 0x12, 0x12, 0x37, 0x00, 0x00 },/*"n",78*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x12, 0x12, 0x12, 0x0C, 0x00, 0x00 },/*"o",79*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x12, 0x12, 0x12, 0x0E, 0x02, 0x07 },/*"p",80*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x12, 0x12, 0x12, 0x1C, 0x10, 0x38 },/*"q",81*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x06, 0x02, 0x02, 0x07, 0x00, 0x00 },/*"r",82*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x02, 0x0C, 0x10, 0x1E, 0x00, 0x00 },/*"s",83*/
{ 0x00, 0x00, 0x00, 0x04, 0x04, 0x0E, 0x04, 0x04, 0x04, 0x18, 0x00, 0x00 },/*"t",84*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x12, 0x12, 0x12, 0x3C, 0x00, 0x00 },/*"u",85*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x12, 0x0A, 0x0C, 0x04, 0x00, 0x00 },/*"v",86*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x15, 0x0E, 0x0A, 0x0A, 0x00, 0x00 },/*"w",87*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x0A, 0x04, 0x0A, 0x1B, 0x00, 0x00 },/*"x",88*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x12, 0x0A, 0x0C, 0x04, 0x04, 0x03 },/*"y",89*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x04, 0x04, 0x1E, 0x00, 0x00 },/*"z",90*/
{ 0x00, 0x18, 0x08, 0x08, 0x08, 0x04, 0x08, 0x08, 0x08, 0x08, 0x18, 0x00 },/*"{",91*/
{ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 },/*"|",92*/
{ 0x00, 0x06, 0x04, 0x04, 0x04, 0x08, 0x04, 0x04, 0x04, 0x04, 0x06, 0x00 },/*"}",93*/
{ 0x02, 0x25, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } /*"~",94*/
};

//常用ASCII表
//偏移量32
//ASCII字符集
//偏移量32
//大小:16*8
//字体:Default
//逐行式，逆向（低位在前）
const unsigned char asc2_1608[95][16] = { { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*" ",0*/
{ 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x18,
		0x18, 0x00, 0x00 },/*"!",1*/
{ 0x00, 0x48, 0x6C, 0x24, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 },/*""",2*/
{ 0x00, 0x00, 0x00, 0x24, 0x24, 0x24, 0x7F, 0x12, 0x12, 0x12, 0x7F, 0x12, 0x12,
		0x12, 0x00, 0x00 },/*"#",3*/
{ 0x00, 0x00, 0x08, 0x1C, 0x2A, 0x2A, 0x0A, 0x0C, 0x18, 0x28, 0x28, 0x2A, 0x2A,
		0x1C, 0x08, 0x08 },/*"$",4*/
{ 0x00, 0x00, 0x00, 0x22, 0x25, 0x15, 0x15, 0x15, 0x2A, 0x58, 0x54, 0x54, 0x54,
		0x22, 0x00, 0x00 },/*"%",5*/
{ 0x00, 0x00, 0x00, 0x0C, 0x12, 0x12, 0x12, 0x0A, 0x76, 0x25, 0x29, 0x11, 0x91,
		0x6E, 0x00, 0x00 },/*"&",6*/
{ 0x00, 0x06, 0x06, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 },/*"'",7*/
{ 0x00, 0x40, 0x20, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x10,
		0x20, 0x40, 0x00 },/*"(",8*/
{ 0x00, 0x02, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08,
		0x04, 0x02, 0x00 },/*")",9*/
{ 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x6B, 0x1C, 0x1C, 0x6B, 0x08, 0x08, 0x00,
		0x00, 0x00, 0x00 },/*"*",10*/
{ 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x08,
		0x00, 0x00, 0x00 },/*"+",11*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
		0x06, 0x04, 0x03 },/*",",12*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 },/*"-",13*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
		0x06, 0x00, 0x00 },/*".",14*/
{ 0x00, 0x00, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04,
		0x02, 0x02, 0x00 },/*"/",15*/
{ 0x00, 0x00, 0x00, 0x18, 0x24, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24,
		0x18, 0x00, 0x00 },/*"0",16*/
{ 0x00, 0x00, 0x00, 0x08, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x3E, 0x00, 0x00 },/*"1",17*/
{ 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x20, 0x20, 0x10, 0x08, 0x04, 0x42,
		0x7E, 0x00, 0x00 },/*"2",18*/
{ 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x20, 0x18, 0x20, 0x40, 0x40, 0x42, 0x22,
		0x1C, 0x00, 0x00 },/*"3",19*/
{ 0x00, 0x00, 0x00, 0x20, 0x30, 0x28, 0x24, 0x24, 0x22, 0x22, 0x7E, 0x20, 0x20,
		0x78, 0x00, 0x00 },/*"4",20*/
{ 0x00, 0x00, 0x00, 0x7E, 0x02, 0x02, 0x02, 0x1A, 0x26, 0x40, 0x40, 0x42, 0x22,
		0x1C, 0x00, 0x00 },/*"5",21*/
{ 0x00, 0x00, 0x00, 0x38, 0x24, 0x02, 0x02, 0x1A, 0x26, 0x42, 0x42, 0x42, 0x24,
		0x18, 0x00, 0x00 },/*"6",22*/
{ 0x00, 0x00, 0x00, 0x7E, 0x22, 0x22, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x08, 0x00, 0x00 },/*"7",23*/
{ 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x24, 0x18, 0x24, 0x42, 0x42, 0x42,
		0x3C, 0x00, 0x00 },/*"8",24*/
{ 0x00, 0x00, 0x00, 0x18, 0x24, 0x42, 0x42, 0x42, 0x64, 0x58, 0x40, 0x40, 0x24,
		0x1C, 0x00, 0x00 },/*"9",25*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18,
		0x18, 0x00, 0x00 },/*":",26*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x04 },/*";",27*/
{ 0x00, 0x00, 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x20,
		0x40, 0x00, 0x00 },/*"<",28*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00,
		0x00, 0x00, 0x00 },/*"=",29*/
{ 0x00, 0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x20, 0x10, 0x08, 0x04,
		0x02, 0x00, 0x00 },/*">",30*/
{ 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x46, 0x40, 0x20, 0x10, 0x10, 0x00, 0x18,
		0x18, 0x00, 0x00 },/*"?",31*/
{ 0x00, 0x00, 0x00, 0x1C, 0x22, 0x5A, 0x55, 0x55, 0x55, 0x55, 0x2D, 0x42, 0x22,
		0x1C, 0x00, 0x00 },/*"@",32*/
{ 0x00, 0x00, 0x00, 0x08, 0x08, 0x18, 0x14, 0x14, 0x24, 0x3C, 0x22, 0x42, 0x42,
		0xE7, 0x00, 0x00 },/*"A",33*/
{ 0x00, 0x00, 0x00, 0x1F, 0x22, 0x22, 0x22, 0x1E, 0x22, 0x42, 0x42, 0x42, 0x22,
		0x1F, 0x00, 0x00 },/*"B",34*/
{ 0x00, 0x00, 0x00, 0x7C, 0x42, 0x42, 0x01, 0x01, 0x01, 0x01, 0x01, 0x42, 0x22,
		0x1C, 0x00, 0x00 },/*"C",35*/
{ 0x00, 0x00, 0x00, 0x1F, 0x22, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x22,
		0x1F, 0x00, 0x00 },/*"D",36*/
{ 0x00, 0x00, 0x00, 0x3F, 0x42, 0x12, 0x12, 0x1E, 0x12, 0x12, 0x02, 0x42, 0x42,
		0x3F, 0x00, 0x00 },/*"E",37*/
{ 0x00, 0x00, 0x00, 0x3F, 0x42, 0x12, 0x12, 0x1E, 0x12, 0x12, 0x02, 0x02, 0x02,
		0x07, 0x00, 0x00 },/*"F",38*/
{ 0x00, 0x00, 0x00, 0x3C, 0x22, 0x22, 0x01, 0x01, 0x01, 0x71, 0x21, 0x22, 0x22,
		0x1C, 0x00, 0x00 },/*"G",39*/
{ 0x00, 0x00, 0x00, 0xE7, 0x42, 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x42,
		0xE7, 0x00, 0x00 },/*"H",40*/
{ 0x00, 0x00, 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x3E, 0x00, 0x00 },/*"I",41*/
{ 0x00, 0x00, 0x00, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x11, 0x0F },/*"J",42*/
{ 0x00, 0x00, 0x00, 0x77, 0x22, 0x12, 0x0A, 0x0E, 0x0A, 0x12, 0x12, 0x22, 0x22,
		0x77, 0x00, 0x00 },/*"K",43*/
{ 0x00, 0x00, 0x00, 0x07, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x42,
		0x7F, 0x00, 0x00 },/*"L",44*/
{ 0x00, 0x00, 0x00, 0x77, 0x36, 0x36, 0x36, 0x36, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
		0x6B, 0x00, 0x00 },/*"M",45*/
{ 0x00, 0x00, 0x00, 0xE3, 0x46, 0x46, 0x4A, 0x4A, 0x52, 0x52, 0x52, 0x62, 0x62,
		0x47, 0x00, 0x00 },/*"N",46*/
{ 0x00, 0x00, 0x00, 0x1C, 0x22, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x22,
		0x1C, 0x00, 0x00 },/*"O",47*/
{ 0x00, 0x00, 0x00, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x3E, 0x02, 0x02, 0x02, 0x02,
		0x07, 0x00, 0x00 },/*"P",48*/
{ 0x00, 0x00, 0x00, 0x1C, 0x22, 0x41, 0x41, 0x41, 0x41, 0x41, 0x4D, 0x53, 0x32,
		0x1C, 0x60, 0x00 },/*"Q",49*/
{ 0x00, 0x00, 0x00, 0x3F, 0x42, 0x42, 0x42, 0x3E, 0x12, 0x12, 0x22, 0x22, 0x42,
		0xC7, 0x00, 0x00 },/*"R",50*/
{ 0x00, 0x00, 0x00, 0x7C, 0x42, 0x42, 0x02, 0x04, 0x18, 0x20, 0x40, 0x42, 0x42,
		0x3E, 0x00, 0x00 },/*"S",51*/
{ 0x00, 0x00, 0x00, 0x7F, 0x49, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x1C, 0x00, 0x00 },/*"T",52*/
{ 0x00, 0x00, 0x00, 0xE7, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
		0x3C, 0x00, 0x00 },/*"U",53*/
{ 0x00, 0x00, 0x00, 0xE7, 0x42, 0x42, 0x22, 0x24, 0x24, 0x14, 0x14, 0x18, 0x08,
		0x08, 0x00, 0x00 },/*"V",54*/
{ 0x00, 0x00, 0x00, 0x6B, 0x49, 0x49, 0x49, 0x49, 0x55, 0x55, 0x36, 0x22, 0x22,
		0x22, 0x00, 0x00 },/*"W",55*/
{ 0x00, 0x00, 0x00, 0xE7, 0x42, 0x24, 0x24, 0x18, 0x18, 0x18, 0x24, 0x24, 0x42,
		0xE7, 0x00, 0x00 },/*"X",56*/
{ 0x00, 0x00, 0x00, 0x77, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x1C, 0x00, 0x00 },/*"Y",57*/
{ 0x00, 0x00, 0x00, 0x7E, 0x21, 0x20, 0x10, 0x10, 0x08, 0x04, 0x04, 0x42, 0x42,
		0x3F, 0x00, 0x00 },/*"Z",58*/
{ 0x00, 0x78, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x08, 0x78, 0x00 },/*"[",59*/
{ 0x00, 0x00, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20,
		0x20, 0x40, 0x40 },/*"\",60*/
{ 0x00, 0x1E, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x1E, 0x00 },/*"]",61*/
{ 0x00, 0x38, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 },/*"^",62*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xFF },/*"_",63*/
{ 0x00, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 },/*"`",64*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x78, 0x44, 0x42, 0x42,
		0xFC, 0x00, 0x00 },/*"a",65*/
{ 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x1A, 0x26, 0x42, 0x42, 0x42, 0x26,
		0x1A, 0x00, 0x00 },/*"b",66*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x02, 0x02, 0x02, 0x44,
		0x38, 0x00, 0x00 },/*"c",67*/
{ 0x00, 0x00, 0x00, 0x60, 0x40, 0x40, 0x40, 0x78, 0x44, 0x42, 0x42, 0x42, 0x64,
		0xD8, 0x00, 0x00 },/*"d",68*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x7E, 0x02, 0x02, 0x42,
		0x3C, 0x00, 0x00 },/*"e",69*/
{ 0x00, 0x00, 0x00, 0xF0, 0x88, 0x08, 0x08, 0x7E, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x3E, 0x00, 0x00 },/*"f",70*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x22, 0x22, 0x1C, 0x02, 0x3C,
		0x42, 0x42, 0x3C },/*"g",71*/
{ 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x3A, 0x46, 0x42, 0x42, 0x42, 0x42,
		0xE7, 0x00, 0x00 },/*"h",72*/
{ 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x3E, 0x00, 0x00 },/*"i",73*/
{ 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x22, 0x1E },/*"j",74*/
{ 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x72, 0x12, 0x0A, 0x16, 0x12, 0x22,
		0x77, 0x00, 0x00 },/*"k",75*/
{ 0x00, 0x00, 0x00, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x3E, 0x00, 0x00 },/*"l",76*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x92, 0x92, 0x92, 0x92, 0x92,
		0xB7, 0x00, 0x00 },/*"m",77*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x46, 0x42, 0x42, 0x42, 0x42,
		0xE7, 0x00, 0x00 },/*"n",78*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42,
		0x3C, 0x00, 0x00 },/*"o",79*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x26, 0x42, 0x42, 0x42, 0x22,
		0x1E, 0x02, 0x07 },/*"p",80*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x44, 0x42, 0x42, 0x42, 0x44,
		0x78, 0x40, 0xE0 },/*"q",81*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x4C, 0x04, 0x04, 0x04, 0x04,
		0x1F, 0x00, 0x00 },/*"r",82*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x42, 0x02, 0x3C, 0x40, 0x42,
		0x3E, 0x00, 0x00 },/*"s",83*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x30, 0x00, 0x00 },/*"t",84*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x42, 0x42, 0x42, 0x42, 0x62,
		0xDC, 0x00, 0x00 },/*"u",85*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x42, 0x24, 0x24, 0x14, 0x08,
		0x08, 0x00, 0x00 },/*"v",86*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x49, 0x49, 0x55, 0x55, 0x22,
		0x22, 0x00, 0x00 },/*"w",87*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x24, 0x18, 0x18, 0x18, 0x24,
		0x6E, 0x00, 0x00 },/*"x",88*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x42, 0x24, 0x24, 0x14, 0x18,
		0x08, 0x08, 0x07 },/*"y",89*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x22, 0x10, 0x08, 0x08, 0x44,
		0x7E, 0x00, 0x00 },/*"z",90*/
{ 0x00, 0xC0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0xC0, 0x00 },/*"{",91*/
{ 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x10, 0x10 },/*"|",92*/
{ 0x00, 0x06, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x08, 0x06, 0x00 },/*"}",93*/
{ 0x0C, 0x32, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 }, /*"~",94*/
};
typedef struct {
	unsigned char Index[2];
	char Msk[32];
} typFNT_GB16;
//字体取模：宋体常规小四
//逐行式，顺向（高位在前）
const typFNT_GB16 tfont16[] = { "艾", 0x04, 0x40, 0x04, 0x40, 0xFF, 0xFE, 0x04, 0x40, 0x00, 0x20, 0x08,
		0x20, 0x08, 0x20, 0x04, 0x40, 0x04, 0x40, 0x02, 0x80, 0x01, 0x00, 0x02,
		0x80, 0x04, 0x40, 0x08, 0x20, 0x30, 0x18, 0xC0, 0x06,/*0*/

		"超", 0x08, 0x00, 0x09, 0xFC, 0x08, 0x44, 0x7E, 0x44, 0x08, 0x44, 0x08,
		0x94, 0xFF, 0x08, 0x08, 0xFC, 0x28, 0x84, 0x28, 0x84, 0x2E, 0x84, 0x28,
		0xFC, 0x28, 0x00, 0x58, 0x00, 0x4F, 0xFE, 0x80, 0x00,/*1*/

		"栋", 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x17, 0xFE, 0xF8, 0x80, 0x11,
		0x20, 0x31, 0x20, 0x3A, 0x20, 0x57, 0xFC, 0x50, 0x20, 0x91, 0x28, 0x11,
		0x24, 0x12, 0x22, 0x14, 0x22, 0x10, 0xA0, 0x10, 0x40,/*2*/

		"尔", 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x1F, 0xFC, 0x10, 0x04, 0x21,
		0x08, 0x41, 0x00, 0x81, 0x00, 0x01, 0x00, 0x11, 0x10, 0x11, 0x08, 0x21,
		0x04, 0x41, 0x02, 0x81, 0x02, 0x05, 0x00, 0x02, 0x00,/*3*/

		"高", 0x02, 0x00, 0x01, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x0F, 0xE0, 0x08,
		0x20, 0x08, 0x20, 0x0F, 0xE0, 0x00, 0x00, 0x7F, 0xFC, 0x40, 0x04, 0x4F,
		0xE4, 0x48, 0x24, 0x48, 0x24, 0x4F, 0xE4, 0x40, 0x0C,/*4*/

		"华", 0x08, 0x80, 0x08, 0x88, 0x10, 0x90, 0x30, 0xE0, 0x51, 0x80, 0x96,
		0x84, 0x10, 0x84, 0x10, 0x7C, 0x11, 0x00, 0x01, 0x00, 0xFF, 0xFE, 0x01,
		0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,/*5*/

		"骏", 0x00, 0x40, 0xF8, 0x40, 0x08, 0x88, 0x49, 0x04, 0x4B, 0xFE, 0x48,
		0x02, 0x48, 0x88, 0x7D, 0x44, 0x06, 0x42, 0x04, 0xF8, 0x1D, 0x88, 0xE6,
		0x50, 0x44, 0x20, 0x04, 0x50, 0x29, 0x88, 0x16, 0x06,/*6*/

		"肯", 0x01, 0x00, 0x01, 0x00, 0x11, 0xF8, 0x11, 0x00, 0x11, 0x00, 0xFF,
		0xFE, 0x00, 0x00, 0x1F, 0xF0, 0x10, 0x10, 0x1F, 0xF0, 0x10, 0x10, 0x1F,
		0xF0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x50, 0x10, 0x20,/*7*/

		"李", 0x01, 0x00, 0x01, 0x00, 0x7F, 0xFC, 0x03, 0x80, 0x05, 0x40, 0x09,
		0x20, 0x31, 0x18, 0xC1, 0x06, 0x0F, 0xE0, 0x00, 0x40, 0x00, 0x80, 0xFF,
		0xFE, 0x01, 0x00, 0x01, 0x00, 0x05, 0x00, 0x02, 0x00,/*8*/

		"晓", 0x00, 0x80, 0x00, 0x80, 0x78, 0xBC, 0x4B, 0xC0, 0x48, 0x50, 0x48,
		0x24, 0x48, 0xD4, 0x7B, 0x0C, 0x48, 0x00, 0x4B, 0xFE, 0x48, 0x90, 0x48,
		0x90, 0x79, 0x12, 0x49, 0x12, 0x02, 0x0E, 0x04, 0x00,/*9*/

		"袁", 0x01, 0x00, 0x01, 0x00, 0x3F, 0xF8, 0x01, 0x00, 0xFF, 0xFE, 0x00,
		0x00, 0x1F, 0xF0, 0x10, 0x10, 0x10, 0x10, 0x1F, 0xF0, 0x05, 0x04, 0x08,
		0x88, 0x38, 0x50, 0xCA, 0x20, 0x0C, 0x18, 0x08, 0x06,/*10*/

		"智", 0x20, 0x00, 0x3E, 0x7C, 0x48, 0x44, 0x08, 0x44, 0xFF, 0x44, 0x14,
		0x44, 0x22, 0x7C, 0x40, 0x00, 0x1F, 0xF0, 0x10, 0x10, 0x10, 0x10, 0x1F,
		0xF0, 0x10, 0x10, 0x10, 0x10, 0x1F, 0xF0, 0x10, 0x10, /*11*/
};
typedef struct {
	unsigned char Index[2];
	char Msk[72];
} typFNT_GB24;
//字体取模：宋体常规小四
//逐行式，顺向（高位在前）
const typFNT_GB24 tfont24[] = { "深", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
		0x00, 0x00, 0x08, 0x00, 0x08, 0x0C, 0x7F, 0xFC, 0x04, 0x40, 0x10, 0x01,
		0xC8, 0xA0, 0x02, 0x18, 0x60, 0x42, 0x30, 0x18, 0x32, 0x23, 0x18, 0x12,
		0xC3, 0x00, 0x14, 0x03, 0x00, 0x04, 0x03, 0x0C, 0x04, 0x7F, 0xF0, 0x08,
		0x0F, 0x80, 0x08, 0x0B, 0x40, 0x78, 0x13, 0x60, 0x18, 0x33, 0x20, 0x18,
		0x63, 0x18, 0x18, 0x83, 0x1C, 0x19, 0x03, 0x08, 0x18, 0x03, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00,/*0*/
		"圳", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x0C, 0x04, 0x18,
		0x0C, 0x04, 0x10, 0x8C, 0x04, 0x10, 0x8C, 0x04, 0x10, 0x8C, 0x04, 0x10,
		0x8C, 0x04, 0xD0, 0x8C, 0x3F, 0x10, 0x8C, 0x04, 0x10, 0x8C, 0x04, 0x10,
		0x8C, 0x04, 0x10, 0x8C, 0x04, 0x10, 0x8C, 0x04, 0x10, 0x8C, 0x04, 0x10,
		0x8C, 0x05, 0xF0, 0x8C, 0x0E, 0x20, 0x8C, 0x78, 0x20, 0x8C, 0x20, 0x40,
		0x8C, 0x00, 0x80, 0x8C, 0x01, 0x00, 0x0C, 0x02, 0x00, 0x0C, 0x00, 0x00,
		0x00,/*1*/
		"市", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x18,
		0x00, 0x00, 0x18, 0x08, 0x00, 0x00, 0x1C, 0x1F, 0xFF, 0xE0, 0x00, 0x18,
		0x00, 0x00, 0x18, 0x20, 0x07, 0xFF, 0xF0, 0x04, 0x18, 0x20, 0x04, 0x18,
		0x20, 0x04, 0x18, 0x20, 0x04, 0x18, 0x20, 0x04, 0x18, 0x20, 0x04, 0x18,
		0x20, 0x04, 0x18, 0x20, 0x04, 0x18, 0x20, 0x04, 0x18, 0x20, 0x04, 0x18,
		0xE0, 0x04, 0x18, 0x40, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
		0x00,/*2*/
		"中", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18,
		0x00, 0x3F, 0xFF, 0xFE, 0x30, 0x18, 0x06, 0x30, 0x18, 0x06, 0x30, 0x18,
		0x06, 0x30, 0x18, 0x06, 0x30, 0x18, 0x06, 0x3F, 0xFF, 0xFE, 0x30, 0x18,
		0x06, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18,
		0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00,/*0*/
		"文", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
		0x00, 0x00, 0x1C, 0x00, 0x00, 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0x06, 0x00,
		0x30, 0x06, 0x00, 0x30, 0x03, 0x00, 0x60, 0x03, 0x00, 0x60, 0x01, 0x80,
		0xC0, 0x00, 0xC1, 0x80, 0x00, 0xE3, 0x00, 0x00, 0x36, 0x00, 0x00, 0x1C,
		0x00, 0x00, 0x77, 0x00, 0x03, 0xC1, 0xE0, 0x1E, 0x00, 0x3C, 0x60, 0x00,
		0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00,/*1*/
		"测", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x40, 0x00, 0x03, 0x21, 0xFF, 0x33, 0x39, 0x83, 0x33, 0x11, 0x83,
		0x33, 0x01, 0x9B, 0x33, 0xC1, 0x9B, 0x33, 0x71, 0x9B, 0x33, 0x19, 0x9B,
		0x33, 0x01, 0x9B, 0x33, 0x01, 0x9B, 0x33, 0x11, 0x9B, 0x33, 0x19, 0xB3,
		0x33, 0x30, 0x30, 0x33, 0x30, 0x6C, 0x03, 0x30, 0xC6, 0x03, 0x63, 0x83,
		0x03, 0x2E, 0x01, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00,/*2*/
		"试", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x40, 0x00, 0xD8, 0x30, 0x00, 0xCE, 0x18, 0x00, 0xC2, 0x1C, 0x00,
		0xC0, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0xC0, 0xF8, 0x00, 0xC0, 0x18, 0x00,
		0xC0, 0x19, 0xFF, 0xC0, 0x18, 0x18, 0x40, 0x18, 0x18, 0x60, 0x19, 0x18,
		0x60, 0x1B, 0x18, 0x61, 0x1E, 0x18, 0x31, 0x1C, 0x1F, 0xB1, 0x39, 0xF0,
		0x19, 0x10, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, /*3*/
};
typedef struct {
	unsigned char Index[2];
	char Msk[128];
} typFNT_GB32;
//字体取模：宋体常规小四
//逐行式，顺向（高位在前）
const typFNT_GB32 tfont32[] = { "字", 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
		0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x01, 0xC0,
		0xC0, 0x00, 0x01, 0x07, 0xC0, 0x00, 0x01, 0xFF, 0x00, 0x02, 0x1F, 0xFE,
		0x00, 0x07, 0xF0, 0x1C, 0x00, 0x07, 0xC0, 0x70, 0x00, 0x0F, 0x00, 0xE0,
		0x00, 0x0E, 0x03, 0xF0, 0x00, 0x1C, 0x0F, 0xF0, 0x00, 0x3C, 0x0F, 0x70,
		0x00, 0x3C, 0x00, 0xE0, 0x00, 0x18, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0,
		0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x20,
		0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x7F, 0xF8,
		0x00, 0x07, 0xF8, 0x30, 0x00, 0x1F, 0x80, 0x30, 0x00, 0x00, 0x80, 0x30,
		0x00, 0x00, 0xC0, 0x30, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x18, 0xE0,
		0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00,/*0*/
		"体", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xC0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x20, 0x01, 0xB8, 0x00, 0x70, 0x3F,
		0xF8, 0x00, 0x61, 0xFF, 0xC0, 0x00, 0xC3, 0x03, 0x00, 0x01, 0xC6, 0x06,
		0x00, 0x03, 0x8C, 0x06, 0x00, 0x03, 0x08, 0x0C, 0x00, 0x06, 0x08, 0x0C,
		0x00, 0x0E, 0x18, 0x18, 0x3F, 0x1E, 0x10, 0x1B, 0xF3, 0x1F, 0x90, 0x3F,
		0x07, 0x00, 0x80, 0x3C, 0x1C, 0x01, 0x90, 0x70, 0x7C, 0x01, 0x90, 0x60,
		0xFE, 0x01, 0xA0, 0xC3, 0xF8, 0x01, 0xA0, 0x0F, 0xD8, 0x03, 0xA0, 0x08,
		0x18, 0x03, 0x60, 0x00, 0x18, 0x03, 0x40, 0x00, 0x18, 0x03, 0xC0, 0x00,
		0x18, 0x03, 0x80, 0x00, 0x18, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
		0x18, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
		0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/*1*/
		"测", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0C, 0x10, 0x08, 0x07, 0x1F, 0xF8,
		0x04, 0x03, 0xBF, 0xF0, 0x02, 0x01, 0xBC, 0x30, 0x03, 0x03, 0xEC, 0x30,
		0x03, 0x01, 0x5C, 0x60, 0x03, 0x00, 0xD8, 0x60, 0x03, 0x00, 0xD8, 0x60,
		0x03, 0x80, 0x98, 0x62, 0x03, 0x61, 0xB8, 0x43, 0x07, 0x71, 0xB1, 0x43,
		0x06, 0x31, 0x32, 0x43, 0x06, 0x33, 0x76, 0xC3, 0x06, 0x3A, 0x64, 0xC7,
		0x06, 0x3E, 0xEC, 0xC0, 0x06, 0x3E, 0x78, 0xC0, 0x06, 0x3C, 0x30, 0x40,
		0x06, 0x7C, 0x70, 0x00, 0x06, 0x78, 0xE0, 0x60, 0x06, 0x7B, 0xFF, 0xF0,
		0x06, 0xF7, 0xC0, 0x00, 0x06, 0xE4, 0x00, 0x00, 0x06, 0x40, 0x00, 0x00,
		0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x8F,
		0xF0, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00,/*2*/
		"试", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x01,
		0x80, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00,
		0xCE, 0x03, 0x80, 0x00, 0xCF, 0xFF, 0xC0, 0x00, 0xDD, 0x41, 0x80, 0x0F,
		0xFE, 0x00, 0x07, 0xFF, 0xFC, 0x00, 0x0C, 0x00, 0xF0, 0x00, 0x18, 0x0F,
		0xC0, 0x3E, 0x19, 0xFF, 0x40, 0xF3, 0x11, 0xBC, 0x60, 0x83, 0x30, 0x7F,
		0xE0, 0x03, 0xB1, 0xFE, 0x20, 0x03, 0x33, 0x80, 0x20, 0x03, 0x70, 0x00,
		0x30, 0x03, 0x60, 0x00, 0x10, 0x03, 0x60, 0x00, 0x18, 0x07, 0xC0, 0x00,
		0x0C, 0x07, 0xC0, 0x00, 0x04, 0x07, 0x80, 0x00, 0x02, 0x01, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*3*/
};

#endif
