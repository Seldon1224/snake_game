
snake_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cec  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014c4  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3a0  0800a3a0  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3a0  0800a3a0  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3a0  0800a3a0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3a0  0800a3a0  0001a3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3a4  0800a3a4  0001a3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a3a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000230c  20000098  0800a440  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023a4  0800a440  000223a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e1b1  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004940  00000000  00000000  0003e272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  00042bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00044268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f120  00000000  00000000  00045730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af15  00000000  00000000  00064850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab72f  00000000  00000000  0007f765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012ae94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068bc  00000000  00000000  0012aee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000098 	.word	0x20000098
 800020c:	00000000 	.word	0x00000000
 8000210:	08008ec4 	.word	0x08008ec4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000009c 	.word	0x2000009c
 800022c:	08008ec4 	.word	0x08008ec4

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_fmul>:
 8000240:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000244:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000248:	bf1e      	ittt	ne
 800024a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800024e:	ea92 0f0c 	teqne	r2, ip
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d06f      	beq.n	8000338 <__aeabi_fmul+0xf8>
 8000258:	441a      	add	r2, r3
 800025a:	ea80 0c01 	eor.w	ip, r0, r1
 800025e:	0240      	lsls	r0, r0, #9
 8000260:	bf18      	it	ne
 8000262:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000266:	d01e      	beq.n	80002a6 <__aeabi_fmul+0x66>
 8000268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800026c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000270:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000274:	fba0 3101 	umull	r3, r1, r0, r1
 8000278:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800027c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000280:	bf3e      	ittt	cc
 8000282:	0049      	lslcc	r1, r1, #1
 8000284:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000288:	005b      	lslcc	r3, r3, #1
 800028a:	ea40 0001 	orr.w	r0, r0, r1
 800028e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000292:	2afd      	cmp	r2, #253	; 0xfd
 8000294:	d81d      	bhi.n	80002d2 <__aeabi_fmul+0x92>
 8000296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800029a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800029e:	bf08      	it	eq
 80002a0:	f020 0001 	biceq.w	r0, r0, #1
 80002a4:	4770      	bx	lr
 80002a6:	f090 0f00 	teq	r0, #0
 80002aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002ae:	bf08      	it	eq
 80002b0:	0249      	lsleq	r1, r1, #9
 80002b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002ba:	3a7f      	subs	r2, #127	; 0x7f
 80002bc:	bfc2      	ittt	gt
 80002be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002c6:	4770      	bxgt	lr
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	3a01      	subs	r2, #1
 80002d2:	dc5d      	bgt.n	8000390 <__aeabi_fmul+0x150>
 80002d4:	f112 0f19 	cmn.w	r2, #25
 80002d8:	bfdc      	itt	le
 80002da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002de:	4770      	bxle	lr
 80002e0:	f1c2 0200 	rsb	r2, r2, #0
 80002e4:	0041      	lsls	r1, r0, #1
 80002e6:	fa21 f102 	lsr.w	r1, r1, r2
 80002ea:	f1c2 0220 	rsb	r2, r2, #32
 80002ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80002f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80002f6:	f140 0000 	adc.w	r0, r0, #0
 80002fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002fe:	bf08      	it	eq
 8000300:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000304:	4770      	bx	lr
 8000306:	f092 0f00 	teq	r2, #0
 800030a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800030e:	bf02      	ittt	eq
 8000310:	0040      	lsleq	r0, r0, #1
 8000312:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000316:	3a01      	subeq	r2, #1
 8000318:	d0f9      	beq.n	800030e <__aeabi_fmul+0xce>
 800031a:	ea40 000c 	orr.w	r0, r0, ip
 800031e:	f093 0f00 	teq	r3, #0
 8000322:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000326:	bf02      	ittt	eq
 8000328:	0049      	lsleq	r1, r1, #1
 800032a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800032e:	3b01      	subeq	r3, #1
 8000330:	d0f9      	beq.n	8000326 <__aeabi_fmul+0xe6>
 8000332:	ea41 010c 	orr.w	r1, r1, ip
 8000336:	e78f      	b.n	8000258 <__aeabi_fmul+0x18>
 8000338:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800033c:	ea92 0f0c 	teq	r2, ip
 8000340:	bf18      	it	ne
 8000342:	ea93 0f0c 	teqne	r3, ip
 8000346:	d00a      	beq.n	800035e <__aeabi_fmul+0x11e>
 8000348:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800034c:	bf18      	it	ne
 800034e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000352:	d1d8      	bne.n	8000306 <__aeabi_fmul+0xc6>
 8000354:	ea80 0001 	eor.w	r0, r0, r1
 8000358:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800035c:	4770      	bx	lr
 800035e:	f090 0f00 	teq	r0, #0
 8000362:	bf17      	itett	ne
 8000364:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000368:	4608      	moveq	r0, r1
 800036a:	f091 0f00 	teqne	r1, #0
 800036e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000372:	d014      	beq.n	800039e <__aeabi_fmul+0x15e>
 8000374:	ea92 0f0c 	teq	r2, ip
 8000378:	d101      	bne.n	800037e <__aeabi_fmul+0x13e>
 800037a:	0242      	lsls	r2, r0, #9
 800037c:	d10f      	bne.n	800039e <__aeabi_fmul+0x15e>
 800037e:	ea93 0f0c 	teq	r3, ip
 8000382:	d103      	bne.n	800038c <__aeabi_fmul+0x14c>
 8000384:	024b      	lsls	r3, r1, #9
 8000386:	bf18      	it	ne
 8000388:	4608      	movne	r0, r1
 800038a:	d108      	bne.n	800039e <__aeabi_fmul+0x15e>
 800038c:	ea80 0001 	eor.w	r0, r0, r1
 8000390:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000394:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000398:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800039c:	4770      	bx	lr
 800039e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003a6:	4770      	bx	lr

080003a8 <__aeabi_drsub>:
 80003a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	e002      	b.n	80003b4 <__adddf3>
 80003ae:	bf00      	nop

080003b0 <__aeabi_dsub>:
 80003b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b4 <__adddf3>:
 80003b4:	b530      	push	{r4, r5, lr}
 80003b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003be:	ea94 0f05 	teq	r4, r5
 80003c2:	bf08      	it	eq
 80003c4:	ea90 0f02 	teqeq	r0, r2
 80003c8:	bf1f      	itttt	ne
 80003ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003da:	f000 80e2 	beq.w	80005a2 <__adddf3+0x1ee>
 80003de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e6:	bfb8      	it	lt
 80003e8:	426d      	neglt	r5, r5
 80003ea:	dd0c      	ble.n	8000406 <__adddf3+0x52>
 80003ec:	442c      	add	r4, r5
 80003ee:	ea80 0202 	eor.w	r2, r0, r2
 80003f2:	ea81 0303 	eor.w	r3, r1, r3
 80003f6:	ea82 0000 	eor.w	r0, r2, r0
 80003fa:	ea83 0101 	eor.w	r1, r3, r1
 80003fe:	ea80 0202 	eor.w	r2, r0, r2
 8000402:	ea81 0303 	eor.w	r3, r1, r3
 8000406:	2d36      	cmp	r5, #54	; 0x36
 8000408:	bf88      	it	hi
 800040a:	bd30      	pophi	{r4, r5, pc}
 800040c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000410:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000414:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000418:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800041c:	d002      	beq.n	8000424 <__adddf3+0x70>
 800041e:	4240      	negs	r0, r0
 8000420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000424:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000428:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800042c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000430:	d002      	beq.n	8000438 <__adddf3+0x84>
 8000432:	4252      	negs	r2, r2
 8000434:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000438:	ea94 0f05 	teq	r4, r5
 800043c:	f000 80a7 	beq.w	800058e <__adddf3+0x1da>
 8000440:	f1a4 0401 	sub.w	r4, r4, #1
 8000444:	f1d5 0e20 	rsbs	lr, r5, #32
 8000448:	db0d      	blt.n	8000466 <__adddf3+0xb2>
 800044a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044e:	fa22 f205 	lsr.w	r2, r2, r5
 8000452:	1880      	adds	r0, r0, r2
 8000454:	f141 0100 	adc.w	r1, r1, #0
 8000458:	fa03 f20e 	lsl.w	r2, r3, lr
 800045c:	1880      	adds	r0, r0, r2
 800045e:	fa43 f305 	asr.w	r3, r3, r5
 8000462:	4159      	adcs	r1, r3
 8000464:	e00e      	b.n	8000484 <__adddf3+0xd0>
 8000466:	f1a5 0520 	sub.w	r5, r5, #32
 800046a:	f10e 0e20 	add.w	lr, lr, #32
 800046e:	2a01      	cmp	r2, #1
 8000470:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000474:	bf28      	it	cs
 8000476:	f04c 0c02 	orrcs.w	ip, ip, #2
 800047a:	fa43 f305 	asr.w	r3, r3, r5
 800047e:	18c0      	adds	r0, r0, r3
 8000480:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	d507      	bpl.n	800049a <__adddf3+0xe6>
 800048a:	f04f 0e00 	mov.w	lr, #0
 800048e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000492:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000496:	eb6e 0101 	sbc.w	r1, lr, r1
 800049a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049e:	d31b      	bcc.n	80004d8 <__adddf3+0x124>
 80004a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a4:	d30c      	bcc.n	80004c0 <__adddf3+0x10c>
 80004a6:	0849      	lsrs	r1, r1, #1
 80004a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b0:	f104 0401 	add.w	r4, r4, #1
 80004b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004bc:	f080 809a 	bcs.w	80005f4 <__adddf3+0x240>
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c4:	bf08      	it	eq
 80004c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ca:	f150 0000 	adcs.w	r0, r0, #0
 80004ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004d2:	ea41 0105 	orr.w	r1, r1, r5
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004dc:	4140      	adcs	r0, r0
 80004de:	eb41 0101 	adc.w	r1, r1, r1
 80004e2:	3c01      	subs	r4, #1
 80004e4:	bf28      	it	cs
 80004e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004ea:	d2e9      	bcs.n	80004c0 <__adddf3+0x10c>
 80004ec:	f091 0f00 	teq	r1, #0
 80004f0:	bf04      	itt	eq
 80004f2:	4601      	moveq	r1, r0
 80004f4:	2000      	moveq	r0, #0
 80004f6:	fab1 f381 	clz	r3, r1
 80004fa:	bf08      	it	eq
 80004fc:	3320      	addeq	r3, #32
 80004fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000502:	f1b3 0220 	subs.w	r2, r3, #32
 8000506:	da0c      	bge.n	8000522 <__adddf3+0x16e>
 8000508:	320c      	adds	r2, #12
 800050a:	dd08      	ble.n	800051e <__adddf3+0x16a>
 800050c:	f102 0c14 	add.w	ip, r2, #20
 8000510:	f1c2 020c 	rsb	r2, r2, #12
 8000514:	fa01 f00c 	lsl.w	r0, r1, ip
 8000518:	fa21 f102 	lsr.w	r1, r1, r2
 800051c:	e00c      	b.n	8000538 <__adddf3+0x184>
 800051e:	f102 0214 	add.w	r2, r2, #20
 8000522:	bfd8      	it	le
 8000524:	f1c2 0c20 	rsble	ip, r2, #32
 8000528:	fa01 f102 	lsl.w	r1, r1, r2
 800052c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000530:	bfdc      	itt	le
 8000532:	ea41 010c 	orrle.w	r1, r1, ip
 8000536:	4090      	lslle	r0, r2
 8000538:	1ae4      	subs	r4, r4, r3
 800053a:	bfa2      	ittt	ge
 800053c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000540:	4329      	orrge	r1, r5
 8000542:	bd30      	popge	{r4, r5, pc}
 8000544:	ea6f 0404 	mvn.w	r4, r4
 8000548:	3c1f      	subs	r4, #31
 800054a:	da1c      	bge.n	8000586 <__adddf3+0x1d2>
 800054c:	340c      	adds	r4, #12
 800054e:	dc0e      	bgt.n	800056e <__adddf3+0x1ba>
 8000550:	f104 0414 	add.w	r4, r4, #20
 8000554:	f1c4 0220 	rsb	r2, r4, #32
 8000558:	fa20 f004 	lsr.w	r0, r0, r4
 800055c:	fa01 f302 	lsl.w	r3, r1, r2
 8000560:	ea40 0003 	orr.w	r0, r0, r3
 8000564:	fa21 f304 	lsr.w	r3, r1, r4
 8000568:	ea45 0103 	orr.w	r1, r5, r3
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	f1c4 040c 	rsb	r4, r4, #12
 8000572:	f1c4 0220 	rsb	r2, r4, #32
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 f304 	lsl.w	r3, r1, r4
 800057e:	ea40 0003 	orr.w	r0, r0, r3
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	fa21 f004 	lsr.w	r0, r1, r4
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	f094 0f00 	teq	r4, #0
 8000592:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000596:	bf06      	itte	eq
 8000598:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800059c:	3401      	addeq	r4, #1
 800059e:	3d01      	subne	r5, #1
 80005a0:	e74e      	b.n	8000440 <__adddf3+0x8c>
 80005a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a6:	bf18      	it	ne
 80005a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005ac:	d029      	beq.n	8000602 <__adddf3+0x24e>
 80005ae:	ea94 0f05 	teq	r4, r5
 80005b2:	bf08      	it	eq
 80005b4:	ea90 0f02 	teqeq	r0, r2
 80005b8:	d005      	beq.n	80005c6 <__adddf3+0x212>
 80005ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80005be:	bf04      	itt	eq
 80005c0:	4619      	moveq	r1, r3
 80005c2:	4610      	moveq	r0, r2
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	ea91 0f03 	teq	r1, r3
 80005ca:	bf1e      	ittt	ne
 80005cc:	2100      	movne	r1, #0
 80005ce:	2000      	movne	r0, #0
 80005d0:	bd30      	popne	{r4, r5, pc}
 80005d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d6:	d105      	bne.n	80005e4 <__adddf3+0x230>
 80005d8:	0040      	lsls	r0, r0, #1
 80005da:	4149      	adcs	r1, r1
 80005dc:	bf28      	it	cs
 80005de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005e2:	bd30      	pop	{r4, r5, pc}
 80005e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e8:	bf3c      	itt	cc
 80005ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ee:	bd30      	popcc	{r4, r5, pc}
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005fc:	f04f 0000 	mov.w	r0, #0
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000606:	bf1a      	itte	ne
 8000608:	4619      	movne	r1, r3
 800060a:	4610      	movne	r0, r2
 800060c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000610:	bf1c      	itt	ne
 8000612:	460b      	movne	r3, r1
 8000614:	4602      	movne	r2, r0
 8000616:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800061a:	bf06      	itte	eq
 800061c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000620:	ea91 0f03 	teqeq	r1, r3
 8000624:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	bf00      	nop

0800062c <__aeabi_ui2d>:
 800062c:	f090 0f00 	teq	r0, #0
 8000630:	bf04      	itt	eq
 8000632:	2100      	moveq	r1, #0
 8000634:	4770      	bxeq	lr
 8000636:	b530      	push	{r4, r5, lr}
 8000638:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800063c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000640:	f04f 0500 	mov.w	r5, #0
 8000644:	f04f 0100 	mov.w	r1, #0
 8000648:	e750      	b.n	80004ec <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_i2d>:
 800064c:	f090 0f00 	teq	r0, #0
 8000650:	bf04      	itt	eq
 8000652:	2100      	moveq	r1, #0
 8000654:	4770      	bxeq	lr
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800065c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000660:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000664:	bf48      	it	mi
 8000666:	4240      	negmi	r0, r0
 8000668:	f04f 0100 	mov.w	r1, #0
 800066c:	e73e      	b.n	80004ec <__adddf3+0x138>
 800066e:	bf00      	nop

08000670 <__aeabi_f2d>:
 8000670:	0042      	lsls	r2, r0, #1
 8000672:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000676:	ea4f 0131 	mov.w	r1, r1, rrx
 800067a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067e:	bf1f      	itttt	ne
 8000680:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000684:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000688:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800068c:	4770      	bxne	lr
 800068e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000692:	bf08      	it	eq
 8000694:	4770      	bxeq	lr
 8000696:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800069a:	bf04      	itt	eq
 800069c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a0:	4770      	bxeq	lr
 80006a2:	b530      	push	{r4, r5, lr}
 80006a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	e71c      	b.n	80004ec <__adddf3+0x138>
 80006b2:	bf00      	nop

080006b4 <__aeabi_ul2d>:
 80006b4:	ea50 0201 	orrs.w	r2, r0, r1
 80006b8:	bf08      	it	eq
 80006ba:	4770      	bxeq	lr
 80006bc:	b530      	push	{r4, r5, lr}
 80006be:	f04f 0500 	mov.w	r5, #0
 80006c2:	e00a      	b.n	80006da <__aeabi_l2d+0x16>

080006c4 <__aeabi_l2d>:
 80006c4:	ea50 0201 	orrs.w	r2, r0, r1
 80006c8:	bf08      	it	eq
 80006ca:	4770      	bxeq	lr
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006d2:	d502      	bpl.n	80006da <__aeabi_l2d+0x16>
 80006d4:	4240      	negs	r0, r0
 80006d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e6:	f43f aed8 	beq.w	800049a <__adddf3+0xe6>
 80006ea:	f04f 0203 	mov.w	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000702:	f1c2 0320 	rsb	r3, r2, #32
 8000706:	fa00 fc03 	lsl.w	ip, r0, r3
 800070a:	fa20 f002 	lsr.w	r0, r0, r2
 800070e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000712:	ea40 000e 	orr.w	r0, r0, lr
 8000716:	fa21 f102 	lsr.w	r1, r1, r2
 800071a:	4414      	add	r4, r2
 800071c:	e6bd      	b.n	800049a <__adddf3+0xe6>
 800071e:	bf00      	nop

08000720 <__aeabi_dmul>:
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000726:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072e:	bf1d      	ittte	ne
 8000730:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000734:	ea94 0f0c 	teqne	r4, ip
 8000738:	ea95 0f0c 	teqne	r5, ip
 800073c:	f000 f8de 	bleq	80008fc <__aeabi_dmul+0x1dc>
 8000740:	442c      	add	r4, r5
 8000742:	ea81 0603 	eor.w	r6, r1, r3
 8000746:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800074a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800074e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000752:	bf18      	it	ne
 8000754:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800075c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000760:	d038      	beq.n	80007d4 <__aeabi_dmul+0xb4>
 8000762:	fba0 ce02 	umull	ip, lr, r0, r2
 8000766:	f04f 0500 	mov.w	r5, #0
 800076a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800076e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000772:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000776:	f04f 0600 	mov.w	r6, #0
 800077a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800077e:	f09c 0f00 	teq	ip, #0
 8000782:	bf18      	it	ne
 8000784:	f04e 0e01 	orrne.w	lr, lr, #1
 8000788:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800078c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000790:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000794:	d204      	bcs.n	80007a0 <__aeabi_dmul+0x80>
 8000796:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800079a:	416d      	adcs	r5, r5
 800079c:	eb46 0606 	adc.w	r6, r6, r6
 80007a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b8:	bf88      	it	hi
 80007ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007be:	d81e      	bhi.n	80007fe <__aeabi_dmul+0xde>
 80007c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007c4:	bf08      	it	eq
 80007c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007ca:	f150 0000 	adcs.w	r0, r0, #0
 80007ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d8:	ea46 0101 	orr.w	r1, r6, r1
 80007dc:	ea40 0002 	orr.w	r0, r0, r2
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e8:	bfc2      	ittt	gt
 80007ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007f2:	bd70      	popgt	{r4, r5, r6, pc}
 80007f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f8:	f04f 0e00 	mov.w	lr, #0
 80007fc:	3c01      	subs	r4, #1
 80007fe:	f300 80ab 	bgt.w	8000958 <__aeabi_dmul+0x238>
 8000802:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000806:	bfde      	ittt	le
 8000808:	2000      	movle	r0, #0
 800080a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800080e:	bd70      	pople	{r4, r5, r6, pc}
 8000810:	f1c4 0400 	rsb	r4, r4, #0
 8000814:	3c20      	subs	r4, #32
 8000816:	da35      	bge.n	8000884 <__aeabi_dmul+0x164>
 8000818:	340c      	adds	r4, #12
 800081a:	dc1b      	bgt.n	8000854 <__aeabi_dmul+0x134>
 800081c:	f104 0414 	add.w	r4, r4, #20
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f305 	lsl.w	r3, r0, r5
 8000828:	fa20 f004 	lsr.w	r0, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800083c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000840:	fa21 f604 	lsr.w	r6, r1, r4
 8000844:	eb42 0106 	adc.w	r1, r2, r6
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f1c4 040c 	rsb	r4, r4, #12
 8000858:	f1c4 0520 	rsb	r5, r4, #32
 800085c:	fa00 f304 	lsl.w	r3, r0, r4
 8000860:	fa20 f005 	lsr.w	r0, r0, r5
 8000864:	fa01 f204 	lsl.w	r2, r1, r4
 8000868:	ea40 0002 	orr.w	r0, r0, r2
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000874:	f141 0100 	adc.w	r1, r1, #0
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f1c4 0520 	rsb	r5, r4, #32
 8000888:	fa00 f205 	lsl.w	r2, r0, r5
 800088c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000890:	fa20 f304 	lsr.w	r3, r0, r4
 8000894:	fa01 f205 	lsl.w	r2, r1, r5
 8000898:	ea43 0302 	orr.w	r3, r3, r2
 800089c:	fa21 f004 	lsr.w	r0, r1, r4
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	fa21 f204 	lsr.w	r2, r1, r4
 80008a8:	ea20 0002 	bic.w	r0, r0, r2
 80008ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008b4:	bf08      	it	eq
 80008b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ba:	bd70      	pop	{r4, r5, r6, pc}
 80008bc:	f094 0f00 	teq	r4, #0
 80008c0:	d10f      	bne.n	80008e2 <__aeabi_dmul+0x1c2>
 80008c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008c6:	0040      	lsls	r0, r0, #1
 80008c8:	eb41 0101 	adc.w	r1, r1, r1
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf08      	it	eq
 80008d2:	3c01      	subeq	r4, #1
 80008d4:	d0f7      	beq.n	80008c6 <__aeabi_dmul+0x1a6>
 80008d6:	ea41 0106 	orr.w	r1, r1, r6
 80008da:	f095 0f00 	teq	r5, #0
 80008de:	bf18      	it	ne
 80008e0:	4770      	bxne	lr
 80008e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008e6:	0052      	lsls	r2, r2, #1
 80008e8:	eb43 0303 	adc.w	r3, r3, r3
 80008ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008f0:	bf08      	it	eq
 80008f2:	3d01      	subeq	r5, #1
 80008f4:	d0f7      	beq.n	80008e6 <__aeabi_dmul+0x1c6>
 80008f6:	ea43 0306 	orr.w	r3, r3, r6
 80008fa:	4770      	bx	lr
 80008fc:	ea94 0f0c 	teq	r4, ip
 8000900:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000904:	bf18      	it	ne
 8000906:	ea95 0f0c 	teqne	r5, ip
 800090a:	d00c      	beq.n	8000926 <__aeabi_dmul+0x206>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	d1d1      	bne.n	80008bc <__aeabi_dmul+0x19c>
 8000918:	ea81 0103 	eor.w	r1, r1, r3
 800091c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000920:	f04f 0000 	mov.w	r0, #0
 8000924:	bd70      	pop	{r4, r5, r6, pc}
 8000926:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800092a:	bf06      	itte	eq
 800092c:	4610      	moveq	r0, r2
 800092e:	4619      	moveq	r1, r3
 8000930:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000934:	d019      	beq.n	800096a <__aeabi_dmul+0x24a>
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	d102      	bne.n	8000942 <__aeabi_dmul+0x222>
 800093c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000940:	d113      	bne.n	800096a <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	d105      	bne.n	8000954 <__aeabi_dmul+0x234>
 8000948:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800094c:	bf1c      	itt	ne
 800094e:	4610      	movne	r0, r2
 8000950:	4619      	movne	r1, r3
 8000952:	d10a      	bne.n	800096a <__aeabi_dmul+0x24a>
 8000954:	ea81 0103 	eor.w	r1, r1, r3
 8000958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800095c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000960:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	bd70      	pop	{r4, r5, r6, pc}
 800096a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800096e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000972:	bd70      	pop	{r4, r5, r6, pc}

08000974 <__aeabi_ddiv>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800097a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800097e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000982:	bf1d      	ittte	ne
 8000984:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000988:	ea94 0f0c 	teqne	r4, ip
 800098c:	ea95 0f0c 	teqne	r5, ip
 8000990:	f000 f8a7 	bleq	8000ae2 <__aeabi_ddiv+0x16e>
 8000994:	eba4 0405 	sub.w	r4, r4, r5
 8000998:	ea81 0e03 	eor.w	lr, r1, r3
 800099c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009a4:	f000 8088 	beq.w	8000ab8 <__aeabi_ddiv+0x144>
 80009a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009cc:	429d      	cmp	r5, r3
 80009ce:	bf08      	it	eq
 80009d0:	4296      	cmpeq	r6, r2
 80009d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009da:	d202      	bcs.n	80009e2 <__aeabi_ddiv+0x6e>
 80009dc:	085b      	lsrs	r3, r3, #1
 80009de:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e2:	1ab6      	subs	r6, r6, r2
 80009e4:	eb65 0503 	sbc.w	r5, r5, r3
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2e:	bf22      	ittt	cs
 8000a30:	1ab6      	subcs	r6, r6, r2
 8000a32:	4675      	movcs	r5, lr
 8000a34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a38:	085b      	lsrs	r3, r3, #1
 8000a3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a46:	bf22      	ittt	cs
 8000a48:	1ab6      	subcs	r6, r6, r2
 8000a4a:	4675      	movcs	r5, lr
 8000a4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a50:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a54:	d018      	beq.n	8000a88 <__aeabi_ddiv+0x114>
 8000a56:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a72:	d1c0      	bne.n	80009f6 <__aeabi_ddiv+0x82>
 8000a74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a78:	d10b      	bne.n	8000a92 <__aeabi_ddiv+0x11e>
 8000a7a:	ea41 0100 	orr.w	r1, r1, r0
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a86:	e7b6      	b.n	80009f6 <__aeabi_ddiv+0x82>
 8000a88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a8c:	bf04      	itt	eq
 8000a8e:	4301      	orreq	r1, r0
 8000a90:	2000      	moveq	r0, #0
 8000a92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a96:	bf88      	it	hi
 8000a98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a9c:	f63f aeaf 	bhi.w	80007fe <__aeabi_dmul+0xde>
 8000aa0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000aa4:	bf04      	itt	eq
 8000aa6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aae:	f150 0000 	adcs.w	r0, r0, #0
 8000ab2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}
 8000ab8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000abc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ac0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ac4:	bfc2      	ittt	gt
 8000ac6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ace:	bd70      	popgt	{r4, r5, r6, pc}
 8000ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad4:	f04f 0e00 	mov.w	lr, #0
 8000ad8:	3c01      	subs	r4, #1
 8000ada:	e690      	b.n	80007fe <__aeabi_dmul+0xde>
 8000adc:	ea45 0e06 	orr.w	lr, r5, r6
 8000ae0:	e68d      	b.n	80007fe <__aeabi_dmul+0xde>
 8000ae2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ae6:	ea94 0f0c 	teq	r4, ip
 8000aea:	bf08      	it	eq
 8000aec:	ea95 0f0c 	teqeq	r5, ip
 8000af0:	f43f af3b 	beq.w	800096a <__aeabi_dmul+0x24a>
 8000af4:	ea94 0f0c 	teq	r4, ip
 8000af8:	d10a      	bne.n	8000b10 <__aeabi_ddiv+0x19c>
 8000afa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000afe:	f47f af34 	bne.w	800096a <__aeabi_dmul+0x24a>
 8000b02:	ea95 0f0c 	teq	r5, ip
 8000b06:	f47f af25 	bne.w	8000954 <__aeabi_dmul+0x234>
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	e72c      	b.n	800096a <__aeabi_dmul+0x24a>
 8000b10:	ea95 0f0c 	teq	r5, ip
 8000b14:	d106      	bne.n	8000b24 <__aeabi_ddiv+0x1b0>
 8000b16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b1a:	f43f aefd 	beq.w	8000918 <__aeabi_dmul+0x1f8>
 8000b1e:	4610      	mov	r0, r2
 8000b20:	4619      	mov	r1, r3
 8000b22:	e722      	b.n	800096a <__aeabi_dmul+0x24a>
 8000b24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b28:	bf18      	it	ne
 8000b2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b2e:	f47f aec5 	bne.w	80008bc <__aeabi_dmul+0x19c>
 8000b32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b36:	f47f af0d 	bne.w	8000954 <__aeabi_dmul+0x234>
 8000b3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b3e:	f47f aeeb 	bne.w	8000918 <__aeabi_dmul+0x1f8>
 8000b42:	e712      	b.n	800096a <__aeabi_dmul+0x24a>

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_f2iz>:
 8000be4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000be8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bec:	d30f      	bcc.n	8000c0e <__aeabi_f2iz+0x2a>
 8000bee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bf2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bf6:	d90d      	bls.n	8000c14 <__aeabi_f2iz+0x30>
 8000bf8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c04:	fa23 f002 	lsr.w	r0, r3, r2
 8000c08:	bf18      	it	ne
 8000c0a:	4240      	negne	r0, r0
 8000c0c:	4770      	bx	lr
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	4770      	bx	lr
 8000c14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c18:	d101      	bne.n	8000c1e <__aeabi_f2iz+0x3a>
 8000c1a:	0242      	lsls	r2, r0, #9
 8000c1c:	d105      	bne.n	8000c2a <__aeabi_f2iz+0x46>
 8000c1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c22:	bf08      	it	eq
 8000c24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <LCD_Fill>:
 ex:the ending x coordinate of the specified area
 ey:the ending y coordinate of the specified area
 color:the filled color value
 * @retvalue   :None
 ********************************************************************/
void LCD_Fill(u16 sx, u16 sy, u16 ex, u16 ey, u16 color) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4604      	mov	r4, r0
 8000c38:	4608      	mov	r0, r1
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4623      	mov	r3, r4
 8000c40:	80fb      	strh	r3, [r7, #6]
 8000c42:	4603      	mov	r3, r0
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	807b      	strh	r3, [r7, #2]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	803b      	strh	r3, [r7, #0]
	u16 i, j;
	u16 width = ex - sx + 1; 		//得到填充的宽度
 8000c4e:	887a      	ldrh	r2, [r7, #2]
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	3301      	adds	r3, #1
 8000c58:	817b      	strh	r3, [r7, #10]
	u16 height = ey - sy + 1;		//高度
 8000c5a:	883a      	ldrh	r2, [r7, #0]
 8000c5c:	88bb      	ldrh	r3, [r7, #4]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx, sy, ex, ey);		//设置显示窗口
 8000c66:	883b      	ldrh	r3, [r7, #0]
 8000c68:	887a      	ldrh	r2, [r7, #2]
 8000c6a:	88b9      	ldrh	r1, [r7, #4]
 8000c6c:	88f8      	ldrh	r0, [r7, #6]
 8000c6e:	f002 fb41 	bl	80032f4 <LCD_SetWindows>
	for (i = 0; i < height; i++) {
 8000c72:	2300      	movs	r3, #0
 8000c74:	81fb      	strh	r3, [r7, #14]
 8000c76:	e010      	b.n	8000c9a <LCD_Fill+0x6a>
		for (j = 0; j < width; j++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	81bb      	strh	r3, [r7, #12]
 8000c7c:	e006      	b.n	8000c8c <LCD_Fill+0x5c>
			Lcd_WriteData_16Bit(color);	//写入数据
 8000c7e:	8c3b      	ldrh	r3, [r7, #32]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 f9a7 	bl	8002fd4 <Lcd_WriteData_16Bit>
		for (j = 0; j < width; j++)
 8000c86:	89bb      	ldrh	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	81bb      	strh	r3, [r7, #12]
 8000c8c:	89ba      	ldrh	r2, [r7, #12]
 8000c8e:	897b      	ldrh	r3, [r7, #10]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d3f4      	bcc.n	8000c7e <LCD_Fill+0x4e>
	for (i = 0; i < height; i++) {
 8000c94:	89fb      	ldrh	r3, [r7, #14]
 8000c96:	3301      	adds	r3, #1
 8000c98:	81fb      	strh	r3, [r7, #14]
 8000c9a:	89fa      	ldrh	r2, [r7, #14]
 8000c9c:	893b      	ldrh	r3, [r7, #8]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d3ea      	bcc.n	8000c78 <LCD_Fill+0x48>
	}
	LCD_SetWindows(0, 0, lcddev.width - 1, lcddev.height - 1);	//恢复窗口设置为全屏
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <LCD_Fill+0x94>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <LCD_Fill+0x94>)
 8000cac:	885b      	ldrh	r3, [r3, #2]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f002 fb1d 	bl	80032f4 <LCD_SetWindows>
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200022a8 	.word	0x200022a8

08000cc8 <LCD_ShowChar>:
 num:the ascii code of display character(0~94)
 size:the size of display character
 mode:0-no overlying,1-overlying
 * @retvalue   :None
 ******************************************************************************/
void LCD_ShowChar(u16 x, u16 y, u16 fc, u16 bc, u8 num, u8 size, u8 mode) {
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4623      	mov	r3, r4
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	807b      	strh	r3, [r7, #2]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	803b      	strh	r3, [r7, #0]
	u8 temp;
	u8 pos, t;
	u16 colortemp = POINT_COLOR;
 8000ce6:	4b62      	ldr	r3, [pc, #392]	; (8000e70 <LCD_ShowChar+0x1a8>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	817b      	strh	r3, [r7, #10]

	num = num - ' '; //得到偏移后的值
 8000cec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cf0:	3b20      	subs	r3, #32
 8000cf2:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x, y, x + size / 2 - 1, y + size - 1); //设置单个文字显示窗口
 8000cf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cfa:	085b      	lsrs	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	4413      	add	r3, r2
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	3b01      	subs	r3, #1
 8000d08:	b29c      	uxth	r4, r3
 8000d0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	88bb      	ldrh	r3, [r7, #4]
 8000d12:	4413      	add	r3, r2
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	3b01      	subs	r3, #1
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	88b9      	ldrh	r1, [r7, #4]
 8000d1c:	88f8      	ldrh	r0, [r7, #6]
 8000d1e:	4622      	mov	r2, r4
 8000d20:	f002 fae8 	bl	80032f4 <LCD_SetWindows>
	if (!mode) //非叠加方式
 8000d24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d143      	bne.n	8000db4 <LCD_ShowChar+0xec>
	{
		for (pos = 0; pos < size; pos++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73bb      	strb	r3, [r7, #14]
 8000d30:	e03a      	b.n	8000da8 <LCD_ShowChar+0xe0>
			if (size == 12)
 8000d32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d36:	2b0c      	cmp	r3, #12
 8000d38:	d10c      	bne.n	8000d54 <LCD_ShowChar+0x8c>
				temp = asc2_1206[num][pos]; //调用1206字体
 8000d3a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d3e:	7bb9      	ldrb	r1, [r7, #14]
 8000d40:	484c      	ldr	r0, [pc, #304]	; (8000e74 <LCD_ShowChar+0x1ac>)
 8000d42:	4613      	mov	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4403      	add	r3, r0
 8000d4c:	440b      	add	r3, r1
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e008      	b.n	8000d66 <LCD_ShowChar+0x9e>
			else
				temp = asc2_1608[num][pos];		 //调用1608字体
 8000d54:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d58:	7bbb      	ldrb	r3, [r7, #14]
 8000d5a:	4947      	ldr	r1, [pc, #284]	; (8000e78 <LCD_ShowChar+0x1b0>)
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	440a      	add	r2, r1
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	73fb      	strb	r3, [r7, #15]
			for (t = 0; t < size / 2; t++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	737b      	strb	r3, [r7, #13]
 8000d6a:	e013      	b.n	8000d94 <LCD_ShowChar+0xcc>
				if (temp & 0x01)
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d004      	beq.n	8000d80 <LCD_ShowChar+0xb8>
					Lcd_WriteData_16Bit(fc);
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 f92b 	bl	8002fd4 <Lcd_WriteData_16Bit>
 8000d7e:	e003      	b.n	8000d88 <LCD_ShowChar+0xc0>
				else
					Lcd_WriteData_16Bit(bc);
 8000d80:	883b      	ldrh	r3, [r7, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 f926 	bl	8002fd4 <Lcd_WriteData_16Bit>
				temp >>= 1;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
			for (t = 0; t < size / 2; t++) {
 8000d8e:	7b7b      	ldrb	r3, [r7, #13]
 8000d90:	3301      	adds	r3, #1
 8000d92:	737b      	strb	r3, [r7, #13]
 8000d94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d98:	085b      	lsrs	r3, r3, #1
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	7b7a      	ldrb	r2, [r7, #13]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d3e4      	bcc.n	8000d6c <LCD_ShowChar+0xa4>
		for (pos = 0; pos < size; pos++) {
 8000da2:	7bbb      	ldrb	r3, [r7, #14]
 8000da4:	3301      	adds	r3, #1
 8000da6:	73bb      	strb	r3, [r7, #14]
 8000da8:	7bba      	ldrb	r2, [r7, #14]
 8000daa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3bf      	bcc.n	8000d32 <LCD_ShowChar+0x6a>
 8000db2:	e049      	b.n	8000e48 <LCD_ShowChar+0x180>
			}

		}
	} else		 //叠加方式
	{
		for (pos = 0; pos < size; pos++) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	73bb      	strb	r3, [r7, #14]
 8000db8:	e041      	b.n	8000e3e <LCD_ShowChar+0x176>
			if (size == 12)
 8000dba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dbe:	2b0c      	cmp	r3, #12
 8000dc0:	d10c      	bne.n	8000ddc <LCD_ShowChar+0x114>
				temp = asc2_1206[num][pos];		 //调用1206字体
 8000dc2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dc6:	7bb9      	ldrb	r1, [r7, #14]
 8000dc8:	482a      	ldr	r0, [pc, #168]	; (8000e74 <LCD_ShowChar+0x1ac>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4403      	add	r3, r0
 8000dd4:	440b      	add	r3, r1
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	73fb      	strb	r3, [r7, #15]
 8000dda:	e008      	b.n	8000dee <LCD_ShowChar+0x126>
			else
				temp = asc2_1608[num][pos];		 //调用1608字体
 8000ddc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000de0:	7bbb      	ldrb	r3, [r7, #14]
 8000de2:	4925      	ldr	r1, [pc, #148]	; (8000e78 <LCD_ShowChar+0x1b0>)
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	440a      	add	r2, r1
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	73fb      	strb	r3, [r7, #15]
			for (t = 0; t < size / 2; t++) {
 8000dee:	2300      	movs	r3, #0
 8000df0:	737b      	strb	r3, [r7, #13]
 8000df2:	e01a      	b.n	8000e2a <LCD_ShowChar+0x162>
				POINT_COLOR = fc;
 8000df4:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <LCD_ShowChar+0x1a8>)
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	8013      	strh	r3, [r2, #0]
				if (temp & 0x01)
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00c      	beq.n	8000e1e <LCD_ShowChar+0x156>
					LCD_DrawPoint(x + t, y + pos);		 //画一个点
 8000e04:	7b7b      	ldrb	r3, [r7, #13]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b298      	uxth	r0, r3
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	88bb      	ldrh	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f002 f8eb 	bl	8002ff4 <LCD_DrawPoint>
				temp >>= 1;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	085b      	lsrs	r3, r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
			for (t = 0; t < size / 2; t++) {
 8000e24:	7b7b      	ldrb	r3, [r7, #13]
 8000e26:	3301      	adds	r3, #1
 8000e28:	737b      	strb	r3, [r7, #13]
 8000e2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e2e:	085b      	lsrs	r3, r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	7b7a      	ldrb	r2, [r7, #13]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d3dd      	bcc.n	8000df4 <LCD_ShowChar+0x12c>
		for (pos = 0; pos < size; pos++) {
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	73bb      	strb	r3, [r7, #14]
 8000e3e:	7bba      	ldrb	r2, [r7, #14]
 8000e40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d3b8      	bcc.n	8000dba <LCD_ShowChar+0xf2>
			}
		}
	}
	POINT_COLOR = colortemp;
 8000e48:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <LCD_ShowChar+0x1a8>)
 8000e4a:	897b      	ldrh	r3, [r7, #10]
 8000e4c:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0, 0, lcddev.width - 1, lcddev.height - 1);		 //恢复窗口为全屏
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <LCD_ShowChar+0x1b4>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <LCD_ShowChar+0x1b4>)
 8000e58:	885b      	ldrh	r3, [r3, #2]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2000      	movs	r0, #0
 8000e62:	f002 fa47 	bl	80032f4 <LCD_SetWindows>
}
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd90      	pop	{r4, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200004ec 	.word	0x200004ec
 8000e74:	08009230 	.word	0x08009230
 8000e78:	080096a4 	.word	0x080096a4
 8000e7c:	200022a8 	.word	0x200022a8

08000e80 <GUI_DrawFont16>:
 bc:the background color of Chinese character
 s:the start address of the Chinese character
 mode:0-no overlying,1-overlying
 * @retvalue   :None
 ******************************************************************************/
void GUI_DrawFont16(u16 x, u16 y, u16 fc, u16 bc, u8 *s, u8 mode) {
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4604      	mov	r4, r0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4623      	mov	r3, r4
 8000e90:	80fb      	strh	r3, [r7, #6]
 8000e92:	4603      	mov	r3, r0
 8000e94:	80bb      	strh	r3, [r7, #4]
 8000e96:	460b      	mov	r3, r1
 8000e98:	807b      	strh	r3, [r7, #2]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	803b      	strh	r3, [r7, #0]
	u8 i, j;
	u16 k;
	u16 HZnum;
	u16 x0 = x;
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	817b      	strh	r3, [r7, #10]
	HZnum = sizeof(tfont16) / sizeof(typFNT_GB16);	//自动统计汉字数目
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	813b      	strh	r3, [r7, #8]

	for (k = 0; k < HZnum; k++) {
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	81bb      	strh	r3, [r7, #12]
 8000eaa:	e083      	b.n	8000fb4 <GUI_DrawFont16+0x134>
		if ((tfont16[k].Index[0] == *(s))
 8000eac:	89ba      	ldrh	r2, [r7, #12]
 8000eae:	494c      	ldr	r1, [pc, #304]	; (8000fe0 <GUI_DrawFont16+0x160>)
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	4413      	add	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	440b      	add	r3, r1
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d174      	bne.n	8000fae <GUI_DrawFont16+0x12e>
				&& (tfont16[k].Index[1] == *(s + 1))) {
 8000ec4:	89ba      	ldrh	r2, [r7, #12]
 8000ec6:	4946      	ldr	r1, [pc, #280]	; (8000fe0 <GUI_DrawFont16+0x160>)
 8000ec8:	4613      	mov	r3, r2
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	781a      	ldrb	r2, [r3, #0]
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d166      	bne.n	8000fae <GUI_DrawFont16+0x12e>
			LCD_SetWindows(x, y, x + 16 - 1, y + 16 - 1);
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	330f      	adds	r3, #15
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	330f      	adds	r3, #15
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	88b9      	ldrh	r1, [r7, #4]
 8000eee:	88f8      	ldrh	r0, [r7, #6]
 8000ef0:	f002 fa00 	bl	80032f4 <LCD_SetWindows>
			for (i = 0; i < 16 * 2; i++) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e056      	b.n	8000fa8 <GUI_DrawFont16+0x128>
				for (j = 0; j < 8; j++) {
 8000efa:	2300      	movs	r3, #0
 8000efc:	73bb      	strb	r3, [r7, #14]
 8000efe:	e04d      	b.n	8000f9c <GUI_DrawFont16+0x11c>
					if (!mode) //非叠加方式
 8000f00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d11c      	bne.n	8000f42 <GUI_DrawFont16+0xc2>
					{
						if (tfont16[k].Msk[i] & (0x80 >> j))
 8000f08:	89ba      	ldrh	r2, [r7, #12]
 8000f0a:	7bf9      	ldrb	r1, [r7, #15]
 8000f0c:	4834      	ldr	r0, [pc, #208]	; (8000fe0 <GUI_DrawFont16+0x160>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4403      	add	r3, r0
 8000f18:	440b      	add	r3, r1
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	fa42 f303 	asr.w	r3, r2, r3
 8000f28:	400b      	ands	r3, r1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d004      	beq.n	8000f38 <GUI_DrawFont16+0xb8>
							Lcd_WriteData_16Bit(fc);
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 f84f 	bl	8002fd4 <Lcd_WriteData_16Bit>
 8000f36:	e02e      	b.n	8000f96 <GUI_DrawFont16+0x116>
						else
							Lcd_WriteData_16Bit(bc);
 8000f38:	883b      	ldrh	r3, [r7, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 f84a 	bl	8002fd4 <Lcd_WriteData_16Bit>
 8000f40:	e029      	b.n	8000f96 <GUI_DrawFont16+0x116>
					} else {
						POINT_COLOR = fc;
 8000f42:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <GUI_DrawFont16+0x164>)
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	8013      	strh	r3, [r2, #0]
						if (tfont16[k].Msk[i] & (0x80 >> j))
 8000f48:	89ba      	ldrh	r2, [r7, #12]
 8000f4a:	7bf9      	ldrb	r1, [r7, #15]
 8000f4c:	4824      	ldr	r0, [pc, #144]	; (8000fe0 <GUI_DrawFont16+0x160>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	4413      	add	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4403      	add	r3, r0
 8000f58:	440b      	add	r3, r1
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	fa42 f303 	asr.w	r3, r2, r3
 8000f68:	400b      	ands	r3, r1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d005      	beq.n	8000f7a <GUI_DrawFont16+0xfa>
							LCD_DrawPoint(x, y); //画一个点
 8000f6e:	88ba      	ldrh	r2, [r7, #4]
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 f83d 	bl	8002ff4 <LCD_DrawPoint>
						x++;
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	80fb      	strh	r3, [r7, #6]
						if ((x - x0) == 16) {
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	897b      	ldrh	r3, [r7, #10]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b10      	cmp	r3, #16
 8000f88:	d105      	bne.n	8000f96 <GUI_DrawFont16+0x116>
							x = x0;
 8000f8a:	897b      	ldrh	r3, [r7, #10]
 8000f8c:	80fb      	strh	r3, [r7, #6]
							y++;
 8000f8e:	88bb      	ldrh	r3, [r7, #4]
 8000f90:	3301      	adds	r3, #1
 8000f92:	80bb      	strh	r3, [r7, #4]
							break;
 8000f94:	e005      	b.n	8000fa2 <GUI_DrawFont16+0x122>
				for (j = 0; j < 8; j++) {
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	73bb      	strb	r3, [r7, #14]
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	2b07      	cmp	r3, #7
 8000fa0:	d9ae      	bls.n	8000f00 <GUI_DrawFont16+0x80>
			for (i = 0; i < 16 * 2; i++) {
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b1f      	cmp	r3, #31
 8000fac:	d9a5      	bls.n	8000efa <GUI_DrawFont16+0x7a>
	for (k = 0; k < HZnum; k++) {
 8000fae:	89bb      	ldrh	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	81bb      	strh	r3, [r7, #12]
 8000fb4:	89ba      	ldrh	r2, [r7, #12]
 8000fb6:	893b      	ldrh	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f4ff af77 	bcc.w	8000eac <GUI_DrawFont16+0x2c>

		}
		continue;  //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响
	}

	LCD_SetWindows(0, 0, lcddev.width - 1, lcddev.height - 1);  //恢复窗口为全屏
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <GUI_DrawFont16+0x168>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <GUI_DrawFont16+0x168>)
 8000fc8:	885b      	ldrh	r3, [r3, #2]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f002 f98f 	bl	80032f4 <LCD_SetWindows>
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd90      	pop	{r4, r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	08009c94 	.word	0x08009c94
 8000fe4:	200004ec 	.word	0x200004ec
 8000fe8:	200022a8 	.word	0x200022a8

08000fec <GUI_DrawFont24>:
 bc:the background color of Chinese character
 s:the start address of the Chinese character
 mode:0-no overlying,1-overlying
 * @retvalue   :None
 ******************************************************************************/
void GUI_DrawFont24(u16 x, u16 y, u16 fc, u16 bc, u8 *s, u8 mode) {
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	4603      	mov	r3, r0
 8001000:	80bb      	strh	r3, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	807b      	strh	r3, [r7, #2]
 8001006:	4613      	mov	r3, r2
 8001008:	803b      	strh	r3, [r7, #0]
	u8 i, j;
	u16 k;
	u16 HZnum;
	u16 x0 = x;
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	817b      	strh	r3, [r7, #10]
	HZnum = sizeof(tfont24) / sizeof(typFNT_GB24);	//自动统计汉字数目
 800100e:	2307      	movs	r3, #7
 8001010:	813b      	strh	r3, [r7, #8]

	for (k = 0; k < HZnum; k++) {
 8001012:	2300      	movs	r3, #0
 8001014:	81bb      	strh	r3, [r7, #12]
 8001016:	e07f      	b.n	8001118 <GUI_DrawFont24+0x12c>
		if ((tfont24[k].Index[0] == *(s))
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	4a4a      	ldr	r2, [pc, #296]	; (8001144 <GUI_DrawFont24+0x158>)
 800101c:	214a      	movs	r1, #74	; 0x4a
 800101e:	fb01 f303 	mul.w	r3, r1, r3
 8001022:	4413      	add	r3, r2
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d171      	bne.n	8001112 <GUI_DrawFont24+0x126>
				&& (tfont24[k].Index[1] == *(s + 1))) {
 800102e:	89bb      	ldrh	r3, [r7, #12]
 8001030:	4a44      	ldr	r2, [pc, #272]	; (8001144 <GUI_DrawFont24+0x158>)
 8001032:	214a      	movs	r1, #74	; 0x4a
 8001034:	fb01 f303 	mul.w	r3, r1, r3
 8001038:	4413      	add	r3, r2
 800103a:	3301      	adds	r3, #1
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	3301      	adds	r3, #1
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d164      	bne.n	8001112 <GUI_DrawFont24+0x126>
			LCD_SetWindows(x, y, x + 24 - 1, y + 24 - 1);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	3317      	adds	r3, #23
 800104c:	b29a      	uxth	r2, r3
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	3317      	adds	r3, #23
 8001052:	b29b      	uxth	r3, r3
 8001054:	88b9      	ldrh	r1, [r7, #4]
 8001056:	88f8      	ldrh	r0, [r7, #6]
 8001058:	f002 f94c 	bl	80032f4 <LCD_SetWindows>
			for (i = 0; i < 24 * 3; i++) {
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e054      	b.n	800110c <GUI_DrawFont24+0x120>
				for (j = 0; j < 8; j++) {
 8001062:	2300      	movs	r3, #0
 8001064:	73bb      	strb	r3, [r7, #14]
 8001066:	e04b      	b.n	8001100 <GUI_DrawFont24+0x114>
					if (!mode) //非叠加方式
 8001068:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800106c:	2b00      	cmp	r3, #0
 800106e:	d11b      	bne.n	80010a8 <GUI_DrawFont24+0xbc>
					{
						if (tfont24[k].Msk[i] & (0x80 >> j))
 8001070:	89ba      	ldrh	r2, [r7, #12]
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	4933      	ldr	r1, [pc, #204]	; (8001144 <GUI_DrawFont24+0x158>)
 8001076:	204a      	movs	r0, #74	; 0x4a
 8001078:	fb00 f202 	mul.w	r2, r0, r2
 800107c:	440a      	add	r2, r1
 800107e:	4413      	add	r3, r2
 8001080:	3302      	adds	r3, #2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	fa42 f303 	asr.w	r3, r2, r3
 800108e:	400b      	ands	r3, r1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <GUI_DrawFont24+0xb2>
							Lcd_WriteData_16Bit(fc);
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	4618      	mov	r0, r3
 8001098:	f001 ff9c 	bl	8002fd4 <Lcd_WriteData_16Bit>
 800109c:	e02d      	b.n	80010fa <GUI_DrawFont24+0x10e>
						else
							Lcd_WriteData_16Bit(bc);
 800109e:	883b      	ldrh	r3, [r7, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 ff97 	bl	8002fd4 <Lcd_WriteData_16Bit>
 80010a6:	e028      	b.n	80010fa <GUI_DrawFont24+0x10e>
					} else {
						POINT_COLOR = fc;
 80010a8:	4a27      	ldr	r2, [pc, #156]	; (8001148 <GUI_DrawFont24+0x15c>)
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	8013      	strh	r3, [r2, #0]
						if (tfont24[k].Msk[i] & (0x80 >> j))
 80010ae:	89ba      	ldrh	r2, [r7, #12]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4924      	ldr	r1, [pc, #144]	; (8001144 <GUI_DrawFont24+0x158>)
 80010b4:	204a      	movs	r0, #74	; 0x4a
 80010b6:	fb00 f202 	mul.w	r2, r0, r2
 80010ba:	440a      	add	r2, r1
 80010bc:	4413      	add	r3, r2
 80010be:	3302      	adds	r3, #2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	7bbb      	ldrb	r3, [r7, #14]
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	fa42 f303 	asr.w	r3, r2, r3
 80010cc:	400b      	ands	r3, r1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <GUI_DrawFont24+0xf2>
							LCD_DrawPoint(x, y); //画一个点
 80010d2:	88ba      	ldrh	r2, [r7, #4]
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 ff8b 	bl	8002ff4 <LCD_DrawPoint>
						x++;
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	3301      	adds	r3, #1
 80010e2:	80fb      	strh	r3, [r7, #6]
						if ((x - x0) == 24) {
 80010e4:	88fa      	ldrh	r2, [r7, #6]
 80010e6:	897b      	ldrh	r3, [r7, #10]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b18      	cmp	r3, #24
 80010ec:	d105      	bne.n	80010fa <GUI_DrawFont24+0x10e>
							x = x0;
 80010ee:	897b      	ldrh	r3, [r7, #10]
 80010f0:	80fb      	strh	r3, [r7, #6]
							y++;
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	3301      	adds	r3, #1
 80010f6:	80bb      	strh	r3, [r7, #4]
							break;
 80010f8:	e005      	b.n	8001106 <GUI_DrawFont24+0x11a>
				for (j = 0; j < 8; j++) {
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	3301      	adds	r3, #1
 80010fe:	73bb      	strb	r3, [r7, #14]
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	2b07      	cmp	r3, #7
 8001104:	d9b0      	bls.n	8001068 <GUI_DrawFont24+0x7c>
			for (i = 0; i < 24 * 3; i++) {
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	3301      	adds	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b47      	cmp	r3, #71	; 0x47
 8001110:	d9a7      	bls.n	8001062 <GUI_DrawFont24+0x76>
	for (k = 0; k < HZnum; k++) {
 8001112:	89bb      	ldrh	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	81bb      	strh	r3, [r7, #12]
 8001118:	89ba      	ldrh	r2, [r7, #12]
 800111a:	893b      	ldrh	r3, [r7, #8]
 800111c:	429a      	cmp	r2, r3
 800111e:	f4ff af7b 	bcc.w	8001018 <GUI_DrawFont24+0x2c>

		}
		continue;  //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响
	}

	LCD_SetWindows(0, 0, lcddev.width - 1, lcddev.height - 1);  //恢复窗口为全屏
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <GUI_DrawFont24+0x160>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	3b01      	subs	r3, #1
 8001128:	b29a      	uxth	r2, r3
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <GUI_DrawFont24+0x160>)
 800112c:	885b      	ldrh	r3, [r3, #2]
 800112e:	3b01      	subs	r3, #1
 8001130:	b29b      	uxth	r3, r3
 8001132:	2100      	movs	r1, #0
 8001134:	2000      	movs	r0, #0
 8001136:	f002 f8dd 	bl	80032f4 <LCD_SetWindows>
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}
 8001142:	bf00      	nop
 8001144:	08009e2c 	.word	0x08009e2c
 8001148:	200004ec 	.word	0x200004ec
 800114c:	200022a8 	.word	0x200022a8

08001150 <GUI_DrawFont32>:
 bc:the background color of Chinese character
 s:the start address of the Chinese character
 mode:0-no overlying,1-overlying
 * @retvalue   :None
 ******************************************************************************/
void GUI_DrawFont32(u16 x, u16 y, u16 fc, u16 bc, u8 *s, u8 mode) {
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	4604      	mov	r4, r0
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4623      	mov	r3, r4
 8001160:	80fb      	strh	r3, [r7, #6]
 8001162:	4603      	mov	r3, r0
 8001164:	80bb      	strh	r3, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	807b      	strh	r3, [r7, #2]
 800116a:	4613      	mov	r3, r2
 800116c:	803b      	strh	r3, [r7, #0]
	u8 i, j;
	u16 k;
	u16 HZnum;
	u16 x0 = x;
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	817b      	strh	r3, [r7, #10]
	HZnum = sizeof(tfont32) / sizeof(typFNT_GB32);	//自动统计汉字数目
 8001172:	2304      	movs	r3, #4
 8001174:	813b      	strh	r3, [r7, #8]
	for (k = 0; k < HZnum; k++) {
 8001176:	2300      	movs	r3, #0
 8001178:	81bb      	strh	r3, [r7, #12]
 800117a:	e084      	b.n	8001286 <GUI_DrawFont32+0x136>
		if ((tfont32[k].Index[0] == *(s))
 800117c:	89ba      	ldrh	r2, [r7, #12]
 800117e:	494c      	ldr	r1, [pc, #304]	; (80012b0 <GUI_DrawFont32+0x160>)
 8001180:	4613      	mov	r3, r2
 8001182:	019b      	lsls	r3, r3, #6
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	440b      	add	r3, r1
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d175      	bne.n	8001280 <GUI_DrawFont32+0x130>
				&& (tfont32[k].Index[1] == *(s + 1))) {
 8001194:	89ba      	ldrh	r2, [r7, #12]
 8001196:	4946      	ldr	r1, [pc, #280]	; (80012b0 <GUI_DrawFont32+0x160>)
 8001198:	4613      	mov	r3, r2
 800119a:	019b      	lsls	r3, r3, #6
 800119c:	4413      	add	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	440b      	add	r3, r1
 80011a2:	3301      	adds	r3, #1
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	3301      	adds	r3, #1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d167      	bne.n	8001280 <GUI_DrawFont32+0x130>
			LCD_SetWindows(x, y, x + 32 - 1, y + 32 - 1);
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	331f      	adds	r3, #31
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	88bb      	ldrh	r3, [r7, #4]
 80011b8:	331f      	adds	r3, #31
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	88b9      	ldrh	r1, [r7, #4]
 80011be:	88f8      	ldrh	r0, [r7, #6]
 80011c0:	f002 f898 	bl	80032f4 <LCD_SetWindows>
			for (i = 0; i < 32 * 4; i++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e056      	b.n	8001278 <GUI_DrawFont32+0x128>
				for (j = 0; j < 8; j++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	73bb      	strb	r3, [r7, #14]
 80011ce:	e04d      	b.n	800126c <GUI_DrawFont32+0x11c>
					if (!mode) //非叠加方式
 80011d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d11c      	bne.n	8001212 <GUI_DrawFont32+0xc2>
					{
						if (tfont32[k].Msk[i] & (0x80 >> j))
 80011d8:	89ba      	ldrh	r2, [r7, #12]
 80011da:	7bf9      	ldrb	r1, [r7, #15]
 80011dc:	4834      	ldr	r0, [pc, #208]	; (80012b0 <GUI_DrawFont32+0x160>)
 80011de:	4613      	mov	r3, r2
 80011e0:	019b      	lsls	r3, r3, #6
 80011e2:	4413      	add	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4403      	add	r3, r0
 80011e8:	440b      	add	r3, r1
 80011ea:	3302      	adds	r3, #2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	7bbb      	ldrb	r3, [r7, #14]
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	fa42 f303 	asr.w	r3, r2, r3
 80011f8:	400b      	ands	r3, r1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d004      	beq.n	8001208 <GUI_DrawFont32+0xb8>
							Lcd_WriteData_16Bit(fc);
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fee7 	bl	8002fd4 <Lcd_WriteData_16Bit>
 8001206:	e02e      	b.n	8001266 <GUI_DrawFont32+0x116>
						else
							Lcd_WriteData_16Bit(bc);
 8001208:	883b      	ldrh	r3, [r7, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fee2 	bl	8002fd4 <Lcd_WriteData_16Bit>
 8001210:	e029      	b.n	8001266 <GUI_DrawFont32+0x116>
					} else {
						POINT_COLOR = fc;
 8001212:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <GUI_DrawFont32+0x164>)
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	8013      	strh	r3, [r2, #0]
						if (tfont32[k].Msk[i] & (0x80 >> j))
 8001218:	89ba      	ldrh	r2, [r7, #12]
 800121a:	7bf9      	ldrb	r1, [r7, #15]
 800121c:	4824      	ldr	r0, [pc, #144]	; (80012b0 <GUI_DrawFont32+0x160>)
 800121e:	4613      	mov	r3, r2
 8001220:	019b      	lsls	r3, r3, #6
 8001222:	4413      	add	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4403      	add	r3, r0
 8001228:	440b      	add	r3, r1
 800122a:	3302      	adds	r3, #2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	fa42 f303 	asr.w	r3, r2, r3
 8001238:	400b      	ands	r3, r1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d005      	beq.n	800124a <GUI_DrawFont32+0xfa>
							LCD_DrawPoint(x, y); //画一个点
 800123e:	88ba      	ldrh	r2, [r7, #4]
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f001 fed5 	bl	8002ff4 <LCD_DrawPoint>
						x++;
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	3301      	adds	r3, #1
 800124e:	80fb      	strh	r3, [r7, #6]
						if ((x - x0) == 32) {
 8001250:	88fa      	ldrh	r2, [r7, #6]
 8001252:	897b      	ldrh	r3, [r7, #10]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b20      	cmp	r3, #32
 8001258:	d105      	bne.n	8001266 <GUI_DrawFont32+0x116>
							x = x0;
 800125a:	897b      	ldrh	r3, [r7, #10]
 800125c:	80fb      	strh	r3, [r7, #6]
							y++;
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	3301      	adds	r3, #1
 8001262:	80bb      	strh	r3, [r7, #4]
							break;
 8001264:	e005      	b.n	8001272 <GUI_DrawFont32+0x122>
				for (j = 0; j < 8; j++) {
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	3301      	adds	r3, #1
 800126a:	73bb      	strb	r3, [r7, #14]
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	2b07      	cmp	r3, #7
 8001270:	d9ae      	bls.n	80011d0 <GUI_DrawFont32+0x80>
			for (i = 0; i < 32 * 4; i++) {
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	3301      	adds	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127c:	2b00      	cmp	r3, #0
 800127e:	daa4      	bge.n	80011ca <GUI_DrawFont32+0x7a>
	for (k = 0; k < HZnum; k++) {
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	3301      	adds	r3, #1
 8001284:	81bb      	strh	r3, [r7, #12]
 8001286:	89ba      	ldrh	r2, [r7, #12]
 8001288:	893b      	ldrh	r3, [r7, #8]
 800128a:	429a      	cmp	r2, r3
 800128c:	f4ff af76 	bcc.w	800117c <GUI_DrawFont32+0x2c>

		}
		continue;  //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响
	}

	LCD_SetWindows(0, 0, lcddev.width - 1, lcddev.height - 1);  //恢复窗口为全屏
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <GUI_DrawFont32+0x168>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	3b01      	subs	r3, #1
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <GUI_DrawFont32+0x168>)
 800129a:	885b      	ldrh	r3, [r3, #2]
 800129c:	3b01      	subs	r3, #1
 800129e:	b29b      	uxth	r3, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	2000      	movs	r0, #0
 80012a4:	f002 f826 	bl	80032f4 <LCD_SetWindows>
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd90      	pop	{r4, r7, pc}
 80012b0:	0800a034 	.word	0x0800a034
 80012b4:	200004ec 	.word	0x200004ec
 80012b8:	200022a8 	.word	0x200022a8

080012bc <Show_Str>:
 size:the size of Chinese and English strings
 mode:0-no overlying,1-overlying
 * @retvalue   :None
 ******************************************************************************/

void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str, u8 size, u8 mode) {
 80012bc:	b5b0      	push	{r4, r5, r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af04      	add	r7, sp, #16
 80012c2:	4604      	mov	r4, r0
 80012c4:	4608      	mov	r0, r1
 80012c6:	4611      	mov	r1, r2
 80012c8:	461a      	mov	r2, r3
 80012ca:	4623      	mov	r3, r4
 80012cc:	80fb      	strh	r3, [r7, #6]
 80012ce:	4603      	mov	r3, r0
 80012d0:	80bb      	strh	r3, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	807b      	strh	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	803b      	strh	r3, [r7, #0]
	u16 x0 = x;
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	81bb      	strh	r3, [r7, #12]
	u8 bHz = 0;     //字符或者中文
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]
	while (*str != 0)     //数据未结束
 80012e2:	e0af      	b.n	8001444 <Show_Str+0x188>
	{
		if (!bHz) {
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d161      	bne.n	80013ae <Show_Str+0xf2>
			if (x > (lcddev.width - size / 2) || y > (lcddev.height - size))
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	4b5b      	ldr	r3, [pc, #364]	; (800145c <Show_Str+0x1a0>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	1acb      	subs	r3, r1, r3
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f300 80a7 	bgt.w	8001450 <Show_Str+0x194>
 8001302:	88ba      	ldrh	r2, [r7, #4]
 8001304:	4b55      	ldr	r3, [pc, #340]	; (800145c <Show_Str+0x1a0>)
 8001306:	885b      	ldrh	r3, [r3, #2]
 8001308:	4619      	mov	r1, r3
 800130a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800130e:	1acb      	subs	r3, r1, r3
 8001310:	429a      	cmp	r2, r3
 8001312:	f300 809d 	bgt.w	8001450 <Show_Str+0x194>
				return;
			if (*str > 0x80)
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b80      	cmp	r3, #128	; 0x80
 800131c:	d902      	bls.n	8001324 <Show_Str+0x68>
				bHz = 1;     //中文
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e08f      	b.n	8001444 <Show_Str+0x188>
			else              //字符
			{
				if (*str == 0x0D)              //换行符号
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b0d      	cmp	r3, #13
 800132a:	d10b      	bne.n	8001344 <Show_Str+0x88>
				{
					y += size;
 800132c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001330:	b29a      	uxth	r2, r3
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	80bb      	strh	r3, [r7, #4]
					x = x0;
 8001338:	89bb      	ldrh	r3, [r7, #12]
 800133a:	80fb      	strh	r3, [r7, #6]
					str++;
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	3301      	adds	r3, #1
 8001340:	623b      	str	r3, [r7, #32]
 8001342:	e030      	b.n	80013a6 <Show_Str+0xea>
				} else {
					if (size > 16)             //字库中没有集成12X24 16X32的英文字体,用8X16代替
 8001344:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001348:	2b10      	cmp	r3, #16
 800134a:	d913      	bls.n	8001374 <Show_Str+0xb8>
					{
						LCD_ShowChar(x, y, fc, bc, *str, 16, mode);
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	883d      	ldrh	r5, [r7, #0]
 8001352:	887c      	ldrh	r4, [r7, #2]
 8001354:	88b9      	ldrh	r1, [r7, #4]
 8001356:	88f8      	ldrh	r0, [r7, #6]
 8001358:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800135c:	9202      	str	r2, [sp, #8]
 800135e:	2210      	movs	r2, #16
 8001360:	9201      	str	r2, [sp, #4]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	462b      	mov	r3, r5
 8001366:	4622      	mov	r2, r4
 8001368:	f7ff fcae 	bl	8000cc8 <LCD_ShowChar>
						x += 8; //字符,为全字的一半
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	3308      	adds	r3, #8
 8001370:	80fb      	strh	r3, [r7, #6]
 8001372:	e018      	b.n	80013a6 <Show_Str+0xea>
					} else {
						LCD_ShowChar(x, y, fc, bc, *str, size, mode);
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	883d      	ldrh	r5, [r7, #0]
 800137a:	887c      	ldrh	r4, [r7, #2]
 800137c:	88b9      	ldrh	r1, [r7, #4]
 800137e:	88f8      	ldrh	r0, [r7, #6]
 8001380:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001384:	9202      	str	r2, [sp, #8]
 8001386:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800138a:	9201      	str	r2, [sp, #4]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	462b      	mov	r3, r5
 8001390:	4622      	mov	r2, r4
 8001392:	f7ff fc99 	bl	8000cc8 <LCD_ShowChar>
						x += size / 2; //字符,为全字的一半
 8001396:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800139a:	085b      	lsrs	r3, r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	b29a      	uxth	r2, r3
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	4413      	add	r3, r2
 80013a4:	80fb      	strh	r3, [r7, #6]
					}
				}
				str++;
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	3301      	adds	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
 80013ac:	e04a      	b.n	8001444 <Show_Str+0x188>

			}
		} else //中文
		{
			if (x > (lcddev.width - size) || y > (lcddev.height - size))
 80013ae:	88fa      	ldrh	r2, [r7, #6]
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <Show_Str+0x1a0>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013ba:	1acb      	subs	r3, r1, r3
 80013bc:	429a      	cmp	r2, r3
 80013be:	dc49      	bgt.n	8001454 <Show_Str+0x198>
 80013c0:	88ba      	ldrh	r2, [r7, #4]
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <Show_Str+0x1a0>)
 80013c4:	885b      	ldrh	r3, [r3, #2]
 80013c6:	4619      	mov	r1, r3
 80013c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013cc:	1acb      	subs	r3, r1, r3
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dc40      	bgt.n	8001454 <Show_Str+0x198>
				return;
			bHz = 0; //有汉字库
 80013d2:	2300      	movs	r3, #0
 80013d4:	73fb      	strb	r3, [r7, #15]
			if (size == 32)
 80013d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013da:	2b20      	cmp	r3, #32
 80013dc:	d10c      	bne.n	80013f8 <Show_Str+0x13c>
				GUI_DrawFont32(x, y, fc, bc, str, mode);
 80013de:	883c      	ldrh	r4, [r7, #0]
 80013e0:	887a      	ldrh	r2, [r7, #2]
 80013e2:	88b9      	ldrh	r1, [r7, #4]
 80013e4:	88f8      	ldrh	r0, [r7, #6]
 80013e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	4623      	mov	r3, r4
 80013f2:	f7ff fead 	bl	8001150 <GUI_DrawFont32>
 80013f6:	e01c      	b.n	8001432 <Show_Str+0x176>
			else if (size == 24)
 80013f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013fc:	2b18      	cmp	r3, #24
 80013fe:	d10c      	bne.n	800141a <Show_Str+0x15e>
				GUI_DrawFont24(x, y, fc, bc, str, mode);
 8001400:	883c      	ldrh	r4, [r7, #0]
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	88b9      	ldrh	r1, [r7, #4]
 8001406:	88f8      	ldrh	r0, [r7, #6]
 8001408:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	4623      	mov	r3, r4
 8001414:	f7ff fdea 	bl	8000fec <GUI_DrawFont24>
 8001418:	e00b      	b.n	8001432 <Show_Str+0x176>
			else
				GUI_DrawFont16(x, y, fc, bc, str, mode);
 800141a:	883c      	ldrh	r4, [r7, #0]
 800141c:	887a      	ldrh	r2, [r7, #2]
 800141e:	88b9      	ldrh	r1, [r7, #4]
 8001420:	88f8      	ldrh	r0, [r7, #6]
 8001422:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	4623      	mov	r3, r4
 800142e:	f7ff fd27 	bl	8000e80 <GUI_DrawFont16>

			str += 2;
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	3302      	adds	r3, #2
 8001436:	623b      	str	r3, [r7, #32]
			x += size; //下一个汉字偏移
 8001438:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800143c:	b29a      	uxth	r2, r3
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4413      	add	r3, r2
 8001442:	80fb      	strh	r3, [r7, #6]
	while (*str != 0)     //数据未结束
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f47f af4b 	bne.w	80012e4 <Show_Str+0x28>
 800144e:	e002      	b.n	8001456 <Show_Str+0x19a>
				return;
 8001450:	bf00      	nop
 8001452:	e000      	b.n	8001456 <Show_Str+0x19a>
				return;
 8001454:	bf00      	nop
		}
	}
}
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bdb0      	pop	{r4, r5, r7, pc}
 800145c:	200022a8 	.word	0x200022a8

08001460 <Gui_StrCenter>:
 str:the start address of the Chinese and English strings
 size:the size of Chinese and English strings
 mode:0-no overlying,1-overlying
 * @retvalue   :None
 ******************************************************************************/
void Gui_StrCenter(u16 x, u16 y, u16 fc, u16 bc, u8 *str, u8 size, u8 mode) {
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af04      	add	r7, sp, #16
 8001466:	4604      	mov	r4, r0
 8001468:	4608      	mov	r0, r1
 800146a:	4611      	mov	r1, r2
 800146c:	461a      	mov	r2, r3
 800146e:	4623      	mov	r3, r4
 8001470:	80fb      	strh	r3, [r7, #6]
 8001472:	4603      	mov	r3, r0
 8001474:	80bb      	strh	r3, [r7, #4]
 8001476:	460b      	mov	r3, r1
 8001478:	807b      	strh	r3, [r7, #2]
 800147a:	4613      	mov	r3, r2
 800147c:	803b      	strh	r3, [r7, #0]
	u16 len = strlen((const char*) str);
 800147e:	6a38      	ldr	r0, [r7, #32]
 8001480:	f7fe fed6 	bl	8000230 <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	81fb      	strh	r3, [r7, #14]
	u16 x1 = (lcddev.width - len * 8) / 2;
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <Gui_StrCenter+0x64>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	0fda      	lsrs	r2, r3, #31
 8001496:	4413      	add	r3, r2
 8001498:	105b      	asrs	r3, r3, #1
 800149a:	81bb      	strh	r3, [r7, #12]
	Show_Str(x1, y, fc, bc, str, size, mode);
 800149c:	883c      	ldrh	r4, [r7, #0]
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	88b9      	ldrh	r1, [r7, #4]
 80014a2:	89b8      	ldrh	r0, [r7, #12]
 80014a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	4623      	mov	r3, r4
 80014b6:	f7ff ff01 	bl	80012bc <Show_Str>
}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200022a8 	.word	0x200022a8

080014c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_ADC1_Init+0x74>)
 80014da:	4a19      	ldr	r2, [pc, #100]	; (8001540 <MX_ADC1_Init+0x78>)
 80014dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_ADC1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_ADC1_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_ADC1_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_ADC1_Init+0x74>)
 80014f2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_ADC1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_ADC1_Init+0x74>)
 8001500:	2201      	movs	r2, #1
 8001502:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_ADC1_Init+0x74>)
 8001506:	f002 fc39 	bl	8003d7c <HAL_ADC_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001510:	f002 f874 	bl	80035fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001514:	2303      	movs	r3, #3
 8001516:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001518:	2301      	movs	r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_ADC1_Init+0x74>)
 8001526:	f002 ffa9 	bl	800447c <HAL_ADC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001530:	f002 f864 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000127c 	.word	0x2000127c
 8001540:	40012400 	.word	0x40012400

08001544 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <MX_ADC2_Init+0x74>)
 8001556:	4a19      	ldr	r2, [pc, #100]	; (80015bc <MX_ADC2_Init+0x78>)
 8001558:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_ADC2_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MX_ADC2_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_ADC2_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_ADC2_Init+0x74>)
 800156e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001572:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_ADC2_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_ADC2_Init+0x74>)
 800157c:	2201      	movs	r2, #1
 800157e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <MX_ADC2_Init+0x74>)
 8001582:	f002 fbfb 	bl	8003d7c <HAL_ADC_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800158c:	f002 f836 	bl	80035fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001590:	2308      	movs	r3, #8
 8001592:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001594:	2301      	movs	r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_ADC2_Init+0x74>)
 80015a2:	f002 ff6b 	bl	800447c <HAL_ADC_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80015ac:	f002 f826 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000124c 	.word	0x2000124c
 80015bc:	40012800 	.word	0x40012800

080015c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0318 	add.w	r3, r7, #24
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a30      	ldr	r2, [pc, #192]	; (800169c <HAL_ADC_MspInit+0xdc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d12a      	bne.n	8001636 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <HAL_ADC_MspInit+0xe0>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a2e      	ldr	r2, [pc, #184]	; (80016a0 <HAL_ADC_MspInit+0xe0>)
 80015e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <HAL_ADC_MspInit+0xe0>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <HAL_ADC_MspInit+0xe0>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a28      	ldr	r2, [pc, #160]	; (80016a0 <HAL_ADC_MspInit+0xe0>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_ADC_MspInit+0xe0>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001610:	2308      	movs	r3, #8
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001614:	2303      	movs	r3, #3
 8001616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	4619      	mov	r1, r3
 800161e:	4821      	ldr	r0, [pc, #132]	; (80016a4 <HAL_ADC_MspInit+0xe4>)
 8001620:	f003 f9b4 	bl	800498c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2105      	movs	r1, #5
 8001628:	2012      	movs	r0, #18
 800162a:	f003 f984 	bl	8004936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800162e:	2012      	movs	r0, #18
 8001630:	f003 f99d 	bl	800496e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001634:	e02e      	b.n	8001694 <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_ADC_MspInit+0xe8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d129      	bne.n	8001694 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_ADC_MspInit+0xe0>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <HAL_ADC_MspInit+0xe0>)
 8001646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_ADC_MspInit+0xe0>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_ADC_MspInit+0xe0>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <HAL_ADC_MspInit+0xe0>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_ADC_MspInit+0xe0>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001670:	2301      	movs	r3, #1
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001674:	2303      	movs	r3, #3
 8001676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	f107 0318 	add.w	r3, r7, #24
 800167c:	4619      	mov	r1, r3
 800167e:	480b      	ldr	r0, [pc, #44]	; (80016ac <HAL_ADC_MspInit+0xec>)
 8001680:	f003 f984 	bl	800498c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2105      	movs	r1, #5
 8001688:	2012      	movs	r0, #18
 800168a:	f003 f954 	bl	8004936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800168e:	2012      	movs	r0, #18
 8001690:	f003 f96d 	bl	800496e <HAL_NVIC_EnableIRQ>
}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40012400 	.word	0x40012400
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40012800 	.word	0x40012800
 80016ac:	40010c00 	.word	0x40010c00

080016b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <vApplicationGetIdleTaskMemory+0x28>)
 80016c0:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	4a05      	ldr	r2, [pc, #20]	; (80016dc <vApplicationGetIdleTaskMemory+0x2c>)
 80016c6:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	20000234 	.word	0x20000234
 80016dc:	200002e8 	.word	0x200002e8

080016e0 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b096      	sub	sp, #88	; 0x58
 80016e4:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of gameTask */
	osThreadDef(gameTask, StartGameTask, osPriorityNormal, 0, 128);
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_FREERTOS_Init+0x7c>)
 80016e8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80016ec:	461d      	mov	r5, r3
 80016ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gameTaskHandle = osThreadCreate(osThread(gameTask), NULL);
 80016fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f004 ff4f 	bl	80065a4 <osThreadCreate>
 8001706:	4603      	mov	r3, r0
 8001708:	4a15      	ldr	r2, [pc, #84]	; (8001760 <MX_FREERTOS_Init+0x80>)
 800170a:	6013      	str	r3, [r2, #0]

	/* definition and creation of musicTask */
	osThreadDef(musicTask, StartMusicTask, osPriorityNormal, 0, 128);
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_FREERTOS_Init+0x84>)
 800170e:	f107 0420 	add.w	r4, r7, #32
 8001712:	461d      	mov	r5, r3
 8001714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001718:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800171c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	musicTaskHandle = osThreadCreate(osThread(musicTask), NULL);
 8001720:	f107 0320 	add.w	r3, r7, #32
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f004 ff3c 	bl	80065a4 <osThreadCreate>
 800172c:	4603      	mov	r3, r0
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <MX_FREERTOS_Init+0x88>)
 8001730:	6013      	str	r3, [r2, #0]

	/* definition and creation of updateTask */
	osThreadDef(updateTask, StartUpdateTask, osPriorityNormal, 0, 128);
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_FREERTOS_Init+0x8c>)
 8001734:	1d3c      	adds	r4, r7, #4
 8001736:	461d      	mov	r5, r3
 8001738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	updateTaskHandle = osThreadCreate(osThread(updateTask), NULL);
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f004 ff2b 	bl	80065a4 <osThreadCreate>
 800174e:	4603      	mov	r3, r0
 8001750:	4a07      	ldr	r2, [pc, #28]	; (8001770 <MX_FREERTOS_Init+0x90>)
 8001752:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8001754:	bf00      	nop
 8001756:	3758      	adds	r7, #88	; 0x58
 8001758:	46bd      	mov	sp, r7
 800175a:	bdb0      	pop	{r4, r5, r7, pc}
 800175c:	08008f00 	.word	0x08008f00
 8001760:	20002254 	.word	0x20002254
 8001764:	08008f1c 	.word	0x08008f1c
 8001768:	2000225c 	.word	0x2000225c
 800176c:	08008f38 	.word	0x08008f38
 8001770:	20002250 	.word	0x20002250

08001774 <write_byte>:

/* USER CODE BEGIN Header_StartGameTask */
void write_byte(unsigned char date) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	for (i = 0; i < 8; i++) {
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e01b      	b.n	80017bc <write_byte+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, (date >> (7 - i)) & 0x01);
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	f1c3 0307 	rsb	r3, r3, #7
 800178c:	fa42 f303 	asr.w	r3, r2, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	4811      	ldr	r0, [pc, #68]	; (80017e4 <write_byte+0x70>)
 800179e:	f003 faa0 	bl	8004ce2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2120      	movs	r1, #32
 80017a6:	480f      	ldr	r0, [pc, #60]	; (80017e4 <write_byte+0x70>)
 80017a8:	f003 fa9b 	bl	8004ce2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2120      	movs	r1, #32
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <write_byte+0x70>)
 80017b2:	f003 fa96 	bl	8004ce2 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	3301      	adds	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b07      	cmp	r3, #7
 80017c0:	d9e0      	bls.n	8001784 <write_byte+0x10>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c8:	4806      	ldr	r0, [pc, #24]	; (80017e4 <write_byte+0x70>)
 80017ca:	f003 fa8a 	bl	8004ce2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <write_byte+0x70>)
 80017d6:	f003 fa84 	bl	8004ce2 <HAL_GPIO_WritePin>
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40010800 	.word	0x40010800

080017e8 <updateDigitalNum>:

void updateDigitalNum(unsigned char num) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
	int num1 = num % 10;
 80017f2:	79fa      	ldrb	r2, [r7, #7]
 80017f4:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <updateDigitalNum+0x110>)
 80017f6:	fba3 1302 	umull	r1, r3, r3, r2
 80017fa:	08d9      	lsrs	r1, r3, #3
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	613b      	str	r3, [r7, #16]
	int num2 = (num / 10) % 10;
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4a3a      	ldr	r2, [pc, #232]	; (80018f8 <updateDigitalNum+0x110>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	08db      	lsrs	r3, r3, #3
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <updateDigitalNum+0x110>)
 8001818:	fba3 1302 	umull	r1, r3, r3, r2
 800181c:	08d9      	lsrs	r1, r3, #3
 800181e:	460b      	mov	r3, r1
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	60fb      	str	r3, [r7, #12]
	s[0] = num2;
 800182c:	4a33      	ldr	r2, [pc, #204]	; (80018fc <updateDigitalNum+0x114>)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6013      	str	r3, [r2, #0]
	s[1] = num1;
 8001832:	4a32      	ldr	r2, [pc, #200]	; (80018fc <updateDigitalNum+0x114>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	6053      	str	r3, [r2, #4]
	for (char i = 0; i < 6; i++) {
 8001838:	2300      	movs	r3, #0
 800183a:	75fb      	strb	r3, [r7, #23]
 800183c:	e024      	b.n	8001888 <updateDigitalNum+0xa0>
		write_byte(score_str[i]);
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <updateDigitalNum+0x118>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff95 	bl	8001774 <write_byte>
		HAL_GPIO_WritePin(GPIOF, 0x01 << (15 - i), 0);
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	f1c3 030f 	rsb	r3, r3, #15
 8001850:	2201      	movs	r2, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	b29b      	uxth	r3, r3
 8001858:	2200      	movs	r2, #0
 800185a:	4619      	mov	r1, r3
 800185c:	4829      	ldr	r0, [pc, #164]	; (8001904 <updateDigitalNum+0x11c>)
 800185e:	f003 fa40 	bl	8004ce2 <HAL_GPIO_WritePin>
		delay_us(410);
 8001862:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001866:	f001 fb57 	bl	8002f18 <delay_us>
		HAL_GPIO_WritePin(GPIOF, 0x01 << (15 - i), 1);
 800186a:	7dfb      	ldrb	r3, [r7, #23]
 800186c:	f1c3 030f 	rsb	r3, r3, #15
 8001870:	2201      	movs	r2, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	b29b      	uxth	r3, r3
 8001878:	2201      	movs	r2, #1
 800187a:	4619      	mov	r1, r3
 800187c:	4821      	ldr	r0, [pc, #132]	; (8001904 <updateDigitalNum+0x11c>)
 800187e:	f003 fa30 	bl	8004ce2 <HAL_GPIO_WritePin>
	for (char i = 0; i < 6; i++) {
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	3301      	adds	r3, #1
 8001886:	75fb      	strb	r3, [r7, #23]
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d9d7      	bls.n	800183e <updateDigitalNum+0x56>
	}
	for (char i = 6; i < 8; i++) {
 800188e:	2306      	movs	r3, #6
 8001890:	75bb      	strb	r3, [r7, #22]
 8001892:	e028      	b.n	80018e6 <updateDigitalNum+0xfe>
		write_byte(table[s[i - 6]]);
 8001894:	7dbb      	ldrb	r3, [r7, #22]
 8001896:	3b06      	subs	r3, #6
 8001898:	4a18      	ldr	r2, [pc, #96]	; (80018fc <updateDigitalNum+0x114>)
 800189a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189e:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <updateDigitalNum+0x120>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff66 	bl	8001774 <write_byte>
		HAL_GPIO_WritePin(GPIOF, 0x01 << (15 - i), 0);
 80018a8:	7dbb      	ldrb	r3, [r7, #22]
 80018aa:	f1c3 030f 	rsb	r3, r3, #15
 80018ae:	2201      	movs	r2, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	2200      	movs	r2, #0
 80018b8:	4619      	mov	r1, r3
 80018ba:	4812      	ldr	r0, [pc, #72]	; (8001904 <updateDigitalNum+0x11c>)
 80018bc:	f003 fa11 	bl	8004ce2 <HAL_GPIO_WritePin>
		delay_us(410);
 80018c0:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80018c4:	f001 fb28 	bl	8002f18 <delay_us>
		HAL_GPIO_WritePin(GPIOF, 0x01 << (15 - i), 1);
 80018c8:	7dbb      	ldrb	r3, [r7, #22]
 80018ca:	f1c3 030f 	rsb	r3, r3, #15
 80018ce:	2201      	movs	r2, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2201      	movs	r2, #1
 80018d8:	4619      	mov	r1, r3
 80018da:	480a      	ldr	r0, [pc, #40]	; (8001904 <updateDigitalNum+0x11c>)
 80018dc:	f003 fa01 	bl	8004ce2 <HAL_GPIO_WritePin>
	for (char i = 6; i < 8; i++) {
 80018e0:	7dbb      	ldrb	r3, [r7, #22]
 80018e2:	3301      	adds	r3, #1
 80018e4:	75bb      	strb	r3, [r7, #22]
 80018e6:	7dbb      	ldrb	r3, [r7, #22]
 80018e8:	2b07      	cmp	r3, #7
 80018ea:	d9d3      	bls.n	8001894 <updateDigitalNum+0xac>
	}
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	cccccccd 	.word	0xcccccccd
 80018fc:	200000b4 	.word	0x200000b4
 8001900:	20000014 	.word	0x20000014
 8001904:	40011c00 	.word	0x40011c00
 8001908:	20000000 	.word	0x20000000
 800190c:	00000000 	.word	0x00000000

08001910 <key_scan>:

//KB1-KB4: 1-4
//Ka1-Ka5: 5-9
int key_scan() {
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
	u32 val = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
	float y = 0;
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
	char key_result = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	75fb      	strb	r3, [r7, #23]
	int time = 12000;
 8001924:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001928:	60bb      	str	r3, [r7, #8]

	if (HAL_GPIO_ReadPin(KB1_GPIO_Port, KB1_Pin) == 0) {
 800192a:	2101      	movs	r1, #1
 800192c:	485a      	ldr	r0, [pc, #360]	; (8001a98 <key_scan+0x188>)
 800192e:	f003 f9c1 	bl	8004cb4 <HAL_GPIO_ReadPin>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10c      	bne.n	8001952 <key_scan+0x42>
		delay_us(time);
 8001938:	68b8      	ldr	r0, [r7, #8]
 800193a:	f001 faed 	bl	8002f18 <delay_us>
		if (HAL_GPIO_ReadPin(KB1_GPIO_Port, KB1_Pin) == 0) {
 800193e:	2101      	movs	r1, #1
 8001940:	4855      	ldr	r0, [pc, #340]	; (8001a98 <key_scan+0x188>)
 8001942:	f003 f9b7 	bl	8004cb4 <HAL_GPIO_ReadPin>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d13d      	bne.n	80019c8 <key_scan+0xb8>
			key_result = 1;
 800194c:	2301      	movs	r3, #1
 800194e:	75fb      	strb	r3, [r7, #23]
 8001950:	e03a      	b.n	80019c8 <key_scan+0xb8>
		}
	} else if (HAL_GPIO_ReadPin(KB2_GPIO_Port, KB2_Pin) == 0) {
 8001952:	2102      	movs	r1, #2
 8001954:	4850      	ldr	r0, [pc, #320]	; (8001a98 <key_scan+0x188>)
 8001956:	f003 f9ad 	bl	8004cb4 <HAL_GPIO_ReadPin>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10c      	bne.n	800197a <key_scan+0x6a>
		delay_us(time);
 8001960:	68b8      	ldr	r0, [r7, #8]
 8001962:	f001 fad9 	bl	8002f18 <delay_us>
		if (HAL_GPIO_ReadPin(KB2_GPIO_Port, KB2_Pin) == 0) {
 8001966:	2102      	movs	r1, #2
 8001968:	484b      	ldr	r0, [pc, #300]	; (8001a98 <key_scan+0x188>)
 800196a:	f003 f9a3 	bl	8004cb4 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d129      	bne.n	80019c8 <key_scan+0xb8>
			key_result = 2;
 8001974:	2302      	movs	r3, #2
 8001976:	75fb      	strb	r3, [r7, #23]
 8001978:	e026      	b.n	80019c8 <key_scan+0xb8>
		}
	} else if (HAL_GPIO_ReadPin(KB3_GPIO_Port, KB3_Pin) == 0) {
 800197a:	2140      	movs	r1, #64	; 0x40
 800197c:	4847      	ldr	r0, [pc, #284]	; (8001a9c <key_scan+0x18c>)
 800197e:	f003 f999 	bl	8004cb4 <HAL_GPIO_ReadPin>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10c      	bne.n	80019a2 <key_scan+0x92>
		delay_us(time);
 8001988:	68b8      	ldr	r0, [r7, #8]
 800198a:	f001 fac5 	bl	8002f18 <delay_us>
		if (HAL_GPIO_ReadPin(KB3_GPIO_Port, KB3_Pin) == 0) {
 800198e:	2140      	movs	r1, #64	; 0x40
 8001990:	4842      	ldr	r0, [pc, #264]	; (8001a9c <key_scan+0x18c>)
 8001992:	f003 f98f 	bl	8004cb4 <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d115      	bne.n	80019c8 <key_scan+0xb8>
			key_result = 3;
 800199c:	2303      	movs	r3, #3
 800199e:	75fb      	strb	r3, [r7, #23]
 80019a0:	e012      	b.n	80019c8 <key_scan+0xb8>
		}
	} else if (HAL_GPIO_ReadPin(KB4_GPIO_Port, KB4_Pin) == 0) {
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	483d      	ldr	r0, [pc, #244]	; (8001a9c <key_scan+0x18c>)
 80019a6:	f003 f985 	bl	8004cb4 <HAL_GPIO_ReadPin>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10b      	bne.n	80019c8 <key_scan+0xb8>
		delay_us(time);
 80019b0:	68b8      	ldr	r0, [r7, #8]
 80019b2:	f001 fab1 	bl	8002f18 <delay_us>
		if (HAL_GPIO_ReadPin(KB4_GPIO_Port, KB4_Pin) == 0) {
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	4838      	ldr	r0, [pc, #224]	; (8001a9c <key_scan+0x18c>)
 80019ba:	f003 f97b 	bl	8004cb4 <HAL_GPIO_ReadPin>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <key_scan+0xb8>
			key_result = 4;
 80019c4:	2304      	movs	r3, #4
 80019c6:	75fb      	strb	r3, [r7, #23]
		}
	}
	HAL_ADC_Start(&hadc2);
 80019c8:	4835      	ldr	r0, [pc, #212]	; (8001aa0 <key_scan+0x190>)
 80019ca:	f002 fac1 	bl	8003f50 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 80019ce:	2164      	movs	r1, #100	; 0x64
 80019d0:	4833      	ldr	r0, [pc, #204]	; (8001aa0 <key_scan+0x190>)
 80019d2:	f002 fb6b 	bl	80040ac <HAL_ADC_PollForConversion>
	if (HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc2), HAL_ADC_STATE_REG_EOC)) {
 80019d6:	4832      	ldr	r0, [pc, #200]	; (8001aa0 <key_scan+0x190>)
 80019d8:	f002 fe48 	bl	800466c <HAL_ADC_GetState>
 80019dc:	4603      	mov	r3, r0
 80019de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d04e      	beq.n	8001a84 <key_scan+0x174>
		val = HAL_ADC_GetValue(&hadc2);
 80019e6:	482e      	ldr	r0, [pc, #184]	; (8001aa0 <key_scan+0x190>)
 80019e8:	f002 fc66 	bl	80042b8 <HAL_ADC_GetValue>
 80019ec:	6138      	str	r0, [r7, #16]
		y = val * 3.3 / 4096;
 80019ee:	6938      	ldr	r0, [r7, #16]
 80019f0:	f7fe fe1c 	bl	800062c <__aeabi_ui2d>
 80019f4:	a326      	add	r3, pc, #152	; (adr r3, 8001a90 <key_scan+0x180>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fe91 	bl	8000720 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <key_scan+0x194>)
 8001a0c:	f7fe ffb2 	bl	8000974 <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f894 	bl	8000b44 <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60fb      	str	r3, [r7, #12]
		int ka = ((int) (y * 10));
 8001a20:	4921      	ldr	r1, [pc, #132]	; (8001aa8 <key_scan+0x198>)
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7fe fc0c 	bl	8000240 <__aeabi_fmul>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f8da 	bl	8000be4 <__aeabi_f2iz>
 8001a30:	4603      	mov	r3, r0
 8001a32:	607b      	str	r3, [r7, #4]
		if (ka == 4 || ka == 5) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d002      	beq.n	8001a40 <key_scan+0x130>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d102      	bne.n	8001a46 <key_scan+0x136>
			key_result = 5;
 8001a40:	2305      	movs	r3, #5
 8001a42:	75fb      	strb	r3, [r7, #23]
 8001a44:	e01c      	b.n	8001a80 <key_scan+0x170>
		} else if (ka == 8 || ka == 9) {
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d002      	beq.n	8001a52 <key_scan+0x142>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b09      	cmp	r3, #9
 8001a50:	d102      	bne.n	8001a58 <key_scan+0x148>
			key_result = 6;
 8001a52:	2306      	movs	r3, #6
 8001a54:	75fb      	strb	r3, [r7, #23]
 8001a56:	e013      	b.n	8001a80 <key_scan+0x170>
		} else if (ka == 11 || ka == 12) {
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b0b      	cmp	r3, #11
 8001a5c:	d002      	beq.n	8001a64 <key_scan+0x154>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d102      	bne.n	8001a6a <key_scan+0x15a>
			key_result = 7;
 8001a64:	2307      	movs	r3, #7
 8001a66:	75fb      	strb	r3, [r7, #23]
 8001a68:	e00a      	b.n	8001a80 <key_scan+0x170>
		} else if (ka == 14) {
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0e      	cmp	r3, #14
 8001a6e:	d102      	bne.n	8001a76 <key_scan+0x166>
			key_result = 8;
 8001a70:	2308      	movs	r3, #8
 8001a72:	75fb      	strb	r3, [r7, #23]
 8001a74:	e004      	b.n	8001a80 <key_scan+0x170>
		} else if (ka == 16) {
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b10      	cmp	r3, #16
 8001a7a:	d101      	bne.n	8001a80 <key_scan+0x170>
			key_result = 9;
 8001a7c:	2309      	movs	r3, #9
 8001a7e:	75fb      	strb	r3, [r7, #23]
		}
		return key_result;
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	e7ff      	b.n	8001a84 <key_scan+0x174>
	}
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	f3af 8000 	nop.w
 8001a90:	66666666 	.word	0x66666666
 8001a94:	400a6666 	.word	0x400a6666
 8001a98:	40011800 	.word	0x40011800
 8001a9c:	40011400 	.word	0x40011400
 8001aa0:	2000124c 	.word	0x2000124c
 8001aa4:	40b00000 	.word	0x40b00000
 8001aa8:	41200000 	.word	0x41200000

08001aac <drawSquare>:

void drawSquare(u16 x1, u16 y1, u16 width, u16 color) {
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	4608      	mov	r0, r1
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4623      	mov	r3, r4
 8001abc:	80fb      	strh	r3, [r7, #6]
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80bb      	strh	r3, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	807b      	strh	r3, [r7, #2]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	803b      	strh	r3, [r7, #0]
	LCD_Fill(x1, y1, x1 + width, y1 + width, color);
 8001aca:	88fa      	ldrh	r2, [r7, #6]
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b29c      	uxth	r4, r3
 8001ad2:	88ba      	ldrh	r2, [r7, #4]
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	88b9      	ldrh	r1, [r7, #4]
 8001adc:	88f8      	ldrh	r0, [r7, #6]
 8001ade:	883b      	ldrh	r3, [r7, #0]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	4622      	mov	r2, r4
 8001ae6:	f7ff f8a3 	bl	8000c30 <LCD_Fill>
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd90      	pop	{r4, r7, pc}

08001af2 <drawSquareInBoard>:

void drawSquareInBoard(u16 x, u16 y, u16 width, u16 color) {
 8001af2:	b590      	push	{r4, r7, lr}
 8001af4:	b087      	sub	sp, #28
 8001af6:	af02      	add	r7, sp, #8
 8001af8:	4604      	mov	r4, r0
 8001afa:	4608      	mov	r0, r1
 8001afc:	4611      	mov	r1, r2
 8001afe:	461a      	mov	r2, r3
 8001b00:	4623      	mov	r3, r4
 8001b02:	80fb      	strh	r3, [r7, #6]
 8001b04:	4603      	mov	r3, r0
 8001b06:	80bb      	strh	r3, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	803b      	strh	r3, [r7, #0]
	u16 x_start = 70 + x * width;
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3346      	adds	r3, #70	; 0x46
 8001b1c:	81fb      	strh	r3, [r7, #14]
	u16 y_start = 10 + y * width;
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	887a      	ldrh	r2, [r7, #2]
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	330a      	adds	r3, #10
 8001b2a:	81bb      	strh	r3, [r7, #12]
	LCD_Fill(y_start, x_start, y_start + width, x_start + width, color);
 8001b2c:	89ba      	ldrh	r2, [r7, #12]
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	4413      	add	r3, r2
 8001b32:	b29c      	uxth	r4, r3
 8001b34:	89fa      	ldrh	r2, [r7, #14]
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	4413      	add	r3, r2
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	89f9      	ldrh	r1, [r7, #14]
 8001b3e:	89b8      	ldrh	r0, [r7, #12]
 8001b40:	883b      	ldrh	r3, [r7, #0]
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	4622      	mov	r2, r4
 8001b48:	f7ff f872 	bl	8000c30 <LCD_Fill>
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd90      	pop	{r4, r7, pc}

08001b54 <setGameBoard>:

void setGameBoard(u8 x, u8 y, u8 state) {
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	71bb      	strb	r3, [r7, #6]
 8001b62:	4613      	mov	r3, r2
 8001b64:	717b      	strb	r3, [r7, #5]
	game_board[x][y] = state;
 8001b66:	79fa      	ldrb	r2, [r7, #7]
 8001b68:	79b9      	ldrb	r1, [r7, #6]
 8001b6a:	4806      	ldr	r0, [pc, #24]	; (8001b84 <setGameBoard+0x30>)
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	4403      	add	r3, r0
 8001b74:	440b      	add	r3, r1
 8001b76:	797a      	ldrb	r2, [r7, #5]
 8001b78:	701a      	strb	r2, [r3, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	200000c4 	.word	0x200000c4

08001b88 <getGameBoard>:

u8 getGameBoard(u8 x, u8 y) {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460a      	mov	r2, r1
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71bb      	strb	r3, [r7, #6]
	return game_board[x][y];
 8001b98:	79fa      	ldrb	r2, [r7, #7]
 8001b9a:	79b9      	ldrb	r1, [r7, #6]
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <getGameBoard+0x2c>)
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	4403      	add	r3, r0
 8001ba6:	440b      	add	r3, r1
 8001ba8:	781b      	ldrb	r3, [r3, #0]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	200000c4 	.word	0x200000c4

08001bb8 <generateFood>:

void generateFood() {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
	u8 x = rand() % 23;
 8001bbe:	f006 f899 	bl	8007cf4 <rand>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <generateFood+0xc8>)
 8001bc6:	fb83 1302 	smull	r1, r3, r3, r2
 8001bca:	4413      	add	r3, r2
 8001bcc:	1119      	asrs	r1, r3, #4
 8001bce:	17d3      	asrs	r3, r2, #31
 8001bd0:	1ac9      	subs	r1, r1, r3
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	440b      	add	r3, r1
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	1a5b      	subs	r3, r3, r1
 8001bdc:	1ad1      	subs	r1, r2, r3
 8001bde:	460b      	mov	r3, r1
 8001be0:	71fb      	strb	r3, [r7, #7]
	u8 y = rand() % 14;
 8001be2:	f006 f887 	bl	8007cf4 <rand>
 8001be6:	4602      	mov	r2, r0
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <generateFood+0xcc>)
 8001bea:	fb83 1302 	smull	r1, r3, r3, r2
 8001bee:	4413      	add	r3, r2
 8001bf0:	10d9      	asrs	r1, r3, #3
 8001bf2:	17d3      	asrs	r3, r2, #31
 8001bf4:	1ac9      	subs	r1, r1, r3
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	1a5b      	subs	r3, r3, r1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	1ad1      	subs	r1, r2, r3
 8001c00:	460b      	mov	r3, r1
 8001c02:	71bb      	strb	r3, [r7, #6]
	while (game_board[x][y] == SNAKE) {
 8001c04:	e022      	b.n	8001c4c <generateFood+0x94>
		x = rand() % 23;
 8001c06:	f006 f875 	bl	8007cf4 <rand>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <generateFood+0xc8>)
 8001c0e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c12:	4413      	add	r3, r2
 8001c14:	1119      	asrs	r1, r3, #4
 8001c16:	17d3      	asrs	r3, r2, #31
 8001c18:	1ac9      	subs	r1, r1, r3
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	440b      	add	r3, r1
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	1a5b      	subs	r3, r3, r1
 8001c24:	1ad1      	subs	r1, r2, r3
 8001c26:	460b      	mov	r3, r1
 8001c28:	71fb      	strb	r3, [r7, #7]
		y = rand() % 14;
 8001c2a:	f006 f863 	bl	8007cf4 <rand>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <generateFood+0xcc>)
 8001c32:	fb83 1302 	smull	r1, r3, r3, r2
 8001c36:	4413      	add	r3, r2
 8001c38:	10d9      	asrs	r1, r3, #3
 8001c3a:	17d3      	asrs	r3, r2, #31
 8001c3c:	1ac9      	subs	r1, r1, r3
 8001c3e:	460b      	mov	r3, r1
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	1a5b      	subs	r3, r3, r1
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	1ad1      	subs	r1, r2, r3
 8001c48:	460b      	mov	r3, r1
 8001c4a:	71bb      	strb	r3, [r7, #6]
	while (game_board[x][y] == SNAKE) {
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	79b9      	ldrb	r1, [r7, #6]
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <generateFood+0xd0>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	4403      	add	r3, r0
 8001c5a:	440b      	add	r3, r1
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d0d1      	beq.n	8001c06 <generateFood+0x4e>
	}
	game_board[x][y] = FOOD;
 8001c62:	79fa      	ldrb	r2, [r7, #7]
 8001c64:	79b9      	ldrb	r1, [r7, #6]
 8001c66:	4808      	ldr	r0, [pc, #32]	; (8001c88 <generateFood+0xd0>)
 8001c68:	4613      	mov	r3, r2
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	4403      	add	r3, r0
 8001c70:	440b      	add	r3, r1
 8001c72:	2202      	movs	r2, #2
 8001c74:	701a      	strb	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	b21642c9 	.word	0xb21642c9
 8001c84:	92492493 	.word	0x92492493
 8001c88:	200000c4 	.word	0x200000c4

08001c8c <LED_Flow>:
void LED_Flow(u8 speed) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; i++) {
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	e02a      	b.n	8001cf2 <LED_Flow+0x66>
		GPIOF->ODR &= 0xFFFFFF00;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <LED_Flow+0x78>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4a18      	ldr	r2, [pc, #96]	; (8001d04 <LED_Flow+0x78>)
 8001ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ca6:	60d3      	str	r3, [r2, #12]
		GPIOF->ODR |= 1 << i;
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <LED_Flow+0x78>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2101      	movs	r1, #1
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <LED_Flow+0x78>)
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	60d3      	str	r3, [r2, #12]
		if (i == 7)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b07      	cmp	r3, #7
 8001cc0:	d10a      	bne.n	8001cd8 <LED_Flow+0x4c>
			delay_us((101 - speed) * 600);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 8001cc8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 f921 	bl	8002f18 <delay_us>
 8001cd6:	e009      	b.n	8001cec <LED_Flow+0x60>
		else
			delay_us((101 - speed) * 1000);
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 8001cde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f001 f916 	bl	8002f18 <delay_us>
	for (int i = 0; i < 8; i++) {
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b07      	cmp	r3, #7
 8001cf6:	ddd1      	ble.n	8001c9c <LED_Flow+0x10>
	}
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40011c00 	.word	0x40011c00

08001d08 <updateSnakePos>:

void updateSnakePos() {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
	char next_x = snake[X_POS][head_index], next_y = snake[Y_POS][head_index];
 8001d0e:	4b77      	ldr	r3, [pc, #476]	; (8001eec <updateSnakePos+0x1e4>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b76      	ldr	r3, [pc, #472]	; (8001ef0 <updateSnakePos+0x1e8>)
 8001d16:	5c9b      	ldrb	r3, [r3, r2]
 8001d18:	71fb      	strb	r3, [r7, #7]
 8001d1a:	4b74      	ldr	r3, [pc, #464]	; (8001eec <updateSnakePos+0x1e4>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b73      	ldr	r3, [pc, #460]	; (8001ef0 <updateSnakePos+0x1e8>)
 8001d22:	4413      	add	r3, r2
 8001d24:	f893 37d0 	ldrb.w	r3, [r3, #2000]	; 0x7d0
 8001d28:	71bb      	strb	r3, [r7, #6]
	head_index++;
 8001d2a:	4b70      	ldr	r3, [pc, #448]	; (8001eec <updateSnakePos+0x1e4>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b6e      	ldr	r3, [pc, #440]	; (8001eec <updateSnakePos+0x1e4>)
 8001d34:	701a      	strb	r2, [r3, #0]
	if (head_index > 1999) {
		head_index = 0;
	}
	if (key_state == 1 && direction != RIGHT)
 8001d36:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <updateSnakePos+0x1ec>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d107      	bne.n	8001d4e <updateSnakePos+0x46>
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <updateSnakePos+0x46>
		direction = LEFT;
 8001d46:	4b6c      	ldr	r3, [pc, #432]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e022      	b.n	8001d94 <updateSnakePos+0x8c>
	else if (key_state == 2 && direction != DOWN)
 8001d4e:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <updateSnakePos+0x1ec>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d107      	bne.n	8001d66 <updateSnakePos+0x5e>
 8001d56:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d003      	beq.n	8001d66 <updateSnakePos+0x5e>
		direction = UP;
 8001d5e:	4b66      	ldr	r3, [pc, #408]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001d60:	2202      	movs	r2, #2
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	e016      	b.n	8001d94 <updateSnakePos+0x8c>
	else if (key_state == 3 && direction != UP)
 8001d66:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <updateSnakePos+0x1ec>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d107      	bne.n	8001d7e <updateSnakePos+0x76>
 8001d6e:	4b62      	ldr	r3, [pc, #392]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d003      	beq.n	8001d7e <updateSnakePos+0x76>
		direction = DOWN;
 8001d76:	4b60      	ldr	r3, [pc, #384]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001d78:	2203      	movs	r2, #3
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	e00a      	b.n	8001d94 <updateSnakePos+0x8c>
	else if (key_state == 4 && direction != LEFT)
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <updateSnakePos+0x1ec>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d106      	bne.n	8001d94 <updateSnakePos+0x8c>
 8001d86:	4b5c      	ldr	r3, [pc, #368]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d002      	beq.n	8001d94 <updateSnakePos+0x8c>
		direction = RIGHT;
 8001d8e:	4b5a      	ldr	r3, [pc, #360]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
	// handler direction choose
	if (direction == RIGHT) {
 8001d94:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d103      	bne.n	8001da4 <updateSnakePos+0x9c>
		next_y++;
 8001d9c:	79bb      	ldrb	r3, [r7, #6]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	e016      	b.n	8001dd2 <updateSnakePos+0xca>
	} else if (direction == LEFT) {
 8001da4:	4b54      	ldr	r3, [pc, #336]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d103      	bne.n	8001db4 <updateSnakePos+0xac>
		next_y--;
 8001dac:	79bb      	ldrb	r3, [r7, #6]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	71bb      	strb	r3, [r7, #6]
 8001db2:	e00e      	b.n	8001dd2 <updateSnakePos+0xca>
	} else if (direction == UP) {
 8001db4:	4b50      	ldr	r3, [pc, #320]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d103      	bne.n	8001dc4 <updateSnakePos+0xbc>
		next_x--;
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	71fb      	strb	r3, [r7, #7]
 8001dc2:	e006      	b.n	8001dd2 <updateSnakePos+0xca>
	} else if (direction == DOWN) {
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d102      	bne.n	8001dd2 <updateSnakePos+0xca>
		next_x++;
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	71fb      	strb	r3, [r7, #7]
	}
	// check edge
	if (next_y == 14 || next_y == 255 || next_x == 23 || next_x == 255) {
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	2b0e      	cmp	r3, #14
 8001dd6:	d008      	beq.n	8001dea <updateSnakePos+0xe2>
 8001dd8:	79bb      	ldrb	r3, [r7, #6]
 8001dda:	2bff      	cmp	r3, #255	; 0xff
 8001ddc:	d005      	beq.n	8001dea <updateSnakePos+0xe2>
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	2b17      	cmp	r3, #23
 8001de2:	d002      	beq.n	8001dea <updateSnakePos+0xe2>
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2bff      	cmp	r3, #255	; 0xff
 8001de8:	d106      	bne.n	8001df8 <updateSnakePos+0xf0>
		game_state = GAME_FAIL;
 8001dea:	4b44      	ldr	r3, [pc, #272]	; (8001efc <updateSnakePos+0x1f4>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	701a      	strb	r2, [r3, #0]
		game_over_show = 1;
 8001df0:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <updateSnakePos+0x1f8>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
		return;
 8001df6:	e075      	b.n	8001ee4 <updateSnakePos+0x1dc>
	}
	// get food
	if (getGameBoard(next_x, next_y) == FOOD) {
 8001df8:	79ba      	ldrb	r2, [r7, #6]
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fec2 	bl	8001b88 <getGameBoard>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d142      	bne.n	8001e90 <updateSnakePos+0x188>
		music_state = 1;
 8001e0a:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <updateSnakePos+0x1fc>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
		snake[Y_POS][head_index] = next_y;
 8001e10:	4b36      	ldr	r3, [pc, #216]	; (8001eec <updateSnakePos+0x1e4>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <updateSnakePos+0x1e8>)
 8001e18:	4413      	add	r3, r2
 8001e1a:	79ba      	ldrb	r2, [r7, #6]
 8001e1c:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
		snake[X_POS][head_index] = next_x;
 8001e20:	4b32      	ldr	r3, [pc, #200]	; (8001eec <updateSnakePos+0x1e4>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	4a32      	ldr	r2, [pc, #200]	; (8001ef0 <updateSnakePos+0x1e8>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	5453      	strb	r3, [r2, r1]
		setGameBoard(next_x, next_y, SNAKE);
 8001e2c:	79b9      	ldrb	r1, [r7, #6]
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2201      	movs	r2, #1
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fe8e 	bl	8001b54 <setGameBoard>
		head_index++;
 8001e38:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <updateSnakePos+0x1e4>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <updateSnakePos+0x1e4>)
 8001e42:	701a      	strb	r2, [r3, #0]
		if (head_index > 1999) {
			head_index = 0;
		}
		if (direction == RIGHT) {
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d103      	bne.n	8001e54 <updateSnakePos+0x14c>
			next_y++;
 8001e4c:	79bb      	ldrb	r3, [r7, #6]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	71bb      	strb	r3, [r7, #6]
 8001e52:	e016      	b.n	8001e82 <updateSnakePos+0x17a>
		} else if (direction == LEFT) {
 8001e54:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d103      	bne.n	8001e64 <updateSnakePos+0x15c>
			next_y--;
 8001e5c:	79bb      	ldrb	r3, [r7, #6]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	71bb      	strb	r3, [r7, #6]
 8001e62:	e00e      	b.n	8001e82 <updateSnakePos+0x17a>
		} else if (direction == UP) {
 8001e64:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d103      	bne.n	8001e74 <updateSnakePos+0x16c>
			next_x--;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	71fb      	strb	r3, [r7, #7]
 8001e72:	e006      	b.n	8001e82 <updateSnakePos+0x17a>
		} else if (direction == DOWN) {
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <updateSnakePos+0x1f0>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d102      	bne.n	8001e82 <updateSnakePos+0x17a>
			next_x++;
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	71fb      	strb	r3, [r7, #7]
		}
		generateFood();
 8001e82:	f7ff fe99 	bl	8001bb8 <generateFood>
		game_score++;
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <updateSnakePos+0x200>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <updateSnakePos+0x200>)
 8001e8e:	6013      	str	r3, [r2, #0]
	}
	snake[Y_POS][head_index] = next_y;
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <updateSnakePos+0x1e4>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <updateSnakePos+0x1e8>)
 8001e98:	4413      	add	r3, r2
 8001e9a:	79ba      	ldrb	r2, [r7, #6]
 8001e9c:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
	snake[X_POS][head_index] = next_x;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <updateSnakePos+0x1e4>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <updateSnakePos+0x1e8>)
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	5453      	strb	r3, [r2, r1]
	setGameBoard(next_x, next_y, SNAKE);
 8001eac:	79b9      	ldrb	r1, [r7, #6]
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fe4e 	bl	8001b54 <setGameBoard>
	setGameBoard(snake[X_POS][tail_index], snake[Y_POS][tail_index], EMPTY);
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <updateSnakePos+0x204>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <updateSnakePos+0x1e8>)
 8001ec0:	5c98      	ldrb	r0, [r3, r2]
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <updateSnakePos+0x204>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <updateSnakePos+0x1e8>)
 8001eca:	4413      	add	r3, r2
 8001ecc:	f893 37d0 	ldrb.w	r3, [r3, #2000]	; 0x7d0
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7ff fe3e 	bl	8001b54 <setGameBoard>
	tail_index++;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <updateSnakePos+0x204>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <updateSnakePos+0x204>)
 8001ee2:	701a      	strb	r2, [r3, #0]
	if (tail_index > 1999) {
		tail_index = 0;
	}
}
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000224c 	.word	0x2000224c
 8001ef0:	200012ac 	.word	0x200012ac
 8001ef4:	200000c2 	.word	0x200000c2
 8001ef8:	20000230 	.word	0x20000230
 8001efc:	20000231 	.word	0x20000231
 8001f00:	20000233 	.word	0x20000233
 8001f04:	200000c0 	.word	0x200000c0
 8001f08:	200000bc 	.word	0x200000bc
 8001f0c:	2000224d 	.word	0x2000224d

08001f10 <showGameBoard>:

void showGameBoard() {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
	for (u8 i = 0; i < 23; i++) {
 8001f16:	2300      	movs	r3, #0
 8001f18:	71fb      	strb	r3, [r7, #7]
 8001f1a:	e03e      	b.n	8001f9a <showGameBoard+0x8a>
		for (u8 j = 0; j < 14; j++) {
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	71bb      	strb	r3, [r7, #6]
 8001f20:	e035      	b.n	8001f8e <showGameBoard+0x7e>
			if (game_board[i][j] == SNAKE)
 8001f22:	79fa      	ldrb	r2, [r7, #7]
 8001f24:	79b9      	ldrb	r1, [r7, #6]
 8001f26:	4821      	ldr	r0, [pc, #132]	; (8001fac <showGameBoard+0x9c>)
 8001f28:	4613      	mov	r3, r2
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	4403      	add	r3, r0
 8001f30:	440b      	add	r3, r1
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d109      	bne.n	8001f4c <showGameBoard+0x3c>
				drawSquareInBoard(i, j, 10, RED);
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	b298      	uxth	r0, r3
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	b299      	uxth	r1, r3
 8001f40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f44:	220a      	movs	r2, #10
 8001f46:	f7ff fdd4 	bl	8001af2 <drawSquareInBoard>
 8001f4a:	e01d      	b.n	8001f88 <showGameBoard+0x78>
			else if (game_board[i][j] == FOOD)
 8001f4c:	79fa      	ldrb	r2, [r7, #7]
 8001f4e:	79b9      	ldrb	r1, [r7, #6]
 8001f50:	4816      	ldr	r0, [pc, #88]	; (8001fac <showGameBoard+0x9c>)
 8001f52:	4613      	mov	r3, r2
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	4403      	add	r3, r0
 8001f5a:	440b      	add	r3, r1
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d109      	bne.n	8001f76 <showGameBoard+0x66>
				drawSquareInBoard(i, j, 10, BROWN);
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	b298      	uxth	r0, r3
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	b299      	uxth	r1, r3
 8001f6a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8001f6e:	220a      	movs	r2, #10
 8001f70:	f7ff fdbf 	bl	8001af2 <drawSquareInBoard>
 8001f74:	e008      	b.n	8001f88 <showGameBoard+0x78>
			else
				drawSquareInBoard(i, j, 10, WHITE);
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	b298      	uxth	r0, r3
 8001f7a:	79bb      	ldrb	r3, [r7, #6]
 8001f7c:	b299      	uxth	r1, r3
 8001f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f82:	220a      	movs	r2, #10
 8001f84:	f7ff fdb5 	bl	8001af2 <drawSquareInBoard>
		for (u8 j = 0; j < 14; j++) {
 8001f88:	79bb      	ldrb	r3, [r7, #6]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	71bb      	strb	r3, [r7, #6]
 8001f8e:	79bb      	ldrb	r3, [r7, #6]
 8001f90:	2b0d      	cmp	r3, #13
 8001f92:	d9c6      	bls.n	8001f22 <showGameBoard+0x12>
	for (u8 i = 0; i < 23; i++) {
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	3301      	adds	r3, #1
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	2b16      	cmp	r3, #22
 8001f9e:	d9bd      	bls.n	8001f1c <showGameBoard+0xc>
		}
	}
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200000c4 	.word	0x200000c4

08001fb0 <initGameState>:

void initGameState() {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
	for (u8 i = 0; i < 23; i++) {
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	71fb      	strb	r3, [r7, #7]
 8001fba:	e015      	b.n	8001fe8 <initGameState+0x38>
		for (u8 j = 0; j < 14; j++) {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	71bb      	strb	r3, [r7, #6]
 8001fc0:	e00c      	b.n	8001fdc <initGameState+0x2c>
			game_board[i][j] = EMPTY;
 8001fc2:	79fa      	ldrb	r2, [r7, #7]
 8001fc4:	79b9      	ldrb	r1, [r7, #6]
 8001fc6:	4828      	ldr	r0, [pc, #160]	; (8002068 <initGameState+0xb8>)
 8001fc8:	4613      	mov	r3, r2
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	4403      	add	r3, r0
 8001fd0:	440b      	add	r3, r1
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
		for (u8 j = 0; j < 14; j++) {
 8001fd6:	79bb      	ldrb	r3, [r7, #6]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	71bb      	strb	r3, [r7, #6]
 8001fdc:	79bb      	ldrb	r3, [r7, #6]
 8001fde:	2b0d      	cmp	r3, #13
 8001fe0:	d9ef      	bls.n	8001fc2 <initGameState+0x12>
	for (u8 i = 0; i < 23; i++) {
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	71fb      	strb	r3, [r7, #7]
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2b16      	cmp	r3, #22
 8001fec:	d9e6      	bls.n	8001fbc <initGameState+0xc>
		}
	}
	// init snake position
	for (u8 i = 0; i < init_len; i++) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	717b      	strb	r3, [r7, #5]
 8001ff2:	e016      	b.n	8002022 <initGameState+0x72>
		game_board[5][3 + i] = SNAKE;
 8001ff4:	797b      	ldrb	r3, [r7, #5]
 8001ff6:	3303      	adds	r3, #3
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <initGameState+0xb8>)
 8001ffa:	4413      	add	r3, r2
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		snake[X_POS][i] = 5;
 8002002:	797b      	ldrb	r3, [r7, #5]
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <initGameState+0xbc>)
 8002006:	2105      	movs	r1, #5
 8002008:	54d1      	strb	r1, [r2, r3]
		snake[Y_POS][i] = 3 + i;
 800200a:	797b      	ldrb	r3, [r7, #5]
 800200c:	797a      	ldrb	r2, [r7, #5]
 800200e:	3203      	adds	r2, #3
 8002010:	b2d1      	uxtb	r1, r2
 8002012:	4a16      	ldr	r2, [pc, #88]	; (800206c <initGameState+0xbc>)
 8002014:	4413      	add	r3, r2
 8002016:	460a      	mov	r2, r1
 8002018:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
	for (u8 i = 0; i < init_len; i++) {
 800201c:	797b      	ldrb	r3, [r7, #5]
 800201e:	3301      	adds	r3, #1
 8002020:	717b      	strb	r3, [r7, #5]
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <initGameState+0xc0>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	797a      	ldrb	r2, [r7, #5]
 8002028:	429a      	cmp	r2, r3
 800202a:	d3e3      	bcc.n	8001ff4 <initGameState+0x44>
	}
	tail_index = 0;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <initGameState+0xc4>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
	head_index = init_len - 1;
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <initGameState+0xc0>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	3b01      	subs	r3, #1
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <initGameState+0xc8>)
 800203c:	701a      	strb	r2, [r3, #0]
	game_state = RUNNING;
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <initGameState+0xcc>)
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
	direction = RIGHT;
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <initGameState+0xd0>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
	game_score = 0;
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <initGameState+0xd4>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
	time_m = 0;
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <initGameState+0xd8>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
	time_s = 0;
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <initGameState+0xdc>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
	generateFood();
 800205c:	f7ff fdac 	bl	8001bb8 <generateFood>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200000c4 	.word	0x200000c4
 800206c:	200012ac 	.word	0x200012ac
 8002070:	20000021 	.word	0x20000021
 8002074:	2000224d 	.word	0x2000224d
 8002078:	2000224c 	.word	0x2000224c
 800207c:	20000231 	.word	0x20000231
 8002080:	20000230 	.word	0x20000230
 8002084:	200000bc 	.word	0x200000bc
 8002088:	2000224e 	.word	0x2000224e
 800208c:	20002258 	.word	0x20002258

08002090 <StartGameTask>:
 * @brief  Function implementing the gameTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGameTask */
void StartGameTask(void const *argument) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af04      	add	r7, sp, #16
 8002096:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGameTask */
	/* Infinite loop */
	char buff[20];
	for (;;) {
		if (check_flag == 1 && display_choose == 1) {
 8002098:	4b63      	ldr	r3, [pc, #396]	; (8002228 <StartGameTask+0x198>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 8096 	bne.w	80021ce <StartGameTask+0x13e>
 80020a2:	4b62      	ldr	r3, [pc, #392]	; (800222c <StartGameTask+0x19c>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	f040 8091 	bne.w	80021ce <StartGameTask+0x13e>
			if (game_state == RUNNING) {
 80020ac:	4b60      	ldr	r3, [pc, #384]	; (8002230 <StartGameTask+0x1a0>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <StartGameTask+0x28>
				updateSnakePos();
 80020b4:	f7ff fe28 	bl	8001d08 <updateSnakePos>
			}
			if (game_state == GAME_FAIL) {
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <StartGameTask+0x1a0>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	f040 8083 	bne.w	80021c8 <StartGameTask+0x138>
				// game over
				if (game_over_show) {
 80020c2:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <StartGameTask+0x1a4>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d064      	beq.n	8002194 <StartGameTask+0x104>
					showGameBoard();
 80020ca:	f7ff ff21 	bl	8001f10 <showGameBoard>
					LCD_Fill(38, 120, 180, 230, LIGHTGRAY);
 80020ce:	f64e 735b 	movw	r3, #61275	; 0xef5b
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	23e6      	movs	r3, #230	; 0xe6
 80020d6:	22b4      	movs	r2, #180	; 0xb4
 80020d8:	2178      	movs	r1, #120	; 0x78
 80020da:	2026      	movs	r0, #38	; 0x26
 80020dc:	f7fe fda8 	bl	8000c30 <LCD_Fill>
					// show string
					Show_Str(80, 130, RED, BLUE, "Game Over", 16, 1);
 80020e0:	2301      	movs	r3, #1
 80020e2:	9302      	str	r3, [sp, #8]
 80020e4:	2310      	movs	r3, #16
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <StartGameTask+0x1a8>)
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	231f      	movs	r3, #31
 80020ee:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80020f2:	2182      	movs	r1, #130	; 0x82
 80020f4:	2050      	movs	r0, #80	; 0x50
 80020f6:	f7ff f8e1 	bl	80012bc <Show_Str>
					sprintf(buff, "Score: %d", game_score);
 80020fa:	4b50      	ldr	r3, [pc, #320]	; (800223c <StartGameTask+0x1ac>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	494f      	ldr	r1, [pc, #316]	; (8002240 <StartGameTask+0x1b0>)
 8002104:	4618      	mov	r0, r3
 8002106:	f005 feaf 	bl	8007e68 <siprintf>
					Show_Str(40, 150, RED, BLUE, buff, 16, 1);
 800210a:	2301      	movs	r3, #1
 800210c:	9302      	str	r3, [sp, #8]
 800210e:	2310      	movs	r3, #16
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	231f      	movs	r3, #31
 800211a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800211e:	2196      	movs	r1, #150	; 0x96
 8002120:	2028      	movs	r0, #40	; 0x28
 8002122:	f7ff f8cb 	bl	80012bc <Show_Str>
					sprintf(buff, "Time used: %.2d:%.2d", time_m, time_s);
 8002126:	4b47      	ldr	r3, [pc, #284]	; (8002244 <StartGameTask+0x1b4>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	4b46      	ldr	r3, [pc, #280]	; (8002248 <StartGameTask+0x1b8>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	f107 000c 	add.w	r0, r7, #12
 8002134:	4945      	ldr	r1, [pc, #276]	; (800224c <StartGameTask+0x1bc>)
 8002136:	f005 fe97 	bl	8007e68 <siprintf>
					Show_Str(40, 170, RED, BLUE, buff, 16, 1);
 800213a:	2301      	movs	r3, #1
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	2310      	movs	r3, #16
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	231f      	movs	r3, #31
 800214a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800214e:	21aa      	movs	r1, #170	; 0xaa
 8002150:	2028      	movs	r0, #40	; 0x28
 8002152:	f7ff f8b3 	bl	80012bc <Show_Str>
					Show_Str(40, 190, MAGENTA, DARKBLUE, "Press KB1 return", 16,
 8002156:	2301      	movs	r3, #1
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	2310      	movs	r3, #16
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <StartGameTask+0x1c0>)
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002166:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800216a:	21be      	movs	r1, #190	; 0xbe
 800216c:	2028      	movs	r0, #40	; 0x28
 800216e:	f7ff f8a5 	bl	80012bc <Show_Str>
							1);
					Show_Str(40, 210, MAGENTA, DARKBLUE, "Press KB2 restart",
 8002172:	2301      	movs	r3, #1
 8002174:	9302      	str	r3, [sp, #8]
 8002176:	2310      	movs	r3, #16
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	4b36      	ldr	r3, [pc, #216]	; (8002254 <StartGameTask+0x1c4>)
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002182:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002186:	21d2      	movs	r1, #210	; 0xd2
 8002188:	2028      	movs	r0, #40	; 0x28
 800218a:	f7ff f897 	bl	80012bc <Show_Str>
							16, 1);
					game_over_show = 0;
 800218e:	4b29      	ldr	r3, [pc, #164]	; (8002234 <StartGameTask+0x1a4>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
				}
				// handle
				if (key_state == 1) {
 8002194:	4b30      	ldr	r3, [pc, #192]	; (8002258 <StartGameTask+0x1c8>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d107      	bne.n	80021ac <StartGameTask+0x11c>
					// return menu
					display_choose = 0;
 800219c:	4b23      	ldr	r3, [pc, #140]	; (800222c <StartGameTask+0x19c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
					LCD_Clear(WHITE);
 80021a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021a6:	f000 ff3f 	bl	8003028 <LCD_Clear>
 80021aa:	e00d      	b.n	80021c8 <StartGameTask+0x138>
				} else if (key_state == 2) {
 80021ac:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <StartGameTask+0x1c8>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d109      	bne.n	80021c8 <StartGameTask+0x138>
					// restart
					game_state = GAME_INIT;
 80021b4:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <StartGameTask+0x1a0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
					show_board = 1;
 80021ba:	4b28      	ldr	r3, [pc, #160]	; (800225c <StartGameTask+0x1cc>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
					LCD_Clear(WHITE);
 80021c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021c4:	f000 ff30 	bl	8003028 <LCD_Clear>
				}
			}
			check_flag = 0;
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <StartGameTask+0x198>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
		}

		if (time_update_flag
				== 1&& display_choose == 1 && game_state == RUNNING) {
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <StartGameTask+0x1d0>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
		if (time_update_flag
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d11d      	bne.n	8002212 <StartGameTask+0x182>
				== 1&& display_choose == 1 && game_state == RUNNING) {
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <StartGameTask+0x19c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d119      	bne.n	8002212 <StartGameTask+0x182>
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <StartGameTask+0x1a0>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d115      	bne.n	8002212 <StartGameTask+0x182>
			time_s++;
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <StartGameTask+0x1b8>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	3301      	adds	r3, #1
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <StartGameTask+0x1b8>)
 80021f0:	701a      	strb	r2, [r3, #0]
			if (time_s == 60) {
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <StartGameTask+0x1b8>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b3c      	cmp	r3, #60	; 0x3c
 80021f8:	d108      	bne.n	800220c <StartGameTask+0x17c>
				time_m++;
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <StartGameTask+0x1b4>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <StartGameTask+0x1b4>)
 8002204:	701a      	strb	r2, [r3, #0]
				time_s = 0;
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <StartGameTask+0x1b8>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
			}
			time_update_flag = 0;
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <StartGameTask+0x1d0>)
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
		}

		// 数码管
		updateDigitalNum(game_score);
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <StartGameTask+0x1ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fae5 	bl	80017e8 <updateDigitalNum>
		osDelay(1);
 800221e:	2001      	movs	r0, #1
 8002220:	f004 fa0c 	bl	800663c <osDelay>
		if (check_flag == 1 && display_choose == 1) {
 8002224:	e738      	b.n	8002098 <StartGameTask+0x8>
 8002226:	bf00      	nop
 8002228:	200004ee 	.word	0x200004ee
 800222c:	200000c1 	.word	0x200000c1
 8002230:	20000231 	.word	0x20000231
 8002234:	20000233 	.word	0x20000233
 8002238:	08008f54 	.word	0x08008f54
 800223c:	200000bc 	.word	0x200000bc
 8002240:	08008f60 	.word	0x08008f60
 8002244:	2000224e 	.word	0x2000224e
 8002248:	20002258 	.word	0x20002258
 800224c:	08008f6c 	.word	0x08008f6c
 8002250:	08008f84 	.word	0x08008f84
 8002254:	08008f98 	.word	0x08008f98
 8002258:	200000c2 	.word	0x200000c2
 800225c:	20000020 	.word	0x20000020
 8002260:	200004ef 	.word	0x200004ef

08002264 <StartMusicTask>:
 * @param argument: Not used
 * @retval None
 */

/* USER CODE END Header_StartMusicTask */
void StartMusicTask(void const *argument) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMusicTask */
	/* Infinite loop */

	for (;;) {
		 music_play(music_state);
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <StartMusicTask+0x2c>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f001 f9c9 	bl	8003608 <music_play>
		 music_state = 0;
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <StartMusicTask+0x2c>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
		// 流水灯
		LED_Flow(snake_speed);
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <StartMusicTask+0x30>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fd03 	bl	8001c8c <LED_Flow>
		osDelay(1);
 8002286:	2001      	movs	r0, #1
 8002288:	f004 f9d8 	bl	800663c <osDelay>
		 music_play(music_state);
 800228c:	e7ee      	b.n	800226c <StartMusicTask+0x8>
 800228e:	bf00      	nop
 8002290:	200000c0 	.word	0x200000c0
 8002294:	20000232 	.word	0x20000232

08002298 <StartUpdateTask>:
 * @brief Function implementing the updateTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUpdateTask */
void StartUpdateTask(void const *argument) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b090      	sub	sp, #64	; 0x40
 800229c:	af04      	add	r7, sp, #16
 800229e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUpdateTask */
	/* Infinite loop */
	char board_width = 10;
 80022a0:	230a      	movs	r3, #10
 80022a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	char buff[10];
	u8 i = 0, j = 0, choose_setting = 1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80022b2:	2301      	movs	r3, #1
 80022b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	tail_index = 0;
 80022b8:	4bae      	ldr	r3, [pc, #696]	; (8002574 <StartUpdateTask+0x2dc>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
	head_index = init_len - 1;
 80022be:	4bae      	ldr	r3, [pc, #696]	; (8002578 <StartUpdateTask+0x2e0>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4bad      	ldr	r3, [pc, #692]	; (800257c <StartUpdateTask+0x2e4>)
 80022c8:	701a      	strb	r2, [r3, #0]
	u32 val0 = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
	float x = 0;
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
	u8 update_speed = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	77fb      	strb	r3, [r7, #31]
	snake_speed = 11 - (update_time / 10);
 80022d8:	4ba9      	ldr	r3, [pc, #676]	; (8002580 <StartUpdateTask+0x2e8>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	4aa9      	ldr	r2, [pc, #676]	; (8002584 <StartUpdateTask+0x2ec>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	08db      	lsrs	r3, r3, #3
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f1c3 030b 	rsb	r3, r3, #11
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4ba6      	ldr	r3, [pc, #664]	; (8002588 <StartUpdateTask+0x2f0>)
 80022f0:	701a      	strb	r2, [r3, #0]
	for (;;) {
		//LCD_Clear(WHITE);
		// update snake speed
		if (display_choose == 0) {
 80022f2:	4ba6      	ldr	r3, [pc, #664]	; (800258c <StartUpdateTask+0x2f4>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d15b      	bne.n	80023b2 <StartUpdateTask+0x11a>
			// game menu
			Gui_StrCenter(0, 30, RED, BLUE, "Greedy Snake Game", 16, 1); //居中显示
 80022fa:	2301      	movs	r3, #1
 80022fc:	9302      	str	r3, [sp, #8]
 80022fe:	2310      	movs	r3, #16
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	4ba3      	ldr	r3, [pc, #652]	; (8002590 <StartUpdateTask+0x2f8>)
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	231f      	movs	r3, #31
 8002308:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800230c:	211e      	movs	r1, #30
 800230e:	2000      	movs	r0, #0
 8002310:	f7ff f8a6 	bl	8001460 <Gui_StrCenter>
			Gui_StrCenter(0, 60, RED, BLUE, "Game Menu", 16, 1);      //居中显示
 8002314:	2301      	movs	r3, #1
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	2310      	movs	r3, #16
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	4b9d      	ldr	r3, [pc, #628]	; (8002594 <StartUpdateTask+0x2fc>)
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	231f      	movs	r3, #31
 8002322:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002326:	213c      	movs	r1, #60	; 0x3c
 8002328:	2000      	movs	r0, #0
 800232a:	f7ff f899 	bl	8001460 <Gui_StrCenter>

			Show_Str(60, 90, MAGENTA, DARKBLUE, "1. Start Game", 16, 1);
 800232e:	2301      	movs	r3, #1
 8002330:	9302      	str	r3, [sp, #8]
 8002332:	2310      	movs	r3, #16
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	4b98      	ldr	r3, [pc, #608]	; (8002598 <StartUpdateTask+0x300>)
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	f240 13cf 	movw	r3, #463	; 0x1cf
 800233e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002342:	215a      	movs	r1, #90	; 0x5a
 8002344:	203c      	movs	r0, #60	; 0x3c
 8002346:	f7fe ffb9 	bl	80012bc <Show_Str>
			Show_Str(60, 120, MAGENTA, DARKBLUE, "2. Game Setting", 16, 1);
 800234a:	2301      	movs	r3, #1
 800234c:	9302      	str	r3, [sp, #8]
 800234e:	2310      	movs	r3, #16
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	4b92      	ldr	r3, [pc, #584]	; (800259c <StartUpdateTask+0x304>)
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	f240 13cf 	movw	r3, #463	; 0x1cf
 800235a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800235e:	2178      	movs	r1, #120	; 0x78
 8002360:	203c      	movs	r0, #60	; 0x3c
 8002362:	f7fe ffab 	bl	80012bc <Show_Str>
			Show_Str(60, 150, MAGENTA, DARKBLUE, "3. About", 16, 1);
 8002366:	2301      	movs	r3, #1
 8002368:	9302      	str	r3, [sp, #8]
 800236a:	2310      	movs	r3, #16
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	4b8c      	ldr	r3, [pc, #560]	; (80025a0 <StartUpdateTask+0x308>)
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002376:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800237a:	2196      	movs	r1, #150	; 0x96
 800237c:	203c      	movs	r0, #60	; 0x3c
 800237e:	f7fe ff9d 	bl	80012bc <Show_Str>
			Show_Str(30, 90 + (choose - 1) * 30, RED, BLUE, ">>>", 16, 1);
 8002382:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <StartUpdateTask+0x30c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	3b01      	subs	r3, #1
 8002388:	b29b      	uxth	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	0112      	lsls	r2, r2, #4
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	b29b      	uxth	r3, r3
 8002394:	335a      	adds	r3, #90	; 0x5a
 8002396:	b299      	uxth	r1, r3
 8002398:	2301      	movs	r3, #1
 800239a:	9302      	str	r3, [sp, #8]
 800239c:	2310      	movs	r3, #16
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	4b81      	ldr	r3, [pc, #516]	; (80025a8 <StartUpdateTask+0x310>)
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	231f      	movs	r3, #31
 80023a6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80023aa:	201e      	movs	r0, #30
 80023ac:	f7fe ff86 	bl	80012bc <Show_Str>
 80023b0:	e29c      	b.n	80028ec <StartUpdateTask+0x654>
		} else if (display_choose == 1 && game_state == GAME_INIT) { // game init
 80023b2:	4b76      	ldr	r3, [pc, #472]	; (800258c <StartUpdateTask+0x2f4>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d106      	bne.n	80023c8 <StartUpdateTask+0x130>
 80023ba:	4b7c      	ldr	r3, [pc, #496]	; (80025ac <StartUpdateTask+0x314>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <StartUpdateTask+0x130>
			initGameState();
 80023c2:	f7ff fdf5 	bl	8001fb0 <initGameState>
 80023c6:	e291      	b.n	80028ec <StartUpdateTask+0x654>
		} else if (display_choose == 1 && game_state == RUNNING) {
 80023c8:	4b70      	ldr	r3, [pc, #448]	; (800258c <StartUpdateTask+0x2f4>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 80ff 	bne.w	80025d0 <StartUpdateTask+0x338>
 80023d2:	4b76      	ldr	r3, [pc, #472]	; (80025ac <StartUpdateTask+0x314>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f040 80fa 	bne.w	80025d0 <StartUpdateTask+0x338>
			// game page
			Gui_StrCenter(0, 30, RED, BLUE, "Greedy Snake Game", 16, 1); //居中显示
 80023dc:	2301      	movs	r3, #1
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	2310      	movs	r3, #16
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <StartUpdateTask+0x2f8>)
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	231f      	movs	r3, #31
 80023ea:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80023ee:	211e      	movs	r1, #30
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7ff f835 	bl	8001460 <Gui_StrCenter>
			// game board show
			if (show_board) {
 80023f6:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <StartUpdateTask+0x318>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d06c      	beq.n	80024d8 <StartUpdateTask+0x240>
				for (char i = 0; i < 16; i++) {
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002404:	e027      	b.n	8002456 <StartUpdateTask+0x1be>
					drawSquare(0 + i * board_width, 60, board_width,
 8002406:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800240a:	b29b      	uxth	r3, r3
 800240c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002410:	b292      	uxth	r2, r2
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	b298      	uxth	r0, r3
 8002418:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800241c:	b29a      	uxth	r2, r3
 800241e:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002422:	213c      	movs	r1, #60	; 0x3c
 8002424:	f7ff fb42 	bl	8001aac <drawSquare>
					DARKBLUE); // ----
					drawSquare(i * board_width, 300, board_width, DARKBLUE); // ----
 8002428:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800242c:	b29b      	uxth	r3, r3
 800242e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002432:	b292      	uxth	r2, r2
 8002434:	fb02 f303 	mul.w	r3, r2, r3
 8002438:	b298      	uxth	r0, r3
 800243a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800243e:	b29a      	uxth	r2, r3
 8002440:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002444:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002448:	f7ff fb30 	bl	8001aac <drawSquare>
				for (char i = 0; i < 16; i++) {
 800244c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002450:	3301      	adds	r3, #1
 8002452:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002456:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800245a:	2b0f      	cmp	r3, #15
 800245c:	d9d3      	bls.n	8002406 <StartUpdateTask+0x16e>
				}
				for (char i = 0; i < 24; i++) {
 800245e:	2300      	movs	r3, #0
 8002460:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002464:	e031      	b.n	80024ca <StartUpdateTask+0x232>
					drawSquare(0, 60 + (i + 1) * board_width, board_width,
 8002466:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800246a:	3301      	adds	r3, #1
 800246c:	b29b      	uxth	r3, r3
 800246e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002472:	b292      	uxth	r2, r2
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	b29b      	uxth	r3, r3
 800247a:	333c      	adds	r3, #60	; 0x3c
 800247c:	b299      	uxth	r1, r3
 800247e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002482:	b29a      	uxth	r2, r3
 8002484:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002488:	2000      	movs	r0, #0
 800248a:	f7ff fb0f 	bl	8001aac <drawSquare>
					DARKBLUE);            // |
					drawSquare(15 * board_width, 70 + i * board_width,
 800248e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	b298      	uxth	r0, r3
 800249c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80024a6:	b292      	uxth	r2, r2
 80024a8:	fb02 f303 	mul.w	r3, r2, r3
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3346      	adds	r3, #70	; 0x46
 80024b0:	b299      	uxth	r1, r3
 80024b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	f240 13cf 	movw	r3, #463	; 0x1cf
 80024bc:	f7ff faf6 	bl	8001aac <drawSquare>
				for (char i = 0; i < 24; i++) {
 80024c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024c4:	3301      	adds	r3, #1
 80024c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80024ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024ce:	2b17      	cmp	r3, #23
 80024d0:	d9c9      	bls.n	8002466 <StartUpdateTask+0x1ce>
							board_width, DARKBLUE);   // |
				}
				show_board = 0;
 80024d2:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <StartUpdateTask+0x318>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
			}
			// show score
			Show_Str(170, 180, MAGENTA, DARKBLUE, "Score:", 16, 1);
 80024d8:	2301      	movs	r3, #1
 80024da:	9302      	str	r3, [sp, #8]
 80024dc:	2310      	movs	r3, #16
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <StartUpdateTask+0x31c>)
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	f240 13cf 	movw	r3, #463	; 0x1cf
 80024e8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80024ec:	21b4      	movs	r1, #180	; 0xb4
 80024ee:	20aa      	movs	r0, #170	; 0xaa
 80024f0:	f7fe fee4 	bl	80012bc <Show_Str>
			sprintf(buff, "    %d", game_score);
 80024f4:	4b30      	ldr	r3, [pc, #192]	; (80025b8 <StartUpdateTask+0x320>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	492f      	ldr	r1, [pc, #188]	; (80025bc <StartUpdateTask+0x324>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f005 fcb2 	bl	8007e68 <siprintf>
			Show_Str(170, 200, BLUE, LGRAY, buff, 16, 0);
 8002504:	2300      	movs	r3, #0
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	2310      	movs	r3, #16
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002516:	221f      	movs	r2, #31
 8002518:	21c8      	movs	r1, #200	; 0xc8
 800251a:	20aa      	movs	r0, #170	; 0xaa
 800251c:	f7fe fece 	bl	80012bc <Show_Str>
			// show time
			Show_Str(170, 220, MAGENTA, DARKBLUE, "Time:", 16, 1);
 8002520:	2301      	movs	r3, #1
 8002522:	9302      	str	r3, [sp, #8]
 8002524:	2310      	movs	r3, #16
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <StartUpdateTask+0x328>)
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002530:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002534:	21dc      	movs	r1, #220	; 0xdc
 8002536:	20aa      	movs	r0, #170	; 0xaa
 8002538:	f7fe fec0 	bl	80012bc <Show_Str>
			sprintf(buff, "%.2d:%.2d", time_m, time_s);
 800253c:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <StartUpdateTask+0x32c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <StartUpdateTask+0x330>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	f107 000c 	add.w	r0, r7, #12
 800254a:	4920      	ldr	r1, [pc, #128]	; (80025cc <StartUpdateTask+0x334>)
 800254c:	f005 fc8c 	bl	8007e68 <siprintf>
			Show_Str(170, 240, BLUE, LGRAY, buff, 16, 0);
 8002550:	2300      	movs	r3, #0
 8002552:	9302      	str	r3, [sp, #8]
 8002554:	2310      	movs	r3, #16
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002562:	221f      	movs	r2, #31
 8002564:	21f0      	movs	r1, #240	; 0xf0
 8002566:	20aa      	movs	r0, #170	; 0xaa
 8002568:	f7fe fea8 	bl	80012bc <Show_Str>
			// show snake
			showGameBoard();
 800256c:	f7ff fcd0 	bl	8001f10 <showGameBoard>
 8002570:	e1bc      	b.n	80028ec <StartUpdateTask+0x654>
 8002572:	bf00      	nop
 8002574:	2000224d 	.word	0x2000224d
 8002578:	20000021 	.word	0x20000021
 800257c:	2000224c 	.word	0x2000224c
 8002580:	20000022 	.word	0x20000022
 8002584:	cccccccd 	.word	0xcccccccd
 8002588:	20000232 	.word	0x20000232
 800258c:	200000c1 	.word	0x200000c1
 8002590:	08008fac 	.word	0x08008fac
 8002594:	08008fc0 	.word	0x08008fc0
 8002598:	08008fcc 	.word	0x08008fcc
 800259c:	08008fdc 	.word	0x08008fdc
 80025a0:	08008fec 	.word	0x08008fec
 80025a4:	2000001c 	.word	0x2000001c
 80025a8:	08008ff8 	.word	0x08008ff8
 80025ac:	20000231 	.word	0x20000231
 80025b0:	20000020 	.word	0x20000020
 80025b4:	08008ffc 	.word	0x08008ffc
 80025b8:	200000bc 	.word	0x200000bc
 80025bc:	08009004 	.word	0x08009004
 80025c0:	0800900c 	.word	0x0800900c
 80025c4:	2000224e 	.word	0x2000224e
 80025c8:	20002258 	.word	0x20002258
 80025cc:	08009014 	.word	0x08009014
		} else if (display_choose == 2) { //game setting
 80025d0:	4b8e      	ldr	r3, [pc, #568]	; (800280c <StartUpdateTask+0x574>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	f040 8137 	bne.w	8002848 <StartUpdateTask+0x5b0>
			// game setting
			Gui_StrCenter(0, 30, RED, BLUE, "Greedy Snake Game", 16, 1); //居中显示
 80025da:	2301      	movs	r3, #1
 80025dc:	9302      	str	r3, [sp, #8]
 80025de:	2310      	movs	r3, #16
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	4b8b      	ldr	r3, [pc, #556]	; (8002810 <StartUpdateTask+0x578>)
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	231f      	movs	r3, #31
 80025e8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80025ec:	211e      	movs	r1, #30
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe ff36 	bl	8001460 <Gui_StrCenter>
			Gui_StrCenter(0, 60, RED, BLUE, "Game Setting", 16, 1);   //居中显示
 80025f4:	2301      	movs	r3, #1
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	2310      	movs	r3, #16
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	4b85      	ldr	r3, [pc, #532]	; (8002814 <StartUpdateTask+0x57c>)
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	231f      	movs	r3, #31
 8002602:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002606:	213c      	movs	r1, #60	; 0x3c
 8002608:	2000      	movs	r0, #0
 800260a:	f7fe ff29 	bl	8001460 <Gui_StrCenter>

			Show_Str(30, 90, MAGENTA, DARKBLUE, "1. Snake initial length:", 16,
 800260e:	2301      	movs	r3, #1
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	2310      	movs	r3, #16
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	4b80      	ldr	r3, [pc, #512]	; (8002818 <StartUpdateTask+0x580>)
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	f240 13cf 	movw	r3, #463	; 0x1cf
 800261e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002622:	215a      	movs	r1, #90	; 0x5a
 8002624:	201e      	movs	r0, #30
 8002626:	f7fe fe49 	bl	80012bc <Show_Str>
					1);
			sprintf(buff, "<   %d   >", init_len);
 800262a:	4b7c      	ldr	r3, [pc, #496]	; (800281c <StartUpdateTask+0x584>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	497a      	ldr	r1, [pc, #488]	; (8002820 <StartUpdateTask+0x588>)
 8002636:	4618      	mov	r0, r3
 8002638:	f005 fc16 	bl	8007e68 <siprintf>
			Show_Str(60, 120, BLUE, DARKBLUE, buff, 16, 1);
 800263c:	2301      	movs	r3, #1
 800263e:	9302      	str	r3, [sp, #8]
 8002640:	2310      	movs	r3, #16
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	f240 13cf 	movw	r3, #463	; 0x1cf
 800264e:	221f      	movs	r2, #31
 8002650:	2178      	movs	r1, #120	; 0x78
 8002652:	203c      	movs	r0, #60	; 0x3c
 8002654:	f7fe fe32 	bl	80012bc <Show_Str>
			Show_Str(30, 150, MAGENTA, DARKBLUE, "2. Snake speed:", 16, 1);
 8002658:	2301      	movs	r3, #1
 800265a:	9302      	str	r3, [sp, #8]
 800265c:	2310      	movs	r3, #16
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	4b70      	ldr	r3, [pc, #448]	; (8002824 <StartUpdateTask+0x58c>)
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002668:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800266c:	2196      	movs	r1, #150	; 0x96
 800266e:	201e      	movs	r0, #30
 8002670:	f7fe fe24 	bl	80012bc <Show_Str>
			sprintf(buff, "<   %d   >", snake_speed);
 8002674:	4b6c      	ldr	r3, [pc, #432]	; (8002828 <StartUpdateTask+0x590>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	4968      	ldr	r1, [pc, #416]	; (8002820 <StartUpdateTask+0x588>)
 8002680:	4618      	mov	r0, r3
 8002682:	f005 fbf1 	bl	8007e68 <siprintf>
			Show_Str(60, 180, BLUE, DARKBLUE, buff, 16, 1);
 8002686:	2301      	movs	r3, #1
 8002688:	9302      	str	r3, [sp, #8]
 800268a:	2310      	movs	r3, #16
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	f107 030c 	add.w	r3, r7, #12
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002698:	221f      	movs	r2, #31
 800269a:	21b4      	movs	r1, #180	; 0xb4
 800269c:	203c      	movs	r0, #60	; 0x3c
 800269e:	f7fe fe0d 	bl	80012bc <Show_Str>
			Show_Str(0, 150 + (choose_setting - 1) * 60, RED, BLUE, ">>>", 16,
 80026a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	0112      	lsls	r2, r2, #4
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3396      	adds	r3, #150	; 0x96
 80026b6:	b299      	uxth	r1, r3
 80026b8:	2301      	movs	r3, #1
 80026ba:	9302      	str	r3, [sp, #8]
 80026bc:	2310      	movs	r3, #16
 80026be:	9301      	str	r3, [sp, #4]
 80026c0:	4b5a      	ldr	r3, [pc, #360]	; (800282c <StartUpdateTask+0x594>)
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	231f      	movs	r3, #31
 80026c6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7fe fdf6 	bl	80012bc <Show_Str>
					1);

			Show_Str(30, 210, MAGENTA, DARKBLUE, "Press Ka1 return menu", 16,
 80026d0:	2301      	movs	r3, #1
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	2310      	movs	r3, #16
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	4b55      	ldr	r3, [pc, #340]	; (8002830 <StartUpdateTask+0x598>)
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	f240 13cf 	movw	r3, #463	; 0x1cf
 80026e0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80026e4:	21d2      	movs	r1, #210	; 0xd2
 80026e6:	201e      	movs	r0, #30
 80026e8:	f7fe fde8 	bl	80012bc <Show_Str>
					1);
			// 修改update_time
			if (choose_setting == 1) {
 80026ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d13c      	bne.n	800276e <StartUpdateTask+0x4d6>
				snake_speed = val_input / 10;
 80026f4:	4b4f      	ldr	r3, [pc, #316]	; (8002834 <StartUpdateTask+0x59c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a4f      	ldr	r2, [pc, #316]	; (8002838 <StartUpdateTask+0x5a0>)
 80026fa:	fb82 1203 	smull	r1, r2, r2, r3
 80026fe:	1092      	asrs	r2, r2, #2
 8002700:	17db      	asrs	r3, r3, #31
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4b48      	ldr	r3, [pc, #288]	; (8002828 <StartUpdateTask+0x590>)
 8002708:	701a      	strb	r2, [r3, #0]
				update_time = (11 - snake_speed) * 10;
 800270a:	4b47      	ldr	r3, [pc, #284]	; (8002828 <StartUpdateTask+0x590>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	f1c3 030b 	rsb	r3, r3, #11
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	4413      	add	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	4b47      	ldr	r3, [pc, #284]	; (800283c <StartUpdateTask+0x5a4>)
 8002720:	801a      	strh	r2, [r3, #0]
				sprintf(buff, "<   %d   >", snake_speed);
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <StartUpdateTask+0x590>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	493c      	ldr	r1, [pc, #240]	; (8002820 <StartUpdateTask+0x588>)
 800272e:	4618      	mov	r0, r3
 8002730:	f005 fb9a 	bl	8007e68 <siprintf>
				Show_Str(60, 180, MAGENTA, WHITE, "          ", 16, 0);
 8002734:	2300      	movs	r3, #0
 8002736:	9302      	str	r3, [sp, #8]
 8002738:	2310      	movs	r3, #16
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	4b40      	ldr	r3, [pc, #256]	; (8002840 <StartUpdateTask+0x5a8>)
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002744:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002748:	21b4      	movs	r1, #180	; 0xb4
 800274a:	203c      	movs	r0, #60	; 0x3c
 800274c:	f7fe fdb6 	bl	80012bc <Show_Str>
				Show_Str(60, 180, BLUE, DARKBLUE, buff, 16, 1);
 8002750:	2301      	movs	r3, #1
 8002752:	9302      	str	r3, [sp, #8]
 8002754:	2310      	movs	r3, #16
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002762:	221f      	movs	r2, #31
 8002764:	21b4      	movs	r1, #180	; 0xb4
 8002766:	203c      	movs	r0, #60	; 0x3c
 8002768:	f7fe fda8 	bl	80012bc <Show_Str>
 800276c:	e0be      	b.n	80028ec <StartUpdateTask+0x654>
			} else if (choose_setting == 0) {
 800276e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 80ba 	bne.w	80028ec <StartUpdateTask+0x654>
				if (key_state == 6) {
 8002778:	4b32      	ldr	r3, [pc, #200]	; (8002844 <StartUpdateTask+0x5ac>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b06      	cmp	r3, #6
 800277e:	d10d      	bne.n	800279c <StartUpdateTask+0x504>
					init_len++;
 8002780:	4b26      	ldr	r3, [pc, #152]	; (800281c <StartUpdateTask+0x584>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	b2da      	uxtb	r2, r3
 8002788:	4b24      	ldr	r3, [pc, #144]	; (800281c <StartUpdateTask+0x584>)
 800278a:	701a      	strb	r2, [r3, #0]
					if (init_len > 5)
 800278c:	4b23      	ldr	r3, [pc, #140]	; (800281c <StartUpdateTask+0x584>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b05      	cmp	r3, #5
 8002792:	d914      	bls.n	80027be <StartUpdateTask+0x526>
						init_len = 5;
 8002794:	4b21      	ldr	r3, [pc, #132]	; (800281c <StartUpdateTask+0x584>)
 8002796:	2205      	movs	r2, #5
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e010      	b.n	80027be <StartUpdateTask+0x526>
				} else if (key_state == 7) {
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <StartUpdateTask+0x5ac>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b07      	cmp	r3, #7
 80027a2:	d10c      	bne.n	80027be <StartUpdateTask+0x526>
					init_len--;
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <StartUpdateTask+0x584>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <StartUpdateTask+0x584>)
 80027ae:	701a      	strb	r2, [r3, #0]
					if (init_len < 1)
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <StartUpdateTask+0x584>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d102      	bne.n	80027be <StartUpdateTask+0x526>
						init_len = 1;
 80027b8:	4b18      	ldr	r3, [pc, #96]	; (800281c <StartUpdateTask+0x584>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
				}
				sprintf(buff, "<   %d   >", init_len);
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <StartUpdateTask+0x584>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f107 030c 	add.w	r3, r7, #12
 80027c8:	4915      	ldr	r1, [pc, #84]	; (8002820 <StartUpdateTask+0x588>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f005 fb4c 	bl	8007e68 <siprintf>
				Show_Str(60, 120, MAGENTA, WHITE, "          ", 16, 0);
 80027d0:	2300      	movs	r3, #0
 80027d2:	9302      	str	r3, [sp, #8]
 80027d4:	2310      	movs	r3, #16
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <StartUpdateTask+0x5a8>)
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027e0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80027e4:	2178      	movs	r1, #120	; 0x78
 80027e6:	203c      	movs	r0, #60	; 0x3c
 80027e8:	f7fe fd68 	bl	80012bc <Show_Str>
				Show_Str(60, 120, BLUE, DARKBLUE, buff, 16, 1);
 80027ec:	2301      	movs	r3, #1
 80027ee:	9302      	str	r3, [sp, #8]
 80027f0:	2310      	movs	r3, #16
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	f240 13cf 	movw	r3, #463	; 0x1cf
 80027fe:	221f      	movs	r2, #31
 8002800:	2178      	movs	r1, #120	; 0x78
 8002802:	203c      	movs	r0, #60	; 0x3c
 8002804:	f7fe fd5a 	bl	80012bc <Show_Str>
 8002808:	e070      	b.n	80028ec <StartUpdateTask+0x654>
 800280a:	bf00      	nop
 800280c:	200000c1 	.word	0x200000c1
 8002810:	08008fac 	.word	0x08008fac
 8002814:	08009020 	.word	0x08009020
 8002818:	08009030 	.word	0x08009030
 800281c:	20000021 	.word	0x20000021
 8002820:	0800904c 	.word	0x0800904c
 8002824:	08009058 	.word	0x08009058
 8002828:	20000232 	.word	0x20000232
 800282c:	08008ff8 	.word	0x08008ff8
 8002830:	08009068 	.word	0x08009068
 8002834:	2000022c 	.word	0x2000022c
 8002838:	66666667 	.word	0x66666667
 800283c:	20000022 	.word	0x20000022
 8002840:	08009080 	.word	0x08009080
 8002844:	200000c2 	.word	0x200000c2
			}

		} else if (display_choose == 3) {
 8002848:	4b8e      	ldr	r3, [pc, #568]	; (8002a84 <StartUpdateTask+0x7ec>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d14d      	bne.n	80028ec <StartUpdateTask+0x654>
			// game About
			Gui_StrCenter(0, 30, RED, BLUE, "Greedy Snake Game", 16, 1); //居中显示
 8002850:	2301      	movs	r3, #1
 8002852:	9302      	str	r3, [sp, #8]
 8002854:	2310      	movs	r3, #16
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	4b8b      	ldr	r3, [pc, #556]	; (8002a88 <StartUpdateTask+0x7f0>)
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	231f      	movs	r3, #31
 800285e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002862:	211e      	movs	r1, #30
 8002864:	2000      	movs	r0, #0
 8002866:	f7fe fdfb 	bl	8001460 <Gui_StrCenter>
			Gui_StrCenter(0, 60, RED, BLUE, "Game About", 16, 1);   //居中显示
 800286a:	2301      	movs	r3, #1
 800286c:	9302      	str	r3, [sp, #8]
 800286e:	2310      	movs	r3, #16
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	4b86      	ldr	r3, [pc, #536]	; (8002a8c <StartUpdateTask+0x7f4>)
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	231f      	movs	r3, #31
 8002878:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800287c:	213c      	movs	r1, #60	; 0x3c
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe fdee 	bl	8001460 <Gui_StrCenter>
			Gui_StrCenter(0, 90, RED, BLUE, "2018112651  LiXiaodong", 16, 1);   //居中显示
 8002884:	2301      	movs	r3, #1
 8002886:	9302      	str	r3, [sp, #8]
 8002888:	2310      	movs	r3, #16
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	4b80      	ldr	r3, [pc, #512]	; (8002a90 <StartUpdateTask+0x7f8>)
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	231f      	movs	r3, #31
 8002892:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002896:	215a      	movs	r1, #90	; 0x5a
 8002898:	2000      	movs	r0, #0
 800289a:	f7fe fde1 	bl	8001460 <Gui_StrCenter>
			Gui_StrCenter(0, 120, RED, BLUE, "2018112630  GaoZhichao", 16, 1);   //居中显示
 800289e:	2301      	movs	r3, #1
 80028a0:	9302      	str	r3, [sp, #8]
 80028a2:	2310      	movs	r3, #16
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	4b7b      	ldr	r3, [pc, #492]	; (8002a94 <StartUpdateTask+0x7fc>)
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	231f      	movs	r3, #31
 80028ac:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80028b0:	2178      	movs	r1, #120	; 0x78
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe fdd4 	bl	8001460 <Gui_StrCenter>
			Gui_StrCenter(0, 150, RED, BLUE, "2018112657  YuanHuajun", 16, 1);  //居中显示
 80028b8:	2301      	movs	r3, #1
 80028ba:	9302      	str	r3, [sp, #8]
 80028bc:	2310      	movs	r3, #16
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	4b75      	ldr	r3, [pc, #468]	; (8002a98 <StartUpdateTask+0x800>)
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	231f      	movs	r3, #31
 80028c6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80028ca:	2196      	movs	r1, #150	; 0x96
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7fe fdc7 	bl	8001460 <Gui_StrCenter>
			Gui_StrCenter(0, 180, RED, BLUE, "2018112721  AiErken", 16, 1);   //居中显示
 80028d2:	2301      	movs	r3, #1
 80028d4:	9302      	str	r3, [sp, #8]
 80028d6:	2310      	movs	r3, #16
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	4b70      	ldr	r3, [pc, #448]	; (8002a9c <StartUpdateTask+0x804>)
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	231f      	movs	r3, #31
 80028e0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80028e4:	21b4      	movs	r1, #180	; 0xb4
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe fdba 	bl	8001460 <Gui_StrCenter>
		}
		// 获取按键状态
		key_state = key_scan();
 80028ec:	f7ff f810 	bl	8001910 <key_scan>
 80028f0:	4603      	mov	r3, r0
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <StartUpdateTask+0x808>)
 80028f6:	701a      	strb	r2, [r3, #0]
		if (key_state == 1) {
 80028f8:	4b69      	ldr	r3, [pc, #420]	; (8002aa0 <StartUpdateTask+0x808>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d14e      	bne.n	800299e <StartUpdateTask+0x706>
			if (display_choose == 2) {
 8002900:	4b60      	ldr	r3, [pc, #384]	; (8002a84 <StartUpdateTask+0x7ec>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d118      	bne.n	800293a <StartUpdateTask+0x6a2>
				Show_Str(0, 150 + (choose_setting - 1) * 60, RED, WHITE, "   ",
 8002908:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800290c:	3b01      	subs	r3, #1
 800290e:	b29b      	uxth	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	b29b      	uxth	r3, r3
 800291a:	3396      	adds	r3, #150	; 0x96
 800291c:	b299      	uxth	r1, r3
 800291e:	2300      	movs	r3, #0
 8002920:	9302      	str	r3, [sp, #8]
 8002922:	2310      	movs	r3, #16
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	4b5f      	ldr	r3, [pc, #380]	; (8002aa4 <StartUpdateTask+0x80c>)
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800292e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe fcc2 	bl	80012bc <Show_Str>
 8002938:	e01b      	b.n	8002972 <StartUpdateTask+0x6da>
						16, 0);
			} else if (display_choose == 0) {
 800293a:	4b52      	ldr	r3, [pc, #328]	; (8002a84 <StartUpdateTask+0x7ec>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d117      	bne.n	8002972 <StartUpdateTask+0x6da>
				Show_Str(30, 90 + (choose - 1) * 30, RED, WHITE, "   ", 16, 0);
 8002942:	4b59      	ldr	r3, [pc, #356]	; (8002aa8 <StartUpdateTask+0x810>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3b01      	subs	r3, #1
 8002948:	b29b      	uxth	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	b29b      	uxth	r3, r3
 8002954:	335a      	adds	r3, #90	; 0x5a
 8002956:	b299      	uxth	r1, r3
 8002958:	2300      	movs	r3, #0
 800295a:	9302      	str	r3, [sp, #8]
 800295c:	2310      	movs	r3, #16
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <StartUpdateTask+0x80c>)
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002968:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800296c:	201e      	movs	r0, #30
 800296e:	f7fe fca5 	bl	80012bc <Show_Str>
			}
			choose--;
 8002972:	4b4d      	ldr	r3, [pc, #308]	; (8002aa8 <StartUpdateTask+0x810>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3b01      	subs	r3, #1
 8002978:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <StartUpdateTask+0x810>)
 800297a:	6013      	str	r3, [r2, #0]
			if (choose <= 0)
 800297c:	4b4a      	ldr	r3, [pc, #296]	; (8002aa8 <StartUpdateTask+0x810>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	dc02      	bgt.n	800298a <StartUpdateTask+0x6f2>
				choose = 3;
 8002984:	4b48      	ldr	r3, [pc, #288]	; (8002aa8 <StartUpdateTask+0x810>)
 8002986:	2203      	movs	r2, #3
 8002988:	601a      	str	r2, [r3, #0]
			choose_setting = (choose_setting == 1) ? 0 : 1;
 800298a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800298e:	2b01      	cmp	r3, #1
 8002990:	bf14      	ite	ne
 8002992:	2301      	movne	r3, #1
 8002994:	2300      	moveq	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800299c:	e09d      	b.n	8002ada <StartUpdateTask+0x842>
		} else if (key_state == 2) {
 800299e:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <StartUpdateTask+0x808>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d14e      	bne.n	8002a44 <StartUpdateTask+0x7ac>
			if (display_choose == 2) {
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <StartUpdateTask+0x7ec>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d118      	bne.n	80029e0 <StartUpdateTask+0x748>
				Show_Str(0, 150 + (choose_setting - 1) * 60, RED, WHITE, "   ",
 80029ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3396      	adds	r3, #150	; 0x96
 80029c2:	b299      	uxth	r1, r3
 80029c4:	2300      	movs	r3, #0
 80029c6:	9302      	str	r3, [sp, #8]
 80029c8:	2310      	movs	r3, #16
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <StartUpdateTask+0x80c>)
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fe fc6f 	bl	80012bc <Show_Str>
 80029de:	e01b      	b.n	8002a18 <StartUpdateTask+0x780>
						16, 0);
			} else if (display_choose == 0) {
 80029e0:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <StartUpdateTask+0x7ec>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d117      	bne.n	8002a18 <StartUpdateTask+0x780>
				Show_Str(30, 90 + (choose - 1) * 30, RED, WHITE, "   ", 16, 0);
 80029e8:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <StartUpdateTask+0x810>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	335a      	adds	r3, #90	; 0x5a
 80029fc:	b299      	uxth	r1, r3
 80029fe:	2300      	movs	r3, #0
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	2310      	movs	r3, #16
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <StartUpdateTask+0x80c>)
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a0e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a12:	201e      	movs	r0, #30
 8002a14:	f7fe fc52 	bl	80012bc <Show_Str>
			}
			choose++;
 8002a18:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <StartUpdateTask+0x810>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <StartUpdateTask+0x810>)
 8002a20:	6013      	str	r3, [r2, #0]
			if (choose > 3)
 8002a22:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <StartUpdateTask+0x810>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	dd02      	ble.n	8002a30 <StartUpdateTask+0x798>
				choose = 1;
 8002a2a:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <StartUpdateTask+0x810>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
			choose_setting = (choose_setting == 1) ? 0 : 1;
 8002a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002a42:	e04a      	b.n	8002ada <StartUpdateTask+0x842>
		} else if ((key_state == 3 || key_state == 4) && display_choose == 0) {
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <StartUpdateTask+0x808>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d003      	beq.n	8002a54 <StartUpdateTask+0x7bc>
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <StartUpdateTask+0x808>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d12f      	bne.n	8002ab4 <StartUpdateTask+0x81c>
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <StartUpdateTask+0x7ec>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d12b      	bne.n	8002ab4 <StartUpdateTask+0x81c>
			// comfirm
			display_choose = choose;
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <StartUpdateTask+0x810>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <StartUpdateTask+0x7ec>)
 8002a64:	701a      	strb	r2, [r3, #0]
			if (display_choose == 1) {
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <StartUpdateTask+0x7ec>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d105      	bne.n	8002a7a <StartUpdateTask+0x7e2>
				show_board = 1;
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <StartUpdateTask+0x814>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
				game_state = GAME_INIT;
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <StartUpdateTask+0x818>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
			}
			LCD_Clear(WHITE);
 8002a7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a7e:	f000 fad3 	bl	8003028 <LCD_Clear>
 8002a82:	e02a      	b.n	8002ada <StartUpdateTask+0x842>
 8002a84:	200000c1 	.word	0x200000c1
 8002a88:	08008fac 	.word	0x08008fac
 8002a8c:	0800908c 	.word	0x0800908c
 8002a90:	08009098 	.word	0x08009098
 8002a94:	080090b0 	.word	0x080090b0
 8002a98:	080090c8 	.word	0x080090c8
 8002a9c:	080090e0 	.word	0x080090e0
 8002aa0:	200000c2 	.word	0x200000c2
 8002aa4:	080090f4 	.word	0x080090f4
 8002aa8:	2000001c 	.word	0x2000001c
 8002aac:	20000020 	.word	0x20000020
 8002ab0:	20000231 	.word	0x20000231
		} else if (key_state == 5
 8002ab4:	4b32      	ldr	r3, [pc, #200]	; (8002b80 <StartUpdateTask+0x8e8>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d10e      	bne.n	8002ada <StartUpdateTask+0x842>
				&& (display_choose == 2 || display_choose == 3)) {
 8002abc:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <StartUpdateTask+0x8ec>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d003      	beq.n	8002acc <StartUpdateTask+0x834>
 8002ac4:	4b2f      	ldr	r3, [pc, #188]	; (8002b84 <StartUpdateTask+0x8ec>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d106      	bne.n	8002ada <StartUpdateTask+0x842>
			// press ka1
			display_choose = 0;
 8002acc:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <StartUpdateTask+0x8ec>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
			LCD_Clear(WHITE);
 8002ad2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ad6:	f000 faa7 	bl	8003028 <LCD_Clear>
		}
		// 读取可调变压器值
		HAL_ADC_Start(&hadc1);
 8002ada:	482b      	ldr	r0, [pc, #172]	; (8002b88 <StartUpdateTask+0x8f0>)
 8002adc:	f001 fa38 	bl	8003f50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8002ae0:	2164      	movs	r1, #100	; 0x64
 8002ae2:	4829      	ldr	r0, [pc, #164]	; (8002b88 <StartUpdateTask+0x8f0>)
 8002ae4:	f001 fae2 	bl	80040ac <HAL_ADC_PollForConversion>
		if (HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC)) {
 8002ae8:	4827      	ldr	r0, [pc, #156]	; (8002b88 <StartUpdateTask+0x8f0>)
 8002aea:	f001 fdbf 	bl	800466c <HAL_ADC_GetState>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f43f abfc 	beq.w	80022f2 <StartUpdateTask+0x5a>
			val0 = HAL_ADC_GetValue(&hadc1);
 8002afa:	4823      	ldr	r0, [pc, #140]	; (8002b88 <StartUpdateTask+0x8f0>)
 8002afc:	f001 fbdc 	bl	80042b8 <HAL_ADC_GetValue>
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24
			x = val0 * 3.3 / 4096;
 8002b02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b04:	f7fd fd92 	bl	800062c <__aeabi_ui2d>
 8002b08:	a319      	add	r3, pc, #100	; (adr r3, 8002b70 <StartUpdateTask+0x8d8>)
 8002b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0e:	f7fd fe07 	bl	8000720 <__aeabi_dmul>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <StartUpdateTask+0x8f4>)
 8002b20:	f7fd ff28 	bl	8000974 <__aeabi_ddiv>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f7fe f80a 	bl	8000b44 <__aeabi_d2f>
 8002b30:	4603      	mov	r3, r0
 8002b32:	623b      	str	r3, [r7, #32]
			float get = ((x * 100)) / 3.2;
 8002b34:	4916      	ldr	r1, [pc, #88]	; (8002b90 <StartUpdateTask+0x8f8>)
 8002b36:	6a38      	ldr	r0, [r7, #32]
 8002b38:	f7fd fb82 	bl	8000240 <__aeabi_fmul>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fd96 	bl	8000670 <__aeabi_f2d>
 8002b44:	a30c      	add	r3, pc, #48	; (adr r3, 8002b78 <StartUpdateTask+0x8e0>)
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f7fd ff13 	bl	8000974 <__aeabi_ddiv>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	f7fd fff5 	bl	8000b44 <__aeabi_d2f>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	61bb      	str	r3, [r7, #24]
			val_input = ((int) get);
 8002b5e:	69b8      	ldr	r0, [r7, #24]
 8002b60:	f7fe f840 	bl	8000be4 <__aeabi_f2iz>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <StartUpdateTask+0x8fc>)
 8002b68:	6013      	str	r3, [r2, #0]
		if (display_choose == 0) {
 8002b6a:	f7ff bbc2 	b.w	80022f2 <StartUpdateTask+0x5a>
 8002b6e:	bf00      	nop
 8002b70:	66666666 	.word	0x66666666
 8002b74:	400a6666 	.word	0x400a6666
 8002b78:	9999999a 	.word	0x9999999a
 8002b7c:	40099999 	.word	0x40099999
 8002b80:	200000c2 	.word	0x200000c2
 8002b84:	200000c1 	.word	0x200000c1
 8002b88:	2000127c 	.word	0x2000127c
 8002b8c:	40b00000 	.word	0x40b00000
 8002b90:	42c80000 	.word	0x42c80000
 8002b94:	2000022c 	.word	0x2000022c

08002b98 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08e      	sub	sp, #56	; 0x38
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002b9e:	f107 031c 	add.w	r3, r7, #28
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	609a      	str	r2, [r3, #8]
 8002baa:	60da      	str	r2, [r3, #12]
 8002bac:	611a      	str	r2, [r3, #16]
 8002bae:	615a      	str	r2, [r3, #20]
 8002bb0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8002bb2:	463b      	mov	r3, r7
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
 8002bc0:	615a      	str	r2, [r3, #20]
 8002bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002bc4:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002bc6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002bca:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002bcc:	4b2e      	ldr	r3, [pc, #184]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002bce:	4a2f      	ldr	r2, [pc, #188]	; (8002c8c <MX_FSMC_Init+0xf4>)
 8002bd0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 8002bd2:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002bd4:	2206      	movs	r2, #6
 8002bd6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002bd8:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002bde:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002be4:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002be6:	2210      	movs	r2, #16
 8002be8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002bf6:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002bfc:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002c02:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002c04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8002c28:	230f      	movs	r3, #15
 8002c2a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 8002c2c:	230f      	movs	r3, #15
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8002c34:	2310      	movs	r3, #16
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8002c38:	2311      	movs	r3, #17
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8002c44:	230f      	movs	r3, #15
 8002c46:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8002c50:	2310      	movs	r3, #16
 8002c52:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8002c54:	2311      	movs	r3, #17
 8002c56:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8002c5c:	463a      	mov	r2, r7
 8002c5e:	f107 031c 	add.w	r3, r7, #28
 8002c62:	4619      	mov	r1, r3
 8002c64:	4808      	ldr	r0, [pc, #32]	; (8002c88 <MX_FSMC_Init+0xf0>)
 8002c66:	f002 fe53 	bl	8005910 <HAL_SRAM_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8002c70:	f000 fcc4 	bl	80035fc <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <MX_FSMC_Init+0xf8>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	4a05      	ldr	r2, [pc, #20]	; (8002c90 <MX_FSMC_Init+0xf8>)
 8002c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c7e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002c80:	bf00      	nop
 8002c82:	3738      	adds	r7, #56	; 0x38
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20002260 	.word	0x20002260
 8002c8c:	a0000104 	.word	0xa0000104
 8002c90:	40010000 	.word	0x40010000

08002c94 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9a:	f107 0308 	add.w	r3, r7, #8
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_FSMC_MspInit+0x94>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d136      	bne.n	8002d1e <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_FSMC_MspInit+0x94>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <HAL_FSMC_MspInit+0x98>)
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <HAL_FSMC_MspInit+0x98>)
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc0:	6153      	str	r3, [r2, #20]
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_FSMC_MspInit+0x98>)
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8002cce:	f241 0301 	movw	r3, #4097	; 0x1001
 8002cd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cdc:	f107 0308 	add.w	r3, r7, #8
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4813      	ldr	r0, [pc, #76]	; (8002d30 <HAL_FSMC_MspInit+0x9c>)
 8002ce4:	f001 fe52 	bl	800498c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002ce8:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002cec:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cf6:	f107 0308 	add.w	r3, r7, #8
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	480d      	ldr	r0, [pc, #52]	; (8002d34 <HAL_FSMC_MspInit+0xa0>)
 8002cfe:	f001 fe45 	bl	800498c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002d02:	f24c 7333 	movw	r3, #50995	; 0xc733
 8002d06:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d10:	f107 0308 	add.w	r3, r7, #8
 8002d14:	4619      	mov	r1, r3
 8002d16:	4808      	ldr	r0, [pc, #32]	; (8002d38 <HAL_FSMC_MspInit+0xa4>)
 8002d18:	f001 fe38 	bl	800498c <HAL_GPIO_Init>
 8002d1c:	e000      	b.n	8002d20 <HAL_FSMC_MspInit+0x8c>
    return;
 8002d1e:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200004e8 	.word	0x200004e8
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40012000 	.word	0x40012000
 8002d34:	40011800 	.word	0x40011800
 8002d38:	40011400 	.word	0x40011400

08002d3c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002d44:	f7ff ffa6 	bl	8002c94 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d56:	f107 0318 	add.w	r3, r7, #24
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d64:	4b65      	ldr	r3, [pc, #404]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	4a64      	ldr	r2, [pc, #400]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6e:	6193      	str	r3, [r2, #24]
 8002d70:	4b62      	ldr	r3, [pc, #392]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7c:	4b5f      	ldr	r3, [pc, #380]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	4a5e      	ldr	r2, [pc, #376]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	6193      	str	r3, [r2, #24]
 8002d88:	4b5c      	ldr	r3, [pc, #368]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d94:	4b59      	ldr	r3, [pc, #356]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	4a58      	ldr	r2, [pc, #352]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002d9a:	f043 0308 	orr.w	r3, r3, #8
 8002d9e:	6193      	str	r3, [r2, #24]
 8002da0:	4b56      	ldr	r3, [pc, #344]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dac:	4b53      	ldr	r3, [pc, #332]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4a52      	ldr	r2, [pc, #328]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db6:	6193      	str	r3, [r2, #24]
 8002db8:	4b50      	ldr	r3, [pc, #320]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dc4:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	4a4c      	ldr	r2, [pc, #304]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dce:	6193      	str	r3, [r2, #24]
 8002dd0:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ddc:	4b47      	ldr	r3, [pc, #284]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	4a46      	ldr	r2, [pc, #280]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002de2:	f043 0320 	orr.w	r3, r3, #32
 8002de6:	6193      	str	r3, [r2, #24]
 8002de8:	4b44      	ldr	r3, [pc, #272]	; (8002efc <MX_GPIO_Init+0x1ac>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002df4:	2200      	movs	r2, #0
 8002df6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002dfa:	4841      	ldr	r0, [pc, #260]	; (8002f00 <MX_GPIO_Init+0x1b0>)
 8002dfc:	f001 ff71 	bl	8004ce2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8002e00:	2200      	movs	r2, #0
 8002e02:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002e06:	483f      	ldr	r0, [pc, #252]	; (8002f04 <MX_GPIO_Init+0x1b4>)
 8002e08:	f001 ff6b 	bl	8004ce2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002e12:	483d      	ldr	r0, [pc, #244]	; (8002f08 <MX_GPIO_Init+0x1b8>)
 8002e14:	f001 ff65 	bl	8004ce2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2130      	movs	r1, #48	; 0x30
 8002e1c:	483b      	ldr	r0, [pc, #236]	; (8002f0c <MX_GPIO_Init+0x1bc>)
 8002e1e:	f001 ff60 	bl	8004ce2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEE_GPIO_Port, BEE_Pin, GPIO_PIN_RESET);
 8002e22:	2200      	movs	r2, #0
 8002e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e28:	4839      	ldr	r0, [pc, #228]	; (8002f10 <MX_GPIO_Init+0x1c0>)
 8002e2a:	f001 ff5a 	bl	8004ce2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e32:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e34:	2301      	movs	r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e40:	f107 0318 	add.w	r3, r7, #24
 8002e44:	4619      	mov	r1, r3
 8002e46:	482e      	ldr	r0, [pc, #184]	; (8002f00 <MX_GPIO_Init+0x1b0>)
 8002e48:	f001 fda0 	bl	800498c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8;
 8002e4c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8002e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e52:	2301      	movs	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	f107 0318 	add.w	r3, r7, #24
 8002e62:	4619      	mov	r1, r3
 8002e64:	4827      	ldr	r0, [pc, #156]	; (8002f04 <MX_GPIO_Init+0x1b4>)
 8002e66:	f001 fd91 	bl	800498c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002e6a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e70:	2301      	movs	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e7c:	f107 0318 	add.w	r3, r7, #24
 8002e80:	4619      	mov	r1, r3
 8002e82:	4821      	ldr	r0, [pc, #132]	; (8002f08 <MX_GPIO_Init+0x1b8>)
 8002e84:	f001 fd82 	bl	800498c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e88:	2330      	movs	r3, #48	; 0x30
 8002e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e94:	2302      	movs	r3, #2
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e98:	f107 0318 	add.w	r3, r7, #24
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	481b      	ldr	r0, [pc, #108]	; (8002f0c <MX_GPIO_Init+0x1bc>)
 8002ea0:	f001 fd74 	bl	800498c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = KB3_Pin|KB4_Pin;
 8002ea4:	23c0      	movs	r3, #192	; 0xc0
 8002ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eac:	2301      	movs	r3, #1
 8002eae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eb0:	f107 0318 	add.w	r3, r7, #24
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4814      	ldr	r0, [pc, #80]	; (8002f08 <MX_GPIO_Init+0x1b8>)
 8002eb8:	f001 fd68 	bl	800498c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEE_Pin;
 8002ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BEE_GPIO_Port, &GPIO_InitStruct);
 8002ece:	f107 0318 	add.w	r3, r7, #24
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	480e      	ldr	r0, [pc, #56]	; (8002f10 <MX_GPIO_Init+0x1c0>)
 8002ed6:	f001 fd59 	bl	800498c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KB1_Pin|KB2_Pin;
 8002eda:	2303      	movs	r3, #3
 8002edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ee6:	f107 0318 	add.w	r3, r7, #24
 8002eea:	4619      	mov	r1, r3
 8002eec:	4809      	ldr	r0, [pc, #36]	; (8002f14 <MX_GPIO_Init+0x1c4>)
 8002eee:	f001 fd4d 	bl	800498c <HAL_GPIO_Init>

}
 8002ef2:	bf00      	nop
 8002ef4:	3728      	adds	r7, #40	; 0x28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40011c00 	.word	0x40011c00
 8002f04:	40010800 	.word	0x40010800
 8002f08:	40011400 	.word	0x40011400
 8002f0c:	40012000 	.word	0x40012000
 8002f10:	40010c00 	.word	0x40010c00
 8002f14:	40011800 	.word	0x40011800

08002f18 <delay_us>:
//画笔颜色,背景颜色
u16 POINT_COLOR = 0x0000,BACK_COLOR = 0xFFFF;
u16 DeviceCode;	 

void delay_us(uint32_t us)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t delay = (HAL_RCC_GetHCLKFreq()/4000000 * us);
 8002f20:	f002 fada 	bl	80054d8 <HAL_RCC_GetHCLKFreq>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <delay_us+0x34>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	0d1a      	lsrs	r2, r3, #20
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
 8002f34:	60fb      	str	r3, [r7, #12]
	while(delay--)
 8002f36:	bf00      	nop
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e5a      	subs	r2, r3, #1
 8002f3c:	60fa      	str	r2, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1fa      	bne.n	8002f38 <delay_us+0x20>
	{
		;
	}
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	431bde83 	.word	0x431bde83

08002f50 <LCD_WR_REG>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u16 data)
{ 
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	80fb      	strh	r3, [r7, #6]
#if LCD_USE8BIT_MODEL
	LCD->LCD_REG=(data<<8); //写入要写的寄存器序号
#else
	LCD->LCD_REG=data; //写入要写的寄存器序号
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <LCD_WR_REG+0x1c>)
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	8013      	strh	r3, [r2, #0]
#endif
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	6c0007fe 	.word	0x6c0007fe

08002f70 <LCD_WR_DATA>:
 * @function   :Write an 16-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u16 data)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
#if LCD_USE8BIT_MODEL
	LCD->LCD_RAM=(data<<8);//写入要写的数据
#else
	LCD->LCD_RAM=data; //写入要写的数据
 8002f7a:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <LCD_WR_DATA+0x1c>)
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	8053      	strh	r3, [r2, #2]
#endif
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	6c0007fe 	.word	0x6c0007fe

08002f90 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	460a      	mov	r2, r1
 8002f9a:	80fb      	strh	r3, [r7, #6]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	80bb      	strh	r3, [r7, #4]
#if LCD_USE8BIT_MODEL	
	LCD->LCD_REG = (LCD_Reg<<8);		//写入要写的寄存器序号
	LCD->LCD_RAM = (LCD_RegValue<<8);//写入数据
#else
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8002fa0:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <LCD_WriteReg+0x28>)
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 8002fa6:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <LCD_WriteReg+0x28>)
 8002fa8:	88bb      	ldrh	r3, [r7, #4]
 8002faa:	8053      	strh	r3, [r2, #2]
#endif
}	   
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	6c0007fe 	.word	0x6c0007fe

08002fbc <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <LCD_WriteRAM_Prepare+0x14>)
 8002fc2:	891b      	ldrh	r3, [r3, #8]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ffc3 	bl	8002f50 <LCD_WR_REG>
}	 
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200022a8 	.word	0x200022a8

08002fd4 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	80fb      	strh	r3, [r7, #6]
#if LCD_USE8BIT_MODEL	
	 LCD->LCD_RAM = Data;
	 LCD->LCD_RAM = Data<<8;
#else
	 LCD->LCD_RAM = Data;
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <Lcd_WriteData_16Bit+0x1c>)
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	8053      	strh	r3, [r2, #2]
#endif
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	6c0007fe 	.word	0x6c0007fe

08002ff4 <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	460a      	mov	r2, r1
 8002ffe:	80fb      	strh	r3, [r7, #6]
 8003000:	4613      	mov	r3, r2
 8003002:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//设置光标位置
 8003004:	88ba      	ldrh	r2, [r7, #4]
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f9c4 	bl	8003398 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <LCD_DrawPoint+0x30>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ffdd 	bl	8002fd4 <Lcd_WriteData_16Bit>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200004ec 	.word	0x200004ec

08003028 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	80fb      	strh	r3, [r7, #6]
  unsigned int i; 
	u32 total_point=lcddev.width*lcddev.height;
 8003032:	4b13      	ldr	r3, [pc, #76]	; (8003080 <LCD_Clear+0x58>)
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <LCD_Clear+0x58>)
 800303a:	885b      	ldrh	r3, [r3, #2]
 800303c:	fb03 f302 	mul.w	r3, r3, r2
 8003040:	60bb      	str	r3, [r7, #8]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <LCD_Clear+0x58>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <LCD_Clear+0x58>)
 800304c:	885b      	ldrh	r3, [r3, #2]
 800304e:	3b01      	subs	r3, #1
 8003050:	b29b      	uxth	r3, r3
 8003052:	2100      	movs	r1, #0
 8003054:	2000      	movs	r0, #0
 8003056:	f000 f94d 	bl	80032f4 <LCD_SetWindows>
	for(i=0;i<total_point;i++)
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	e005      	b.n	800306c <LCD_Clear+0x44>
	{ 
#if LCD_USE8BIT_MODEL	
		LCD->LCD_RAM = Color;
		LCD->LCD_RAM = Color<<8;
#else
		LCD->LCD_RAM = Color;
 8003060:	4a08      	ldr	r2, [pc, #32]	; (8003084 <LCD_Clear+0x5c>)
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	8053      	strh	r3, [r2, #2]
	for(i=0;i<total_point;i++)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3301      	adds	r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	429a      	cmp	r2, r3
 8003072:	d3f5      	bcc.n	8003060 <LCD_Clear+0x38>
#endif
	}
} 
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200022a8 	.word	0x200022a8
 8003084:	6c0007fe 	.word	0x6c0007fe

08003088 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void LCD_Init(void)
{  
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
//	LCD_RST=0;
//	HAL_Delay(100);
//	LCD_RST=1;
//	HAL_Delay(100);
	
	LCD_RST_OFF;
 800308c:	2200      	movs	r2, #0
 800308e:	2120      	movs	r1, #32
 8003090:	4897      	ldr	r0, [pc, #604]	; (80032f0 <LCD_Init+0x268>)
 8003092:	f001 fe26 	bl	8004ce2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003096:	2064      	movs	r0, #100	; 0x64
 8003098:	f000 fe4c 	bl	8003d34 <HAL_Delay>
	LCD_RST_ON;
 800309c:	2201      	movs	r2, #1
 800309e:	2120      	movs	r1, #32
 80030a0:	4893      	ldr	r0, [pc, #588]	; (80032f0 <LCD_Init+0x268>)
 80030a2:	f001 fe1e 	bl	8004ce2 <HAL_GPIO_WritePin>
	HAL_Delay(100);	
 80030a6:	2064      	movs	r0, #100	; 0x64
 80030a8:	f000 fe44 	bl	8003d34 <HAL_Delay>
	
	
//*************2.4inch ILI9341初始化**********//
	LCD_WR_REG(0xCF);  
 80030ac:	20cf      	movs	r0, #207	; 0xcf
 80030ae:	f7ff ff4f 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7ff ff5c 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0xD9); //0xC1 
 80030b8:	20d9      	movs	r0, #217	; 0xd9
 80030ba:	f7ff ff59 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0X30); 
 80030be:	2030      	movs	r0, #48	; 0x30
 80030c0:	f7ff ff56 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xED);  
 80030c4:	20ed      	movs	r0, #237	; 0xed
 80030c6:	f7ff ff43 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 80030ca:	2064      	movs	r0, #100	; 0x64
 80030cc:	f7ff ff50 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x03); 
 80030d0:	2003      	movs	r0, #3
 80030d2:	f7ff ff4d 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0X12); 
 80030d6:	2012      	movs	r0, #18
 80030d8:	f7ff ff4a 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0X81); 
 80030dc:	2081      	movs	r0, #129	; 0x81
 80030de:	f7ff ff47 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);  
 80030e2:	20e8      	movs	r0, #232	; 0xe8
 80030e4:	f7ff ff34 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 80030e8:	2085      	movs	r0, #133	; 0x85
 80030ea:	f7ff ff41 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 80030ee:	2010      	movs	r0, #16
 80030f0:	f7ff ff3e 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A); 
 80030f4:	207a      	movs	r0, #122	; 0x7a
 80030f6:	f7ff ff3b 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);  
 80030fa:	20cb      	movs	r0, #203	; 0xcb
 80030fc:	f7ff ff28 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 8003100:	2039      	movs	r0, #57	; 0x39
 8003102:	f7ff ff35 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C); 
 8003106:	202c      	movs	r0, #44	; 0x2c
 8003108:	f7ff ff32 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800310c:	2000      	movs	r0, #0
 800310e:	f7ff ff2f 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x34); 
 8003112:	2034      	movs	r0, #52	; 0x34
 8003114:	f7ff ff2c 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 8003118:	2002      	movs	r0, #2
 800311a:	f7ff ff29 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);  
 800311e:	20f7      	movs	r0, #247	; 0xf7
 8003120:	f7ff ff16 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 8003124:	2020      	movs	r0, #32
 8003126:	f7ff ff23 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);  
 800312a:	20ea      	movs	r0, #234	; 0xea
 800312c:	f7ff ff10 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8003130:	2000      	movs	r0, #0
 8003132:	f7ff ff1d 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8003136:	2000      	movs	r0, #0
 8003138:	f7ff ff1a 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control 
 800313c:	20c0      	movs	r0, #192	; 0xc0
 800313e:	f7ff ff07 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 8003142:	201b      	movs	r0, #27
 8003144:	f7ff ff14 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control 
 8003148:	20c1      	movs	r0, #193	; 0xc1
 800314a:	f7ff ff01 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] 0x01
 800314e:	2012      	movs	r0, #18
 8003150:	f7ff ff0e 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control 
 8003154:	20c5      	movs	r0, #197	; 0xc5
 8003156:	f7ff fefb 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 	 //30
 800315a:	2008      	movs	r0, #8
 800315c:	f7ff ff08 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x26); 	 //30
 8003160:	2026      	movs	r0, #38	; 0x26
 8003162:	f7ff ff05 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2 
 8003166:	20c7      	movs	r0, #199	; 0xc7
 8003168:	f7ff fef2 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 800316c:	20b7      	movs	r0, #183	; 0xb7
 800316e:	f7ff feff 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control 
 8003172:	2036      	movs	r0, #54	; 0x36
 8003174:	f7ff feec 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 8003178:	2008      	movs	r0, #8
 800317a:	f7ff fef9 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);   
 800317e:	203a      	movs	r0, #58	; 0x3a
 8003180:	f7ff fee6 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 8003184:	2055      	movs	r0, #85	; 0x55
 8003186:	f7ff fef3 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);   
 800318a:	20b1      	movs	r0, #177	; 0xb1
 800318c:	f7ff fee0 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 8003190:	2000      	movs	r0, #0
 8003192:	f7ff feed 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 8003196:	201a      	movs	r0, #26
 8003198:	f7ff feea 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control 
 800319c:	20b6      	movs	r0, #182	; 0xb6
 800319e:	f7ff fed7 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 80031a2:	200a      	movs	r0, #10
 80031a4:	f7ff fee4 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2); 
 80031a8:	20a2      	movs	r0, #162	; 0xa2
 80031aa:	f7ff fee1 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80031ae:	20f2      	movs	r0, #242	; 0xf2
 80031b0:	f7ff fece 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7ff fedb 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected 
 80031ba:	2026      	movs	r0, #38	; 0x26
 80031bc:	f7ff fec8 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 80031c0:	2001      	movs	r0, #1
 80031c2:	f7ff fed5 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma 
 80031c6:	20e0      	movs	r0, #224	; 0xe0
 80031c8:	f7ff fec2 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 80031cc:	200f      	movs	r0, #15
 80031ce:	f7ff fecf 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x1D); 
 80031d2:	201d      	movs	r0, #29
 80031d4:	f7ff fecc 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 80031d8:	201a      	movs	r0, #26
 80031da:	f7ff fec9 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A); 
 80031de:	200a      	movs	r0, #10
 80031e0:	f7ff fec6 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D); 
 80031e4:	200d      	movs	r0, #13
 80031e6:	f7ff fec3 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 80031ea:	2007      	movs	r0, #7
 80031ec:	f7ff fec0 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x49); 
 80031f0:	2049      	movs	r0, #73	; 0x49
 80031f2:	f7ff febd 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0X66); 
 80031f6:	2066      	movs	r0, #102	; 0x66
 80031f8:	f7ff feba 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x3B); 
 80031fc:	203b      	movs	r0, #59	; 0x3b
 80031fe:	f7ff feb7 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 8003202:	2007      	movs	r0, #7
 8003204:	f7ff feb4 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x11); 
 8003208:	2011      	movs	r0, #17
 800320a:	f7ff feb1 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x01); 
 800320e:	2001      	movs	r0, #1
 8003210:	f7ff feae 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x09); 
 8003214:	2009      	movs	r0, #9
 8003216:	f7ff feab 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x05); 
 800321a:	2005      	movs	r0, #5
 800321c:	f7ff fea8 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x04); 		 
 8003220:	2004      	movs	r0, #4
 8003222:	f7ff fea5 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma 
 8003226:	20e1      	movs	r0, #225	; 0xe1
 8003228:	f7ff fe92 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800322c:	2000      	movs	r0, #0
 800322e:	f7ff fe9f 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x18); 
 8003232:	2018      	movs	r0, #24
 8003234:	f7ff fe9c 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x1D); 
 8003238:	201d      	movs	r0, #29
 800323a:	f7ff fe99 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 800323e:	2002      	movs	r0, #2
 8003240:	f7ff fe96 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 8003244:	200f      	movs	r0, #15
 8003246:	f7ff fe93 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x04); 
 800324a:	2004      	movs	r0, #4
 800324c:	f7ff fe90 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x36); 
 8003250:	2036      	movs	r0, #54	; 0x36
 8003252:	f7ff fe8d 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x13); 
 8003256:	2013      	movs	r0, #19
 8003258:	f7ff fe8a 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x4C); 
 800325c:	204c      	movs	r0, #76	; 0x4c
 800325e:	f7ff fe87 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 8003262:	2007      	movs	r0, #7
 8003264:	f7ff fe84 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x13); 
 8003268:	2013      	movs	r0, #19
 800326a:	f7ff fe81 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 800326e:	200f      	movs	r0, #15
 8003270:	f7ff fe7e 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x2E); 
 8003274:	202e      	movs	r0, #46	; 0x2e
 8003276:	f7ff fe7b 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x2F); 
 800327a:	202f      	movs	r0, #47	; 0x2f
 800327c:	f7ff fe78 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x05); 
 8003280:	2005      	movs	r0, #5
 8003282:	f7ff fe75 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0x2B); 
 8003286:	202b      	movs	r0, #43	; 0x2b
 8003288:	f7ff fe62 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800328c:	2000      	movs	r0, #0
 800328e:	f7ff fe6f 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003292:	2000      	movs	r0, #0
 8003294:	f7ff fe6c 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8003298:	2001      	movs	r0, #1
 800329a:	f7ff fe69 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800329e:	203f      	movs	r0, #63	; 0x3f
 80032a0:	f7ff fe66 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0x2A); 
 80032a4:	202a      	movs	r0, #42	; 0x2a
 80032a6:	f7ff fe53 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7ff fe60 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7ff fe5d 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80032b6:	2000      	movs	r0, #0
 80032b8:	f7ff fe5a 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);	 
 80032bc:	20ef      	movs	r0, #239	; 0xef
 80032be:	f7ff fe57 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80032c2:	2011      	movs	r0, #17
 80032c4:	f7ff fe44 	bl	8002f50 <LCD_WR_REG>
	HAL_Delay(120);
 80032c8:	2078      	movs	r0, #120	; 0x78
 80032ca:	f000 fd33 	bl	8003d34 <HAL_Delay>
	LCD_WR_REG(0x29); //display on		
 80032ce:	2029      	movs	r0, #41	; 0x29
 80032d0:	f7ff fe3e 	bl	8002f50 <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);//设置LCD显示方向
 80032d4:	2002      	movs	r0, #2
 80032d6:	f000 f871 	bl	80033bc <LCD_direction>
	LCD_LED_ON;//点亮背光
 80032da:	2201      	movs	r2, #1
 80032dc:	2110      	movs	r1, #16
 80032de:	4804      	ldr	r0, [pc, #16]	; (80032f0 <LCD_Init+0x268>)
 80032e0:	f001 fcff 	bl	8004ce2 <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);//清全屏白色
 80032e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032e8:	f7ff fe9e 	bl	8003028 <LCD_Clear>
}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40012000 	.word	0x40012000

080032f4 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4604      	mov	r4, r0
 80032fc:	4608      	mov	r0, r1
 80032fe:	4611      	mov	r1, r2
 8003300:	461a      	mov	r2, r3
 8003302:	4623      	mov	r3, r4
 8003304:	80fb      	strh	r3, [r7, #6]
 8003306:	4603      	mov	r3, r0
 8003308:	80bb      	strh	r3, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	807b      	strh	r3, [r7, #2]
 800330e:	4613      	mov	r3, r2
 8003310:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <LCD_SetWindows+0xa0>)
 8003314:	899b      	ldrh	r3, [r3, #12]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fe1a 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	b29b      	uxth	r3, r3
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fe24 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	b29b      	uxth	r3, r3
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fe1e 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	b29b      	uxth	r3, r3
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fe18 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	b29b      	uxth	r3, r3
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fe12 	bl	8002f70 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <LCD_SetWindows+0xa0>)
 800334e:	89db      	ldrh	r3, [r3, #14]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fdfd 	bl	8002f50 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8003356:	88bb      	ldrh	r3, [r7, #4]
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	b29b      	uxth	r3, r3
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fe07 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 8003362:	88bb      	ldrh	r3, [r7, #4]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	b29b      	uxth	r3, r3
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fe01 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 800336e:	883b      	ldrh	r3, [r7, #0]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	b29b      	uxth	r3, r3
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fdfb 	bl	8002f70 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 800337a:	883b      	ldrh	r3, [r7, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	b29b      	uxth	r3, r3
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fdf5 	bl	8002f70 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//开始写入GRAM
 8003386:	f7ff fe19 	bl	8002fbc <LCD_WriteRAM_Prepare>
}   
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bd90      	pop	{r4, r7, pc}
 8003392:	bf00      	nop
 8003394:	200022a8 	.word	0x200022a8

08003398 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	460a      	mov	r2, r1
 80033a2:	80fb      	strh	r3, [r7, #6]
 80033a4:	4613      	mov	r3, r2
 80033a6:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 80033a8:	88bb      	ldrh	r3, [r7, #4]
 80033aa:	88fa      	ldrh	r2, [r7, #6]
 80033ac:	88b9      	ldrh	r1, [r7, #4]
 80033ae:	88f8      	ldrh	r0, [r7, #6]
 80033b0:	f7ff ffa0 	bl	80032f4 <LCD_SetWindows>
} 
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 80033c6:	4b28      	ldr	r3, [pc, #160]	; (8003468 <LCD_direction+0xac>)
 80033c8:	222a      	movs	r2, #42	; 0x2a
 80033ca:	819a      	strh	r2, [r3, #12]
			lcddev.setycmd=0x2B;
 80033cc:	4b26      	ldr	r3, [pc, #152]	; (8003468 <LCD_direction+0xac>)
 80033ce:	222b      	movs	r2, #43	; 0x2b
 80033d0:	81da      	strh	r2, [r3, #14]
			lcddev.wramcmd=0x2C;
 80033d2:	4b25      	ldr	r3, [pc, #148]	; (8003468 <LCD_direction+0xac>)
 80033d4:	222c      	movs	r2, #44	; 0x2c
 80033d6:	811a      	strh	r2, [r3, #8]
			lcddev.rramcmd=0x2E;
 80033d8:	4b23      	ldr	r3, [pc, #140]	; (8003468 <LCD_direction+0xac>)
 80033da:	222e      	movs	r2, #46	; 0x2e
 80033dc:	815a      	strh	r2, [r3, #10]
	switch(direction){		  
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d83b      	bhi.n	800345c <LCD_direction+0xa0>
 80033e4:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <LCD_direction+0x30>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	080033fd 	.word	0x080033fd
 80033f0:	08003415 	.word	0x08003415
 80033f4:	0800342d 	.word	0x0800342d
 80033f8:	08003445 	.word	0x08003445
		case 0:						 	 		
			lcddev.width=LCD_W;
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <LCD_direction+0xac>)
 80033fe:	22f0      	movs	r2, #240	; 0xf0
 8003400:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8003402:	4b19      	ldr	r3, [pc, #100]	; (8003468 <LCD_direction+0xac>)
 8003404:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003408:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3));
 800340a:	2108      	movs	r1, #8
 800340c:	2036      	movs	r0, #54	; 0x36
 800340e:	f7ff fdbf 	bl	8002f90 <LCD_WriteReg>
		break;
 8003412:	e024      	b.n	800345e <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <LCD_direction+0xac>)
 8003416:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800341a:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <LCD_direction+0xac>)
 800341e:	22f0      	movs	r2, #240	; 0xf0
 8003420:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6));
 8003422:	2168      	movs	r1, #104	; 0x68
 8003424:	2036      	movs	r0, #54	; 0x36
 8003426:	f7ff fdb3 	bl	8002f90 <LCD_WriteReg>
		break;
 800342a:	e018      	b.n	800345e <LCD_direction+0xa2>
		case 2:						 	 		
			lcddev.width=LCD_W;
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <LCD_direction+0xac>)
 800342e:	22f0      	movs	r2, #240	; 0xf0
 8003430:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <LCD_direction+0xac>)
 8003434:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003438:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<4)|(1<<6));
 800343a:	21d8      	movs	r1, #216	; 0xd8
 800343c:	2036      	movs	r0, #54	; 0x36
 800343e:	f7ff fda7 	bl	8002f90 <LCD_WriteReg>
		break;
 8003442:	e00c      	b.n	800345e <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <LCD_direction+0xac>)
 8003446:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800344a:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <LCD_direction+0xac>)
 800344e:	22f0      	movs	r2, #240	; 0xf0
 8003450:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5)|(1<<4));
 8003452:	21b8      	movs	r1, #184	; 0xb8
 8003454:	2036      	movs	r0, #54	; 0x36
 8003456:	f7ff fd9b 	bl	8002f90 <LCD_WriteReg>
		break;	
 800345a:	e000      	b.n	800345e <LCD_direction+0xa2>
		default:break;
 800345c:	bf00      	nop
	}		
}	 
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	200022a8 	.word	0x200022a8

0800346c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003470:	f000 fc2e 	bl	8003cd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003474:	f000 f81c 	bl	80034b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003478:	f7ff fc6a 	bl	8002d50 <MX_GPIO_Init>
	MX_FSMC_Init();
 800347c:	f7ff fb8c 	bl	8002b98 <MX_FSMC_Init>
	MX_USART1_UART_Init();
 8003480:	f000 fb8a 	bl	8003b98 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8003484:	f000 fb14 	bl	8003ab0 <MX_TIM3_Init>
	MX_ADC1_Init();
 8003488:	f7fe f81e 	bl	80014c8 <MX_ADC1_Init>
	MX_ADC2_Init();
 800348c:	f7fe f85a 	bl	8001544 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	LCD_Init();  //初始化LCD FSMC接口
 8003490:	f7ff fdfa 	bl	8003088 <LCD_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 8003494:	4805      	ldr	r0, [pc, #20]	; (80034ac <main+0x40>)
 8003496:	f002 fad7 	bl	8005a48 <HAL_TIM_Base_Start_IT>
	srand(5000);
 800349a:	f241 3088 	movw	r0, #5000	; 0x1388
 800349e:	f004 fbfb 	bl	8007c98 <srand>
	//music_play(1);
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 80034a2:	f7fe f91d 	bl	80016e0 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 80034a6:	f003 f876 	bl	8006596 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80034aa:	e7fe      	b.n	80034aa <main+0x3e>
 80034ac:	20002304 	.word	0x20002304

080034b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b096      	sub	sp, #88	; 0x58
 80034b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80034b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034ba:	2228      	movs	r2, #40	; 0x28
 80034bc:	2100      	movs	r1, #0
 80034be:	4618      	mov	r0, r3
 80034c0:	f004 fb87 	bl	8007bd2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80034c4:	f107 031c 	add.w	r3, r7, #28
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	60da      	str	r2, [r3, #12]
 80034e0:	611a      	str	r2, [r3, #16]
 80034e2:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80034ee:	2300      	movs	r3, #0
 80034f0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034f2:	2301      	movs	r3, #1
 80034f4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034f6:	2302      	movs	r3, #2
 80034f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034fe:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003500:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003504:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fc1a 	bl	8004d44 <HAL_RCC_OscConfig>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <SystemClock_Config+0x6a>
		Error_Handler();
 8003516:	f000 f871 	bl	80035fc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800351a:	230f      	movs	r3, #15
 800351c:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800351e:	2302      	movs	r3, #2
 8003520:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800352c:	2300      	movs	r3, #0
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003530:	f107 031c 	add.w	r3, r7, #28
 8003534:	2102      	movs	r1, #2
 8003536:	4618      	mov	r0, r3
 8003538:	f001 fe84 	bl	8005244 <HAL_RCC_ClockConfig>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <SystemClock_Config+0x96>
		Error_Handler();
 8003542:	f000 f85b 	bl	80035fc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003546:	2302      	movs	r3, #2
 8003548:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800354a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003550:	1d3b      	adds	r3, r7, #4
 8003552:	4618      	mov	r0, r3
 8003554:	f002 f840 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <SystemClock_Config+0xb2>
		Error_Handler();
 800355e:	f000 f84d 	bl	80035fc <Error_Handler>
	}
}
 8003562:	bf00      	nop
 8003564:	3758      	adds	r7, #88	; 0x58
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM8) {
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800357e:	f000 fbbd 	bl	8003cfc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim == &htim3) {
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a17      	ldr	r2, [pc, #92]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d126      	bne.n	80035d8 <HAL_TIM_PeriodElapsedCallback+0x6c>
		time1++;
 800358a:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	3301      	adds	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003594:	801a      	strh	r2, [r3, #0]
		time2++;
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	3301      	adds	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 80035a0:	801a      	strh	r2, [r3, #0]
		srand(time2);
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 fb76 	bl	8007c98 <srand>
		if (time1 == update_time) {
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80035ae:	881a      	ldrh	r2, [r3, #0]
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d105      	bne.n	80035c4 <HAL_TIM_PeriodElapsedCallback+0x58>
			time1 = 0;
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	801a      	strh	r2, [r3, #0]
			// check and update snake
			check_flag = 1;
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
		}
		if (time2 == 100) {
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	2b64      	cmp	r3, #100	; 0x64
 80035ca:	d105      	bne.n	80035d8 <HAL_TIM_PeriodElapsedCallback+0x6c>
			time2 = 0;
 80035cc:	4b07      	ldr	r3, [pc, #28]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	801a      	strh	r2, [r3, #0]
			time_update_flag = 1;
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
		}
	}
	/* USER CODE END Callback 1 */
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40013400 	.word	0x40013400
 80035e4:	20002304 	.word	0x20002304
 80035e8:	200004f0 	.word	0x200004f0
 80035ec:	200004f2 	.word	0x200004f2
 80035f0:	20000022 	.word	0x20000022
 80035f4:	200004ee 	.word	0x200004ee
 80035f8:	200004ef 	.word	0x200004ef

080035fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003600:	b672      	cpsid	i
}
 8003602:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003604:	e7fe      	b.n	8003604 <Error_Handler+0x8>
	...

08003608 <music_play>:
#include "music.h"
#include "gpio.h"

int t_num = 30;
int k_num = 3;
void music_play(unsigned char flag) {
 8003608:	b580      	push	{r7, lr}
 800360a:	b0ca      	sub	sp, #296	; 0x128
 800360c:	af00      	add	r7, sp, #0
 800360e:	4602      	mov	r2, r0
 8003610:	1dfb      	adds	r3, r7, #7
 8003612:	701a      	strb	r2, [r3, #0]
	unsigned int s1[] = {
 8003614:	4a5d      	ldr	r2, [pc, #372]	; (800378c <music_play+0x184>)
 8003616:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800361a:	4611      	mov	r1, r2
 800361c:	2288      	movs	r2, #136	; 0x88
 800361e:	4618      	mov	r0, r3
 8003620:	f004 fac9 	bl	8007bb6 <memcpy>
	so, mi, so, 0, so, mi,
	so, 0, so, mi, la, so, 0, so, mi,
	fa, 0, fa, re, 0, re, fa, 0, fa, re,
	so, fa, mi, re, mi, Do, 0, Do, 0 };
	unsigned int s2[] = { 18, 18, 9, 2, 9, 18, 9, 2, 9, 9, 9, 9, 2, 9, 18, 9, 2,
 8003624:	f107 030c 	add.w	r3, r7, #12
 8003628:	4a59      	ldr	r2, [pc, #356]	; (8003790 <music_play+0x188>)
 800362a:	4618      	mov	r0, r3
 800362c:	4611      	mov	r1, r2
 800362e:	2388      	movs	r3, #136	; 0x88
 8003630:	461a      	mov	r2, r3
 8003632:	f004 fac0 	bl	8007bb6 <memcpy>
			9, 9, 2, 9, 9, 2, 9, 18, 9, 9, 9, 9, 9, 9, 2, 9, 0 };
	int i, j, k;
	// get score sound
	if (flag == 1) {
 8003636:	1dfb      	adds	r3, r7, #7
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d120      	bne.n	8003680 <music_play+0x78>
		for (j = 0; j < 9 * 15; j++) {
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003644:	e017      	b.n	8003676 <music_play+0x6e>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8003646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800364a:	4852      	ldr	r0, [pc, #328]	; (8003794 <music_play+0x18c>)
 800364c:	f001 fb61 	bl	8004d12 <HAL_GPIO_TogglePin>
			for (k = 0; k < mi * 1; k++) {
 8003650:	2300      	movs	r3, #0
 8003652:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003656:	e004      	b.n	8003662 <music_play+0x5a>
 8003658:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800365c:	3301      	adds	r3, #1
 800365e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003662:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366a:	dbf5      	blt.n	8003658 <music_play+0x50>
		for (j = 0; j < 9 * 15; j++) {
 800366c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003670:	3301      	adds	r3, #1
 8003672:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003676:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800367a:	2b86      	cmp	r3, #134	; 0x86
 800367c:	dde3      	ble.n	8003646 <music_play+0x3e>
	} else {
		// stop
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	}

}
 800367e:	e07f      	b.n	8003780 <music_play+0x178>
	else if (flag == 2) {
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d138      	bne.n	80036fa <music_play+0xf2>
		i = 24;
 8003688:	2318      	movs	r3, #24
 800368a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		for (j = 0; j < s2[i] * 30; j++) {
 800368e:	2300      	movs	r3, #0
 8003690:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003694:	e021      	b.n	80036da <music_play+0xd2>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8003696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800369a:	483e      	ldr	r0, [pc, #248]	; (8003794 <music_play+0x18c>)
 800369c:	f001 fb39 	bl	8004d12 <HAL_GPIO_TogglePin>
			for (k = 0; k < s1[i] * 15; k++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036a6:	e004      	b.n	80036b2 <music_play+0xaa>
 80036a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036ac:	3301      	adds	r3, #1
 80036ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80036bc:	4413      	add	r3, r2
 80036be:	f853 2c94 	ldr.w	r2, [r3, #-148]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9a      	subs	r2, r3, r2
 80036c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d8eb      	bhi.n	80036a8 <music_play+0xa0>
		for (j = 0; j < s2[i] * 30; j++) {
 80036d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80036d4:	3301      	adds	r3, #1
 80036d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036da:	f107 030c 	add.w	r3, r7, #12
 80036de:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80036e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	461a      	mov	r2, r3
 80036f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d8ce      	bhi.n	8003696 <music_play+0x8e>
}
 80036f8:	e042      	b.n	8003780 <music_play+0x178>
	} else if (flag == 3) {
 80036fa:	1dfb      	adds	r3, r7, #7
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d138      	bne.n	8003774 <music_play+0x16c>
		i = 5;
 8003702:	2305      	movs	r3, #5
 8003704:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		for (j = 0; j < s2[i] * 30; j++) {
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800370e:	e021      	b.n	8003754 <music_play+0x14c>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8003710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003714:	481f      	ldr	r0, [pc, #124]	; (8003794 <music_play+0x18c>)
 8003716:	f001 fafc 	bl	8004d12 <HAL_GPIO_TogglePin>
			for (k = 0; k < s1[i] * 15; k++)
 800371a:	2300      	movs	r3, #0
 800371c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003720:	e004      	b.n	800372c <music_play+0x124>
 8003722:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003726:	3301      	adds	r3, #1
 8003728:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800372c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003736:	4413      	add	r3, r2
 8003738:	f853 2c94 	ldr.w	r2, [r3, #-148]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9a      	subs	r2, r3, r2
 8003742:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003746:	429a      	cmp	r2, r3
 8003748:	d8eb      	bhi.n	8003722 <music_play+0x11a>
		for (j = 0; j < s2[i] * 30; j++) {
 800374a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800374e:	3301      	adds	r3, #1
 8003750:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003754:	f107 030c 	add.w	r3, r7, #12
 8003758:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800375c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	461a      	mov	r2, r3
 800376a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800376e:	429a      	cmp	r2, r3
 8003770:	d8ce      	bhi.n	8003710 <music_play+0x108>
}
 8003772:	e005      	b.n	8003780 <music_play+0x178>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8003774:	2200      	movs	r2, #0
 8003776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800377a:	4806      	ldr	r0, [pc, #24]	; (8003794 <music_play+0x18c>)
 800377c:	f001 fab1 	bl	8004ce2 <HAL_GPIO_WritePin>
}
 8003780:	bf00      	nop
 8003782:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	080090f8 	.word	0x080090f8
 8003790:	08009180 	.word	0x08009180
 8003794:	40010c00 	.word	0x40010c00

08003798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800379e:	4b18      	ldr	r3, [pc, #96]	; (8003800 <HAL_MspInit+0x68>)
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	4a17      	ldr	r2, [pc, #92]	; (8003800 <HAL_MspInit+0x68>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6193      	str	r3, [r2, #24]
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_MspInit+0x68>)
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	4b12      	ldr	r3, [pc, #72]	; (8003800 <HAL_MspInit+0x68>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	4a11      	ldr	r2, [pc, #68]	; (8003800 <HAL_MspInit+0x68>)
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c0:	61d3      	str	r3, [r2, #28]
 80037c2:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <HAL_MspInit+0x68>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	210f      	movs	r1, #15
 80037d2:	f06f 0001 	mvn.w	r0, #1
 80037d6:	f001 f8ae 	bl	8004936 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_MspInit+0x6c>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <HAL_MspInit+0x6c>)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	40010000 	.word	0x40010000

08003808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08c      	sub	sp, #48	; 0x30
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority ,0);
 8003818:	2200      	movs	r2, #0
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	202c      	movs	r0, #44	; 0x2c
 800381e:	f001 f88a 	bl	8004936 <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8003822:	202c      	movs	r0, #44	; 0x2c
 8003824:	f001 f8a3 	bl	800496e <HAL_NVIC_EnableIRQ>

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8003828:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <HAL_InitTick+0x9c>)
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <HAL_InitTick+0x9c>)
 800382e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003832:	6193      	str	r3, [r2, #24]
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_InitTick+0x9c>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003840:	f107 0210 	add.w	r2, r7, #16
 8003844:	f107 0314 	add.w	r3, r7, #20
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f001 fe76 	bl	800553c <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003850:	f001 fe60 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 8003854:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003858:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <HAL_InitTick+0xa0>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	0c9b      	lsrs	r3, r3, #18
 8003860:	3b01      	subs	r3, #1
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <HAL_InitTick+0xa4>)
 8003866:	4a12      	ldr	r2, [pc, #72]	; (80038b0 <HAL_InitTick+0xa8>)
 8003868:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <HAL_InitTick+0xa4>)
 800386c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003870:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8003872:	4a0e      	ldr	r2, [pc, #56]	; (80038ac <HAL_InitTick+0xa4>)
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <HAL_InitTick+0xa4>)
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_InitTick+0xa4>)
 8003880:	2200      	movs	r2, #0
 8003882:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8003884:	4809      	ldr	r0, [pc, #36]	; (80038ac <HAL_InitTick+0xa4>)
 8003886:	f002 f890 	bl	80059aa <HAL_TIM_Base_Init>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8003890:	4806      	ldr	r0, [pc, #24]	; (80038ac <HAL_InitTick+0xa4>)
 8003892:	f002 f8d9 	bl	8005a48 <HAL_TIM_Base_Start_IT>
 8003896:	4603      	mov	r3, r0
 8003898:	e000      	b.n	800389c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
}
 800389c:	4618      	mov	r0, r3
 800389e:	3730      	adds	r7, #48	; 0x30
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	431bde83 	.word	0x431bde83
 80038ac:	200022bc 	.word	0x200022bc
 80038b0:	40013400 	.word	0x40013400

080038b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038b8:	e7fe      	b.n	80038b8 <NMI_Handler+0x4>

080038ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ba:	b480      	push	{r7}
 80038bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038be:	e7fe      	b.n	80038be <HardFault_Handler+0x4>

080038c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038c4:	e7fe      	b.n	80038c4 <MemManage_Handler+0x4>

080038c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ca:	e7fe      	b.n	80038ca <BusFault_Handler+0x4>

080038cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038d0:	e7fe      	b.n	80038d0 <UsageFault_Handler+0x4>

080038d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d2:	b480      	push	{r7}
 80038d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr
	...

080038e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80038e4:	4803      	ldr	r0, [pc, #12]	; (80038f4 <ADC1_2_IRQHandler+0x14>)
 80038e6:	f000 fcf3 	bl	80042d0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80038ea:	4803      	ldr	r0, [pc, #12]	; (80038f8 <ADC1_2_IRQHandler+0x18>)
 80038ec:	f000 fcf0 	bl	80042d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80038f0:	bf00      	nop
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	2000127c 	.word	0x2000127c
 80038f8:	2000124c 	.word	0x2000124c

080038fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003900:	4802      	ldr	r0, [pc, #8]	; (800390c <TIM3_IRQHandler+0x10>)
 8003902:	f002 f901 	bl	8005b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20002304 	.word	0x20002304

08003910 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <TIM8_UP_IRQHandler+0x10>)
 8003916:	f002 f8f7 	bl	8005b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	200022bc 	.word	0x200022bc

08003924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
	return 1;
 8003928:	2301      	movs	r3, #1
}
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <_kill>:

int _kill(int pid, int sig)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800393c:	f004 f818 	bl	8007970 <__errno>
 8003940:	4603      	mov	r3, r0
 8003942:	2216      	movs	r2, #22
 8003944:	601a      	str	r2, [r3, #0]
	return -1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <_exit>:

void _exit (int status)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800395a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ffe7 	bl	8003932 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003964:	e7fe      	b.n	8003964 <_exit+0x12>

08003966 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e00a      	b.n	800398e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003978:	f3af 8000 	nop.w
 800397c:	4601      	mov	r1, r0
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	60ba      	str	r2, [r7, #8]
 8003984:	b2ca      	uxtb	r2, r1
 8003986:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	3301      	adds	r3, #1
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	dbf0      	blt.n	8003978 <_read+0x12>
	}

return len;
 8003996:	687b      	ldr	r3, [r7, #4]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e009      	b.n	80039c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	60ba      	str	r2, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	3301      	adds	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	dbf1      	blt.n	80039b2 <_write+0x12>
	}
	return len;
 80039ce:	687b      	ldr	r3, [r7, #4]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <_close>:

int _close(int file)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	return -1;
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039fe:	605a      	str	r2, [r3, #4]
	return 0;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <_isatty>:

int _isatty(int file)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	return 1;
 8003a14:	2301      	movs	r3, #1
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a40:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <_sbrk+0x5c>)
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <_sbrk+0x60>)
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a4c:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <_sbrk+0x64>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a54:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <_sbrk+0x64>)
 8003a56:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <_sbrk+0x68>)
 8003a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <_sbrk+0x64>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d207      	bcs.n	8003a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a68:	f003 ff82 	bl	8007970 <__errno>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	220c      	movs	r2, #12
 8003a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a76:	e009      	b.n	8003a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a78:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <_sbrk+0x64>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <_sbrk+0x64>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <_sbrk+0x64>)
 8003a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	2000c000 	.word	0x2000c000
 8003a98:	00000400 	.word	0x00000400
 8003a9c:	200004f4 	.word	0x200004f4
 8003aa0:	200023a8 	.word	0x200023a8

08003aa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ab6:	f107 0308 	add.w	r3, r7, #8
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ac4:	463b      	mov	r3, r7
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <MX_TIM3_Init+0x94>)
 8003ace:	4a1e      	ldr	r2, [pc, #120]	; (8003b48 <MX_TIM3_Init+0x98>)
 8003ad0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600-1;
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <MX_TIM3_Init+0x94>)
 8003ad4:	f640 620f 	movw	r2, #3599	; 0xe0f
 8003ad8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ada:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <MX_TIM3_Init+0x94>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 8003ae0:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <MX_TIM3_Init+0x94>)
 8003ae2:	22c7      	movs	r2, #199	; 0xc7
 8003ae4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <MX_TIM3_Init+0x94>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003aec:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <MX_TIM3_Init+0x94>)
 8003aee:	2280      	movs	r2, #128	; 0x80
 8003af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003af2:	4814      	ldr	r0, [pc, #80]	; (8003b44 <MX_TIM3_Init+0x94>)
 8003af4:	f001 ff59 	bl	80059aa <HAL_TIM_Base_Init>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003afe:	f7ff fd7d 	bl	80035fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b08:	f107 0308 	add.w	r3, r7, #8
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	480d      	ldr	r0, [pc, #52]	; (8003b44 <MX_TIM3_Init+0x94>)
 8003b10:	f002 f902 	bl	8005d18 <HAL_TIM_ConfigClockSource>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003b1a:	f7ff fd6f 	bl	80035fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b26:	463b      	mov	r3, r7
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4806      	ldr	r0, [pc, #24]	; (8003b44 <MX_TIM3_Init+0x94>)
 8003b2c:	f002 faec 	bl	8006108 <HAL_TIMEx_MasterConfigSynchronization>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003b36:	f7ff fd61 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b3a:	bf00      	nop
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20002304 	.word	0x20002304
 8003b48:	40000400 	.word	0x40000400

08003b4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0d      	ldr	r2, [pc, #52]	; (8003b90 <HAL_TIM_Base_MspInit+0x44>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d113      	bne.n	8003b86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <HAL_TIM_Base_MspInit+0x48>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	4a0c      	ldr	r2, [pc, #48]	; (8003b94 <HAL_TIM_Base_MspInit+0x48>)
 8003b64:	f043 0302 	orr.w	r3, r3, #2
 8003b68:	61d3      	str	r3, [r2, #28]
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <HAL_TIM_Base_MspInit+0x48>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003b76:	2200      	movs	r2, #0
 8003b78:	2105      	movs	r1, #5
 8003b7a:	201d      	movs	r0, #29
 8003b7c:	f000 fedb 	bl	8004936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b80:	201d      	movs	r0, #29
 8003b82:	f000 fef4 	bl	800496e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40021000 	.word	0x40021000

08003b98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b9c:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <MX_USART1_UART_Init+0x4c>)
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <MX_USART1_UART_Init+0x50>)
 8003ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <MX_USART1_UART_Init+0x4c>)
 8003ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <MX_USART1_UART_Init+0x4c>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <MX_USART1_UART_Init+0x4c>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <MX_USART1_UART_Init+0x4c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bbc:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <MX_USART1_UART_Init+0x4c>)
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <MX_USART1_UART_Init+0x4c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <MX_USART1_UART_Init+0x4c>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bce:	4805      	ldr	r0, [pc, #20]	; (8003be4 <MX_USART1_UART_Init+0x4c>)
 8003bd0:	f002 fb18 	bl	8006204 <HAL_UART_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003bda:	f7ff fd0f 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	2000234c 	.word	0x2000234c
 8003be8:	40013800 	.word	0x40013800

08003bec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 0310 	add.w	r3, r7, #16
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1c      	ldr	r2, [pc, #112]	; (8003c78 <HAL_UART_MspInit+0x8c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d131      	bne.n	8003c70 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <HAL_UART_MspInit+0x90>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_UART_MspInit+0x90>)
 8003c12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c16:	6193      	str	r3, [r2, #24]
 8003c18:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_UART_MspInit+0x90>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c24:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <HAL_UART_MspInit+0x90>)
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <HAL_UART_MspInit+0x90>)
 8003c2a:	f043 0304 	orr.w	r3, r3, #4
 8003c2e:	6193      	str	r3, [r2, #24]
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_UART_MspInit+0x90>)
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c42:	2302      	movs	r3, #2
 8003c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c46:	2303      	movs	r3, #3
 8003c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4a:	f107 0310 	add.w	r3, r7, #16
 8003c4e:	4619      	mov	r1, r3
 8003c50:	480b      	ldr	r0, [pc, #44]	; (8003c80 <HAL_UART_MspInit+0x94>)
 8003c52:	f000 fe9b 	bl	800498c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c64:	f107 0310 	add.w	r3, r7, #16
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4805      	ldr	r0, [pc, #20]	; (8003c80 <HAL_UART_MspInit+0x94>)
 8003c6c:	f000 fe8e 	bl	800498c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003c70:	bf00      	nop
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40013800 	.word	0x40013800
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40010800 	.word	0x40010800

08003c84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c84:	480c      	ldr	r0, [pc, #48]	; (8003cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c86:	490d      	ldr	r1, [pc, #52]	; (8003cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c88:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c8c:	e002      	b.n	8003c94 <LoopCopyDataInit>

08003c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c92:	3304      	adds	r3, #4

08003c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c98:	d3f9      	bcc.n	8003c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c9a:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c9c:	4c0a      	ldr	r4, [pc, #40]	; (8003cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ca0:	e001      	b.n	8003ca6 <LoopFillZerobss>

08003ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ca4:	3204      	adds	r2, #4

08003ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ca8:	d3fb      	bcc.n	8003ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003caa:	f7ff fefb 	bl	8003aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cae:	f003 ff5b 	bl	8007b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003cb2:	f7ff fbdb 	bl	800346c <main>
  bx lr
 8003cb6:	4770      	bx	lr
  ldr r0, =_sdata
 8003cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cbc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003cc0:	0800a3a8 	.word	0x0800a3a8
  ldr r2, =_sbss
 8003cc4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003cc8:	200023a4 	.word	0x200023a4

08003ccc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ccc:	e7fe      	b.n	8003ccc <ADC3_IRQHandler>
	...

08003cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cd4:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_Init+0x28>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a07      	ldr	r2, [pc, #28]	; (8003cf8 <HAL_Init+0x28>)
 8003cda:	f043 0310 	orr.w	r3, r3, #16
 8003cde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	f000 fe1d 	bl	8004920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ce6:	200f      	movs	r0, #15
 8003ce8:	f7ff fd8e 	bl	8003808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cec:	f7ff fd54 	bl	8003798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40022000 	.word	0x40022000

08003cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_IncTick+0x1c>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_IncTick+0x20>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4a03      	ldr	r2, [pc, #12]	; (8003d1c <HAL_IncTick+0x20>)
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	2000002c 	.word	0x2000002c
 8003d1c:	20002390 	.word	0x20002390

08003d20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return uwTick;
 8003d24:	4b02      	ldr	r3, [pc, #8]	; (8003d30 <HAL_GetTick+0x10>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	20002390 	.word	0x20002390

08003d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7ff fff0 	bl	8003d20 <HAL_GetTick>
 8003d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4c:	d005      	beq.n	8003d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_Delay+0x44>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d5a:	bf00      	nop
 8003d5c:	f7ff ffe0 	bl	8003d20 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d8f7      	bhi.n	8003d5c <HAL_Delay+0x28>
  {
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2000002c 	.word	0x2000002c

08003d7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0ce      	b.n	8003f3c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fd fc00 	bl	80015c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fcb9 	bl	8004738 <ADC_ConversionStop_Disable>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f040 80a9 	bne.w	8003f2a <HAL_ADC_Init+0x1ae>
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 80a5 	bne.w	8003f2a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003de8:	f023 0302 	bic.w	r3, r3, #2
 8003dec:	f043 0202 	orr.w	r2, r3, #2
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4951      	ldr	r1, [pc, #324]	; (8003f44 <HAL_ADC_Init+0x1c8>)
 8003dfe:	428b      	cmp	r3, r1
 8003e00:	d10a      	bne.n	8003e18 <HAL_ADC_Init+0x9c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e0a:	d002      	beq.n	8003e12 <HAL_ADC_Init+0x96>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	e004      	b.n	8003e1c <HAL_ADC_Init+0xa0>
 8003e12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003e16:	e001      	b.n	8003e1c <HAL_ADC_Init+0xa0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	7b1b      	ldrb	r3, [r3, #12]
 8003e22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e34:	d003      	beq.n	8003e3e <HAL_ADC_Init+0xc2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d102      	bne.n	8003e44 <HAL_ADC_Init+0xc8>
 8003e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e42:	e000      	b.n	8003e46 <HAL_ADC_Init+0xca>
 8003e44:	2300      	movs	r3, #0
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	7d1b      	ldrb	r3, [r3, #20]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d119      	bne.n	8003e88 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	7b1b      	ldrb	r3, [r3, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	035a      	lsls	r2, r3, #13
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	e00b      	b.n	8003e88 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <HAL_ADC_Init+0x1cc>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb8:	d003      	beq.n	8003ec2 <HAL_ADC_Init+0x146>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d104      	bne.n	8003ecc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	051b      	lsls	r3, r3, #20
 8003eca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <HAL_ADC_Init+0x1d0>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d10b      	bne.n	8003f08 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	f023 0303 	bic.w	r3, r3, #3
 8003efe:	f043 0201 	orr.w	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f06:	e018      	b.n	8003f3a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f023 0312 	bic.w	r3, r3, #18
 8003f10:	f043 0210 	orr.w	r2, r3, #16
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	f043 0201 	orr.w	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f28:	e007      	b.n	8003f3a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	f043 0210 	orr.w	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40013c00 	.word	0x40013c00
 8003f48:	ffe1f7fd 	.word	0xffe1f7fd
 8003f4c:	ff1f0efe 	.word	0xff1f0efe

08003f50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_Start+0x1a>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e098      	b.n	800409c <HAL_ADC_Start+0x14c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fb86 	bl	8004684 <ADC_Enable>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 8087 	bne.w	8004092 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a41      	ldr	r2, [pc, #260]	; (80040a4 <HAL_ADC_Start+0x154>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d105      	bne.n	8003fae <HAL_ADC_Start+0x5e>
 8003fa2:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <HAL_ADC_Start+0x158>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d115      	bne.n	8003fda <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d026      	beq.n	8004016 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fd8:	e01d      	b.n	8004016 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <HAL_ADC_Start+0x158>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <HAL_ADC_Start+0xaa>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2b      	ldr	r2, [pc, #172]	; (80040a4 <HAL_ADC_Start+0x154>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10d      	bne.n	8004016 <HAL_ADC_Start+0xc6>
 8003ffa:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <HAL_ADC_Start+0x158>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800400e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d006      	beq.n	8004030 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	f023 0206 	bic.w	r2, r3, #6
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	62da      	str	r2, [r3, #44]	; 0x2c
 800402e:	e002      	b.n	8004036 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f06f 0202 	mvn.w	r2, #2
 8004046:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004052:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004056:	d113      	bne.n	8004080 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800405c:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <HAL_ADC_Start+0x154>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d105      	bne.n	800406e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HAL_ADC_Start+0x158>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800406a:	2b00      	cmp	r3, #0
 800406c:	d108      	bne.n	8004080 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	e00c      	b.n	800409a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	e003      	b.n	800409a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800409a:	7bfb      	ldrb	r3, [r7, #15]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40012800 	.word	0x40012800
 80040a8:	40012400 	.word	0x40012400

080040ac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80040c2:	f7ff fe2d 	bl	8003d20 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e0d3      	b.n	8004296 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d131      	bne.n	8004160 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004106:	2b00      	cmp	r3, #0
 8004108:	d12a      	bne.n	8004160 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800410a:	e021      	b.n	8004150 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004112:	d01d      	beq.n	8004150 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <HAL_ADC_PollForConversion+0x7e>
 800411a:	f7ff fe01 	bl	8003d20 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d212      	bcs.n	8004150 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10b      	bne.n	8004150 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	f043 0204 	orr.w	r2, r3, #4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0a2      	b.n	8004296 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0d6      	beq.n	800410c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800415e:	e070      	b.n	8004242 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004160:	4b4f      	ldr	r3, [pc, #316]	; (80042a0 <HAL_ADC_PollForConversion+0x1f4>)
 8004162:	681c      	ldr	r4, [r3, #0]
 8004164:	2002      	movs	r0, #2
 8004166:	f001 faed 	bl	8005744 <HAL_RCCEx_GetPeriphCLKFreq>
 800416a:	4603      	mov	r3, r0
 800416c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6919      	ldr	r1, [r3, #16]
 8004176:	4b4b      	ldr	r3, [pc, #300]	; (80042a4 <HAL_ADC_PollForConversion+0x1f8>)
 8004178:	400b      	ands	r3, r1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d118      	bne.n	80041b0 <HAL_ADC_PollForConversion+0x104>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68d9      	ldr	r1, [r3, #12]
 8004184:	4b48      	ldr	r3, [pc, #288]	; (80042a8 <HAL_ADC_PollForConversion+0x1fc>)
 8004186:	400b      	ands	r3, r1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d111      	bne.n	80041b0 <HAL_ADC_PollForConversion+0x104>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6919      	ldr	r1, [r3, #16]
 8004192:	4b46      	ldr	r3, [pc, #280]	; (80042ac <HAL_ADC_PollForConversion+0x200>)
 8004194:	400b      	ands	r3, r1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d108      	bne.n	80041ac <HAL_ADC_PollForConversion+0x100>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68d9      	ldr	r1, [r3, #12]
 80041a0:	4b43      	ldr	r3, [pc, #268]	; (80042b0 <HAL_ADC_PollForConversion+0x204>)
 80041a2:	400b      	ands	r3, r1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_PollForConversion+0x100>
 80041a8:	2314      	movs	r3, #20
 80041aa:	e020      	b.n	80041ee <HAL_ADC_PollForConversion+0x142>
 80041ac:	2329      	movs	r3, #41	; 0x29
 80041ae:	e01e      	b.n	80041ee <HAL_ADC_PollForConversion+0x142>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6919      	ldr	r1, [r3, #16]
 80041b6:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_ADC_PollForConversion+0x200>)
 80041b8:	400b      	ands	r3, r1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_ADC_PollForConversion+0x120>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68d9      	ldr	r1, [r3, #12]
 80041c4:	4b3a      	ldr	r3, [pc, #232]	; (80042b0 <HAL_ADC_PollForConversion+0x204>)
 80041c6:	400b      	ands	r3, r1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00d      	beq.n	80041e8 <HAL_ADC_PollForConversion+0x13c>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6919      	ldr	r1, [r3, #16]
 80041d2:	4b38      	ldr	r3, [pc, #224]	; (80042b4 <HAL_ADC_PollForConversion+0x208>)
 80041d4:	400b      	ands	r3, r1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d108      	bne.n	80041ec <HAL_ADC_PollForConversion+0x140>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68d9      	ldr	r1, [r3, #12]
 80041e0:	4b34      	ldr	r3, [pc, #208]	; (80042b4 <HAL_ADC_PollForConversion+0x208>)
 80041e2:	400b      	ands	r3, r1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_PollForConversion+0x140>
 80041e8:	2354      	movs	r3, #84	; 0x54
 80041ea:	e000      	b.n	80041ee <HAL_ADC_PollForConversion+0x142>
 80041ec:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80041ee:	fb02 f303 	mul.w	r3, r2, r3
 80041f2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80041f4:	e021      	b.n	800423a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041fc:	d01a      	beq.n	8004234 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <HAL_ADC_PollForConversion+0x168>
 8004204:	f7ff fd8c 	bl	8003d20 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d20f      	bcs.n	8004234 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d90b      	bls.n	8004234 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	f043 0204 	orr.w	r2, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e030      	b.n	8004296 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	429a      	cmp	r2, r3
 8004240:	d8d9      	bhi.n	80041f6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f06f 0212 	mvn.w	r2, #18
 800424a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004262:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004266:	d115      	bne.n	8004294 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800426c:	2b00      	cmp	r3, #0
 800426e:	d111      	bne.n	8004294 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	f043 0201 	orr.w	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	bd90      	pop	{r4, r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000024 	.word	0x20000024
 80042a4:	24924924 	.word	0x24924924
 80042a8:	00924924 	.word	0x00924924
 80042ac:	12492492 	.word	0x12492492
 80042b0:	00492492 	.word	0x00492492
 80042b4:	00249249 	.word	0x00249249

080042b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr

080042d0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d140      	bne.n	8004368 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d139      	bne.n	8004368 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d105      	bne.n	800430c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004316:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800431a:	d11d      	bne.n	8004358 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004320:	2b00      	cmp	r3, #0
 8004322:	d119      	bne.n	8004358 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0220 	bic.w	r2, r2, #32
 8004332:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d105      	bne.n	8004358 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	f043 0201 	orr.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f87c 	bl	8004456 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f06f 0212 	mvn.w	r2, #18
 8004366:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d14f      	bne.n	8004416 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b04      	cmp	r3, #4
 8004382:	d148      	bne.n	8004416 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80043a6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80043aa:	d012      	beq.n	80043d2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d125      	bne.n	8004406 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80043c4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80043c8:	d11d      	bne.n	8004406 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d119      	bne.n	8004406 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f9d7 	bl	80047ba <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 020c 	mvn.w	r2, #12
 8004414:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b40      	cmp	r3, #64	; 0x40
 8004422:	d114      	bne.n	800444e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10d      	bne.n	800444e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f812 	bl	8004468 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0201 	mvn.w	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
	...

0800447c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_ADC_ConfigChannel+0x20>
 8004498:	2302      	movs	r3, #2
 800449a:	e0dc      	b.n	8004656 <HAL_ADC_ConfigChannel+0x1da>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b06      	cmp	r3, #6
 80044aa:	d81c      	bhi.n	80044e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	3b05      	subs	r3, #5
 80044be:	221f      	movs	r2, #31
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	4019      	ands	r1, r3
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	3b05      	subs	r3, #5
 80044d8:	fa00 f203 	lsl.w	r2, r0, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	635a      	str	r2, [r3, #52]	; 0x34
 80044e4:	e03c      	b.n	8004560 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b0c      	cmp	r3, #12
 80044ec:	d81c      	bhi.n	8004528 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	3b23      	subs	r3, #35	; 0x23
 8004500:	221f      	movs	r2, #31
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	4019      	ands	r1, r3
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	3b23      	subs	r3, #35	; 0x23
 800451a:	fa00 f203 	lsl.w	r2, r0, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
 8004526:	e01b      	b.n	8004560 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	3b41      	subs	r3, #65	; 0x41
 800453a:	221f      	movs	r2, #31
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	4019      	ands	r1, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	3b41      	subs	r3, #65	; 0x41
 8004554:	fa00 f203 	lsl.w	r2, r0, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b09      	cmp	r3, #9
 8004566:	d91c      	bls.n	80045a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68d9      	ldr	r1, [r3, #12]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	3b1e      	subs	r3, #30
 800457a:	2207      	movs	r2, #7
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	4019      	ands	r1, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6898      	ldr	r0, [r3, #8]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4413      	add	r3, r2
 8004592:	3b1e      	subs	r3, #30
 8004594:	fa00 f203 	lsl.w	r2, r0, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	60da      	str	r2, [r3, #12]
 80045a0:	e019      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6919      	ldr	r1, [r3, #16]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	4413      	add	r3, r2
 80045b2:	2207      	movs	r2, #7
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	4019      	ands	r1, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6898      	ldr	r0, [r3, #8]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4413      	add	r3, r2
 80045ca:	fa00 f203 	lsl.w	r2, r0, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d003      	beq.n	80045e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045e2:	2b11      	cmp	r3, #17
 80045e4:	d132      	bne.n	800464c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1d      	ldr	r2, [pc, #116]	; (8004660 <HAL_ADC_ConfigChannel+0x1e4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d125      	bne.n	800463c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d126      	bne.n	800464c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800460c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b10      	cmp	r3, #16
 8004614:	d11a      	bne.n	800464c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <HAL_ADC_ConfigChannel+0x1e8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a13      	ldr	r2, [pc, #76]	; (8004668 <HAL_ADC_ConfigChannel+0x1ec>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	0c9a      	lsrs	r2, r3, #18
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800462c:	e002      	b.n	8004634 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3b01      	subs	r3, #1
 8004632:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f9      	bne.n	800462e <HAL_ADC_ConfigChannel+0x1b2>
 800463a:	e007      	b.n	800464c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	f043 0220 	orr.w	r2, r3, #32
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	40012400 	.word	0x40012400
 8004664:	20000024 	.word	0x20000024
 8004668:	431bde83 	.word	0x431bde83

0800466c <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
	...

08004684 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d040      	beq.n	8004724 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80046b2:	4b1f      	ldr	r3, [pc, #124]	; (8004730 <ADC_Enable+0xac>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1f      	ldr	r2, [pc, #124]	; (8004734 <ADC_Enable+0xb0>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	0c9b      	lsrs	r3, r3, #18
 80046be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80046c0:	e002      	b.n	80046c8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f9      	bne.n	80046c2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046ce:	f7ff fb27 	bl	8003d20 <HAL_GetTick>
 80046d2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80046d4:	e01f      	b.n	8004716 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046d6:	f7ff fb23 	bl	8003d20 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d918      	bls.n	8004716 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d011      	beq.n	8004716 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	f043 0210 	orr.w	r2, r3, #16
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	f043 0201 	orr.w	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e007      	b.n	8004726 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	d1d8      	bne.n	80046d6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000024 	.word	0x20000024
 8004734:	431bde83 	.word	0x431bde83

08004738 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d12e      	bne.n	80047b0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004762:	f7ff fadd 	bl	8003d20 <HAL_GetTick>
 8004766:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004768:	e01b      	b.n	80047a2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800476a:	f7ff fad9 	bl	8003d20 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d914      	bls.n	80047a2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b01      	cmp	r3, #1
 8004784:	d10d      	bne.n	80047a2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	f043 0210 	orr.w	r2, r3, #16
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	f043 0201 	orr.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e007      	b.n	80047b2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d0dc      	beq.n	800476a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <__NVIC_SetPriorityGrouping+0x44>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047e8:	4013      	ands	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047fe:	4a04      	ldr	r2, [pc, #16]	; (8004810 <__NVIC_SetPriorityGrouping+0x44>)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	60d3      	str	r3, [r2, #12]
}
 8004804:	bf00      	nop
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <__NVIC_GetPriorityGrouping+0x18>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	0a1b      	lsrs	r3, r3, #8
 800481e:	f003 0307 	and.w	r3, r3, #7
}
 8004822:	4618      	mov	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	2b00      	cmp	r3, #0
 8004840:	db0b      	blt.n	800485a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	f003 021f 	and.w	r2, r3, #31
 8004848:	4906      	ldr	r1, [pc, #24]	; (8004864 <__NVIC_EnableIRQ+0x34>)
 800484a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2001      	movs	r0, #1
 8004852:	fa00 f202 	lsl.w	r2, r0, r2
 8004856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr
 8004864:	e000e100 	.word	0xe000e100

08004868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	6039      	str	r1, [r7, #0]
 8004872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004878:	2b00      	cmp	r3, #0
 800487a:	db0a      	blt.n	8004892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	490c      	ldr	r1, [pc, #48]	; (80048b4 <__NVIC_SetPriority+0x4c>)
 8004882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004886:	0112      	lsls	r2, r2, #4
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	440b      	add	r3, r1
 800488c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004890:	e00a      	b.n	80048a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	b2da      	uxtb	r2, r3
 8004896:	4908      	ldr	r1, [pc, #32]	; (80048b8 <__NVIC_SetPriority+0x50>)
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	3b04      	subs	r3, #4
 80048a0:	0112      	lsls	r2, r2, #4
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	440b      	add	r3, r1
 80048a6:	761a      	strb	r2, [r3, #24]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	e000e100 	.word	0xe000e100
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048bc:	b480      	push	{r7}
 80048be:	b089      	sub	sp, #36	; 0x24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f1c3 0307 	rsb	r3, r3, #7
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	bf28      	it	cs
 80048da:	2304      	movcs	r3, #4
 80048dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2b06      	cmp	r3, #6
 80048e4:	d902      	bls.n	80048ec <NVIC_EncodePriority+0x30>
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	3b03      	subs	r3, #3
 80048ea:	e000      	b.n	80048ee <NVIC_EncodePriority+0x32>
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43da      	mvns	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	401a      	ands	r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	43d9      	mvns	r1, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004914:	4313      	orrs	r3, r2
         );
}
 8004916:	4618      	mov	r0, r3
 8004918:	3724      	adds	r7, #36	; 0x24
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr

08004920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff ff4f 	bl	80047cc <__NVIC_SetPriorityGrouping>
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004936:	b580      	push	{r7, lr}
 8004938:	b086      	sub	sp, #24
 800493a:	af00      	add	r7, sp, #0
 800493c:	4603      	mov	r3, r0
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004948:	f7ff ff64 	bl	8004814 <__NVIC_GetPriorityGrouping>
 800494c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	6978      	ldr	r0, [r7, #20]
 8004954:	f7ff ffb2 	bl	80048bc <NVIC_EncodePriority>
 8004958:	4602      	mov	r2, r0
 800495a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff81 	bl	8004868 <__NVIC_SetPriority>
}
 8004966:	bf00      	nop
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	4603      	mov	r3, r0
 8004976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ff57 	bl	8004830 <__NVIC_EnableIRQ>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800498c:	b480      	push	{r7}
 800498e:	b08b      	sub	sp, #44	; 0x2c
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004996:	2300      	movs	r3, #0
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800499a:	2300      	movs	r3, #0
 800499c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800499e:	e179      	b.n	8004c94 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049a0:	2201      	movs	r2, #1
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	4013      	ands	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	f040 8168 	bne.w	8004c8e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4aa0      	ldr	r2, [pc, #640]	; (8004c44 <HAL_GPIO_Init+0x2b8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d05e      	beq.n	8004a86 <HAL_GPIO_Init+0xfa>
 80049c8:	4a9e      	ldr	r2, [pc, #632]	; (8004c44 <HAL_GPIO_Init+0x2b8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d875      	bhi.n	8004aba <HAL_GPIO_Init+0x12e>
 80049ce:	4a9e      	ldr	r2, [pc, #632]	; (8004c48 <HAL_GPIO_Init+0x2bc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d058      	beq.n	8004a86 <HAL_GPIO_Init+0xfa>
 80049d4:	4a9c      	ldr	r2, [pc, #624]	; (8004c48 <HAL_GPIO_Init+0x2bc>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d86f      	bhi.n	8004aba <HAL_GPIO_Init+0x12e>
 80049da:	4a9c      	ldr	r2, [pc, #624]	; (8004c4c <HAL_GPIO_Init+0x2c0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d052      	beq.n	8004a86 <HAL_GPIO_Init+0xfa>
 80049e0:	4a9a      	ldr	r2, [pc, #616]	; (8004c4c <HAL_GPIO_Init+0x2c0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d869      	bhi.n	8004aba <HAL_GPIO_Init+0x12e>
 80049e6:	4a9a      	ldr	r2, [pc, #616]	; (8004c50 <HAL_GPIO_Init+0x2c4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d04c      	beq.n	8004a86 <HAL_GPIO_Init+0xfa>
 80049ec:	4a98      	ldr	r2, [pc, #608]	; (8004c50 <HAL_GPIO_Init+0x2c4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d863      	bhi.n	8004aba <HAL_GPIO_Init+0x12e>
 80049f2:	4a98      	ldr	r2, [pc, #608]	; (8004c54 <HAL_GPIO_Init+0x2c8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d046      	beq.n	8004a86 <HAL_GPIO_Init+0xfa>
 80049f8:	4a96      	ldr	r2, [pc, #600]	; (8004c54 <HAL_GPIO_Init+0x2c8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d85d      	bhi.n	8004aba <HAL_GPIO_Init+0x12e>
 80049fe:	2b12      	cmp	r3, #18
 8004a00:	d82a      	bhi.n	8004a58 <HAL_GPIO_Init+0xcc>
 8004a02:	2b12      	cmp	r3, #18
 8004a04:	d859      	bhi.n	8004aba <HAL_GPIO_Init+0x12e>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <HAL_GPIO_Init+0x80>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004a87 	.word	0x08004a87
 8004a10:	08004a61 	.word	0x08004a61
 8004a14:	08004a73 	.word	0x08004a73
 8004a18:	08004ab5 	.word	0x08004ab5
 8004a1c:	08004abb 	.word	0x08004abb
 8004a20:	08004abb 	.word	0x08004abb
 8004a24:	08004abb 	.word	0x08004abb
 8004a28:	08004abb 	.word	0x08004abb
 8004a2c:	08004abb 	.word	0x08004abb
 8004a30:	08004abb 	.word	0x08004abb
 8004a34:	08004abb 	.word	0x08004abb
 8004a38:	08004abb 	.word	0x08004abb
 8004a3c:	08004abb 	.word	0x08004abb
 8004a40:	08004abb 	.word	0x08004abb
 8004a44:	08004abb 	.word	0x08004abb
 8004a48:	08004abb 	.word	0x08004abb
 8004a4c:	08004abb 	.word	0x08004abb
 8004a50:	08004a69 	.word	0x08004a69
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	4a7f      	ldr	r2, [pc, #508]	; (8004c58 <HAL_GPIO_Init+0x2cc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a5e:	e02c      	b.n	8004aba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	623b      	str	r3, [r7, #32]
          break;
 8004a66:	e029      	b.n	8004abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	623b      	str	r3, [r7, #32]
          break;
 8004a70:	e024      	b.n	8004abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	3308      	adds	r3, #8
 8004a78:	623b      	str	r3, [r7, #32]
          break;
 8004a7a:	e01f      	b.n	8004abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	330c      	adds	r3, #12
 8004a82:	623b      	str	r3, [r7, #32]
          break;
 8004a84:	e01a      	b.n	8004abc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a8e:	2304      	movs	r3, #4
 8004a90:	623b      	str	r3, [r7, #32]
          break;
 8004a92:	e013      	b.n	8004abc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	611a      	str	r2, [r3, #16]
          break;
 8004aa6:	e009      	b.n	8004abc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	615a      	str	r2, [r3, #20]
          break;
 8004ab2:	e003      	b.n	8004abc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	623b      	str	r3, [r7, #32]
          break;
 8004ab8:	e000      	b.n	8004abc <HAL_GPIO_Init+0x130>
          break;
 8004aba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2bff      	cmp	r3, #255	; 0xff
 8004ac0:	d801      	bhi.n	8004ac6 <HAL_GPIO_Init+0x13a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	e001      	b.n	8004aca <HAL_GPIO_Init+0x13e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2bff      	cmp	r3, #255	; 0xff
 8004ad0:	d802      	bhi.n	8004ad8 <HAL_GPIO_Init+0x14c>
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	e002      	b.n	8004ade <HAL_GPIO_Init+0x152>
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	3b08      	subs	r3, #8
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	210f      	movs	r1, #15
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	401a      	ands	r2, r3
 8004af0:	6a39      	ldr	r1, [r7, #32]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	fa01 f303 	lsl.w	r3, r1, r3
 8004af8:	431a      	orrs	r2, r3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80c1 	beq.w	8004c8e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b0c:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	4a52      	ldr	r2, [pc, #328]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6193      	str	r3, [r2, #24]
 8004b18:	4b50      	ldr	r3, [pc, #320]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b24:	4a4e      	ldr	r2, [pc, #312]	; (8004c60 <HAL_GPIO_Init+0x2d4>)
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	089b      	lsrs	r3, r3, #2
 8004b2a:	3302      	adds	r3, #2
 8004b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	220f      	movs	r2, #15
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4013      	ands	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a46      	ldr	r2, [pc, #280]	; (8004c64 <HAL_GPIO_Init+0x2d8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d01f      	beq.n	8004b90 <HAL_GPIO_Init+0x204>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a45      	ldr	r2, [pc, #276]	; (8004c68 <HAL_GPIO_Init+0x2dc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d019      	beq.n	8004b8c <HAL_GPIO_Init+0x200>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a44      	ldr	r2, [pc, #272]	; (8004c6c <HAL_GPIO_Init+0x2e0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d013      	beq.n	8004b88 <HAL_GPIO_Init+0x1fc>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a43      	ldr	r2, [pc, #268]	; (8004c70 <HAL_GPIO_Init+0x2e4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00d      	beq.n	8004b84 <HAL_GPIO_Init+0x1f8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a42      	ldr	r2, [pc, #264]	; (8004c74 <HAL_GPIO_Init+0x2e8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <HAL_GPIO_Init+0x1f4>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a41      	ldr	r2, [pc, #260]	; (8004c78 <HAL_GPIO_Init+0x2ec>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d101      	bne.n	8004b7c <HAL_GPIO_Init+0x1f0>
 8004b78:	2305      	movs	r3, #5
 8004b7a:	e00a      	b.n	8004b92 <HAL_GPIO_Init+0x206>
 8004b7c:	2306      	movs	r3, #6
 8004b7e:	e008      	b.n	8004b92 <HAL_GPIO_Init+0x206>
 8004b80:	2304      	movs	r3, #4
 8004b82:	e006      	b.n	8004b92 <HAL_GPIO_Init+0x206>
 8004b84:	2303      	movs	r3, #3
 8004b86:	e004      	b.n	8004b92 <HAL_GPIO_Init+0x206>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e002      	b.n	8004b92 <HAL_GPIO_Init+0x206>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <HAL_GPIO_Init+0x206>
 8004b90:	2300      	movs	r3, #0
 8004b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b94:	f002 0203 	and.w	r2, r2, #3
 8004b98:	0092      	lsls	r2, r2, #2
 8004b9a:	4093      	lsls	r3, r2
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004ba2:	492f      	ldr	r1, [pc, #188]	; (8004c60 <HAL_GPIO_Init+0x2d4>)
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	089b      	lsrs	r3, r3, #2
 8004ba8:	3302      	adds	r3, #2
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d006      	beq.n	8004bca <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bbc:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	492e      	ldr	r1, [pc, #184]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]
 8004bc8:	e006      	b.n	8004bd8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bca:	4b2c      	ldr	r3, [pc, #176]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	492a      	ldr	r1, [pc, #168]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d006      	beq.n	8004bf2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004be4:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	4924      	ldr	r1, [pc, #144]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	604b      	str	r3, [r1, #4]
 8004bf0:	e006      	b.n	8004c00 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bf2:	4b22      	ldr	r3, [pc, #136]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	4920      	ldr	r1, [pc, #128]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d006      	beq.n	8004c1a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	491a      	ldr	r1, [pc, #104]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]
 8004c18:	e006      	b.n	8004c28 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c1a:	4b18      	ldr	r3, [pc, #96]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	4916      	ldr	r1, [pc, #88]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d025      	beq.n	8004c80 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	4910      	ldr	r1, [pc, #64]	; (8004c7c <HAL_GPIO_Init+0x2f0>)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60cb      	str	r3, [r1, #12]
 8004c40:	e025      	b.n	8004c8e <HAL_GPIO_Init+0x302>
 8004c42:	bf00      	nop
 8004c44:	10320000 	.word	0x10320000
 8004c48:	10310000 	.word	0x10310000
 8004c4c:	10220000 	.word	0x10220000
 8004c50:	10210000 	.word	0x10210000
 8004c54:	10120000 	.word	0x10120000
 8004c58:	10110000 	.word	0x10110000
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40010800 	.word	0x40010800
 8004c68:	40010c00 	.word	0x40010c00
 8004c6c:	40011000 	.word	0x40011000
 8004c70:	40011400 	.word	0x40011400
 8004c74:	40011800 	.word	0x40011800
 8004c78:	40011c00 	.word	0x40011c00
 8004c7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_GPIO_Init+0x324>)
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	43db      	mvns	r3, r3
 8004c88:	4909      	ldr	r1, [pc, #36]	; (8004cb0 <HAL_GPIO_Init+0x324>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	3301      	adds	r3, #1
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f47f ae7e 	bne.w	80049a0 <HAL_GPIO_Init+0x14>
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	372c      	adds	r7, #44	; 0x2c
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr
 8004cb0:	40010400 	.word	0x40010400

08004cb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	887b      	ldrh	r3, [r7, #2]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	73fb      	strb	r3, [r7, #15]
 8004cd0:	e001      	b.n	8004cd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	807b      	strh	r3, [r7, #2]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cf2:	787b      	ldrb	r3, [r7, #1]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cf8:	887a      	ldrh	r2, [r7, #2]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cfe:	e003      	b.n	8004d08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d00:	887b      	ldrh	r3, [r7, #2]
 8004d02:	041a      	lsls	r2, r3, #16
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	611a      	str	r2, [r3, #16]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr

08004d12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d24:	887a      	ldrh	r2, [r7, #2]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	041a      	lsls	r2, r3, #16
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	43d9      	mvns	r1, r3
 8004d30:	887b      	ldrh	r3, [r7, #2]
 8004d32:	400b      	ands	r3, r1
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	611a      	str	r2, [r3, #16]
}
 8004d3a:	bf00      	nop
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr

08004d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e26c      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 8087 	beq.w	8004e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d64:	4b92      	ldr	r3, [pc, #584]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 030c 	and.w	r3, r3, #12
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d00c      	beq.n	8004d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d70:	4b8f      	ldr	r3, [pc, #572]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d112      	bne.n	8004da2 <HAL_RCC_OscConfig+0x5e>
 8004d7c:	4b8c      	ldr	r3, [pc, #560]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d88:	d10b      	bne.n	8004da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8a:	4b89      	ldr	r3, [pc, #548]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d06c      	beq.n	8004e70 <HAL_RCC_OscConfig+0x12c>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d168      	bne.n	8004e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e246      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004daa:	d106      	bne.n	8004dba <HAL_RCC_OscConfig+0x76>
 8004dac:	4b80      	ldr	r3, [pc, #512]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a7f      	ldr	r2, [pc, #508]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	e02e      	b.n	8004e18 <HAL_RCC_OscConfig+0xd4>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCC_OscConfig+0x98>
 8004dc2:	4b7b      	ldr	r3, [pc, #492]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a7a      	ldr	r2, [pc, #488]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	4b78      	ldr	r3, [pc, #480]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a77      	ldr	r2, [pc, #476]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e01d      	b.n	8004e18 <HAL_RCC_OscConfig+0xd4>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCC_OscConfig+0xbc>
 8004de6:	4b72      	ldr	r3, [pc, #456]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a71      	ldr	r2, [pc, #452]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	4b6f      	ldr	r3, [pc, #444]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a6e      	ldr	r2, [pc, #440]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCC_OscConfig+0xd4>
 8004e00:	4b6b      	ldr	r3, [pc, #428]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a6a      	ldr	r2, [pc, #424]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b68      	ldr	r3, [pc, #416]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a67      	ldr	r2, [pc, #412]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d013      	beq.n	8004e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fe ff7e 	bl	8003d20 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fe ff7a 	bl	8003d20 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	; 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e1fa      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3a:	4b5d      	ldr	r3, [pc, #372]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0xe4>
 8004e46:	e014      	b.n	8004e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7fe ff6a 	bl	8003d20 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fe ff66 	bl	8003d20 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e1e6      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e62:	4b53      	ldr	r3, [pc, #332]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x10c>
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d063      	beq.n	8004f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e7e:	4b4c      	ldr	r3, [pc, #304]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e8a:	4b49      	ldr	r3, [pc, #292]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d11c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x18c>
 8004e96:	4b46      	ldr	r3, [pc, #280]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d116      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea2:	4b43      	ldr	r3, [pc, #268]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_RCC_OscConfig+0x176>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d001      	beq.n	8004eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e1ba      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eba:	4b3d      	ldr	r3, [pc, #244]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	4939      	ldr	r1, [pc, #228]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ece:	e03a      	b.n	8004f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d020      	beq.n	8004f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ed8:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <HAL_RCC_OscConfig+0x270>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ede:	f7fe ff1f 	bl	8003d20 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee6:	f7fe ff1b 	bl	8003d20 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e19b      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef8:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f04:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4927      	ldr	r1, [pc, #156]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]
 8004f18:	e015      	b.n	8004f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1a:	4b26      	ldr	r3, [pc, #152]	; (8004fb4 <HAL_RCC_OscConfig+0x270>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fe fefe 	bl	8003d20 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f28:	f7fe fefa 	bl	8003d20 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e17a      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3a:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d03a      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d019      	beq.n	8004f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f5a:	4b17      	ldr	r3, [pc, #92]	; (8004fb8 <HAL_RCC_OscConfig+0x274>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f60:	f7fe fede 	bl	8003d20 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f68:	f7fe feda 	bl	8003d20 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e15a      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f86:	2001      	movs	r0, #1
 8004f88:	f000 fb08 	bl	800559c <RCC_Delay>
 8004f8c:	e01c      	b.n	8004fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <HAL_RCC_OscConfig+0x274>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f94:	f7fe fec4 	bl	8003d20 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f9a:	e00f      	b.n	8004fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f9c:	f7fe fec0 	bl	8003d20 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d908      	bls.n	8004fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e140      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	42420000 	.word	0x42420000
 8004fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fbc:	4b9e      	ldr	r3, [pc, #632]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e9      	bne.n	8004f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 80a6 	beq.w	8005122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fda:	4b97      	ldr	r3, [pc, #604]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10d      	bne.n	8005002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe6:	4b94      	ldr	r3, [pc, #592]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	4a93      	ldr	r2, [pc, #588]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	61d3      	str	r3, [r2, #28]
 8004ff2:	4b91      	ldr	r3, [pc, #580]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ffe:	2301      	movs	r3, #1
 8005000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005002:	4b8e      	ldr	r3, [pc, #568]	; (800523c <HAL_RCC_OscConfig+0x4f8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d118      	bne.n	8005040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800500e:	4b8b      	ldr	r3, [pc, #556]	; (800523c <HAL_RCC_OscConfig+0x4f8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a8a      	ldr	r2, [pc, #552]	; (800523c <HAL_RCC_OscConfig+0x4f8>)
 8005014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800501a:	f7fe fe81 	bl	8003d20 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005022:	f7fe fe7d 	bl	8003d20 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b64      	cmp	r3, #100	; 0x64
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e0fd      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005034:	4b81      	ldr	r3, [pc, #516]	; (800523c <HAL_RCC_OscConfig+0x4f8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d106      	bne.n	8005056 <HAL_RCC_OscConfig+0x312>
 8005048:	4b7b      	ldr	r3, [pc, #492]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	4a7a      	ldr	r2, [pc, #488]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	6213      	str	r3, [r2, #32]
 8005054:	e02d      	b.n	80050b2 <HAL_RCC_OscConfig+0x36e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10c      	bne.n	8005078 <HAL_RCC_OscConfig+0x334>
 800505e:	4b76      	ldr	r3, [pc, #472]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	4a75      	ldr	r2, [pc, #468]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	6213      	str	r3, [r2, #32]
 800506a:	4b73      	ldr	r3, [pc, #460]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	4a72      	ldr	r2, [pc, #456]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	6213      	str	r3, [r2, #32]
 8005076:	e01c      	b.n	80050b2 <HAL_RCC_OscConfig+0x36e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b05      	cmp	r3, #5
 800507e:	d10c      	bne.n	800509a <HAL_RCC_OscConfig+0x356>
 8005080:	4b6d      	ldr	r3, [pc, #436]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	4a6c      	ldr	r2, [pc, #432]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8005086:	f043 0304 	orr.w	r3, r3, #4
 800508a:	6213      	str	r3, [r2, #32]
 800508c:	4b6a      	ldr	r3, [pc, #424]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4a69      	ldr	r2, [pc, #420]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	6213      	str	r3, [r2, #32]
 8005098:	e00b      	b.n	80050b2 <HAL_RCC_OscConfig+0x36e>
 800509a:	4b67      	ldr	r3, [pc, #412]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	4a66      	ldr	r2, [pc, #408]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	6213      	str	r3, [r2, #32]
 80050a6:	4b64      	ldr	r3, [pc, #400]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	4a63      	ldr	r2, [pc, #396]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 80050ac:	f023 0304 	bic.w	r3, r3, #4
 80050b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d015      	beq.n	80050e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ba:	f7fe fe31 	bl	8003d20 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c0:	e00a      	b.n	80050d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c2:	f7fe fe2d 	bl	8003d20 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e0ab      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d8:	4b57      	ldr	r3, [pc, #348]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0ee      	beq.n	80050c2 <HAL_RCC_OscConfig+0x37e>
 80050e4:	e014      	b.n	8005110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e6:	f7fe fe1b 	bl	8003d20 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ec:	e00a      	b.n	8005104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ee:	f7fe fe17 	bl	8003d20 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e095      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005104:	4b4c      	ldr	r3, [pc, #304]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1ee      	bne.n	80050ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d105      	bne.n	8005122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005116:	4b48      	ldr	r3, [pc, #288]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	4a47      	ldr	r2, [pc, #284]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 800511c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 8081 	beq.w	800522e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800512c:	4b42      	ldr	r3, [pc, #264]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f003 030c 	and.w	r3, r3, #12
 8005134:	2b08      	cmp	r3, #8
 8005136:	d061      	beq.n	80051fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	2b02      	cmp	r3, #2
 800513e:	d146      	bne.n	80051ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005140:	4b3f      	ldr	r3, [pc, #252]	; (8005240 <HAL_RCC_OscConfig+0x4fc>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005146:	f7fe fdeb 	bl	8003d20 <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800514e:	f7fe fde7 	bl	8003d20 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e067      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005160:	4b35      	ldr	r3, [pc, #212]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f0      	bne.n	800514e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005174:	d108      	bne.n	8005188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005176:	4b30      	ldr	r3, [pc, #192]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	492d      	ldr	r1, [pc, #180]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 8005184:	4313      	orrs	r3, r2
 8005186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005188:	4b2b      	ldr	r3, [pc, #172]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a19      	ldr	r1, [r3, #32]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	430b      	orrs	r3, r1
 800519a:	4927      	ldr	r1, [pc, #156]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a0:	4b27      	ldr	r3, [pc, #156]	; (8005240 <HAL_RCC_OscConfig+0x4fc>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a6:	f7fe fdbb 	bl	8003d20 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ae:	f7fe fdb7 	bl	8003d20 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e037      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051c0:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x46a>
 80051cc:	e02f      	b.n	800522e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ce:	4b1c      	ldr	r3, [pc, #112]	; (8005240 <HAL_RCC_OscConfig+0x4fc>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fe fda4 	bl	8003d20 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fe fda0 	bl	8003d20 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e020      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051ee:	4b12      	ldr	r3, [pc, #72]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x498>
 80051fa:	e018      	b.n	800522e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e013      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <HAL_RCC_OscConfig+0x4f4>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	429a      	cmp	r2, r3
 800521a:	d106      	bne.n	800522a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005226:	429a      	cmp	r2, r3
 8005228:	d001      	beq.n	800522e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40021000 	.word	0x40021000
 800523c:	40007000 	.word	0x40007000
 8005240:	42420060 	.word	0x42420060

08005244 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e0d0      	b.n	80053fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005258:	4b6a      	ldr	r3, [pc, #424]	; (8005404 <HAL_RCC_ClockConfig+0x1c0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	429a      	cmp	r2, r3
 8005264:	d910      	bls.n	8005288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005266:	4b67      	ldr	r3, [pc, #412]	; (8005404 <HAL_RCC_ClockConfig+0x1c0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f023 0207 	bic.w	r2, r3, #7
 800526e:	4965      	ldr	r1, [pc, #404]	; (8005404 <HAL_RCC_ClockConfig+0x1c0>)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	4313      	orrs	r3, r2
 8005274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005276:	4b63      	ldr	r3, [pc, #396]	; (8005404 <HAL_RCC_ClockConfig+0x1c0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0b8      	b.n	80053fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d020      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a0:	4b59      	ldr	r3, [pc, #356]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4a58      	ldr	r2, [pc, #352]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 80052a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052b8:	4b53      	ldr	r3, [pc, #332]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	4a52      	ldr	r2, [pc, #328]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 80052be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80052c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c4:	4b50      	ldr	r3, [pc, #320]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	494d      	ldr	r1, [pc, #308]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d040      	beq.n	8005364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d115      	bne.n	8005322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e07f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d107      	bne.n	8005312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005302:	4b41      	ldr	r3, [pc, #260]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e073      	b.n	80053fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005312:	4b3d      	ldr	r3, [pc, #244]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e06b      	b.n	80053fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005322:	4b39      	ldr	r3, [pc, #228]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f023 0203 	bic.w	r2, r3, #3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	4936      	ldr	r1, [pc, #216]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 8005330:	4313      	orrs	r3, r2
 8005332:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005334:	f7fe fcf4 	bl	8003d20 <HAL_GetTick>
 8005338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	e00a      	b.n	8005352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800533c:	f7fe fcf0 	bl	8003d20 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	f241 3288 	movw	r2, #5000	; 0x1388
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e053      	b.n	80053fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005352:	4b2d      	ldr	r3, [pc, #180]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f003 020c 	and.w	r2, r3, #12
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	429a      	cmp	r2, r3
 8005362:	d1eb      	bne.n	800533c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005364:	4b27      	ldr	r3, [pc, #156]	; (8005404 <HAL_RCC_ClockConfig+0x1c0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d210      	bcs.n	8005394 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005372:	4b24      	ldr	r3, [pc, #144]	; (8005404 <HAL_RCC_ClockConfig+0x1c0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f023 0207 	bic.w	r2, r3, #7
 800537a:	4922      	ldr	r1, [pc, #136]	; (8005404 <HAL_RCC_ClockConfig+0x1c0>)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	4313      	orrs	r3, r2
 8005380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b20      	ldr	r3, [pc, #128]	; (8005404 <HAL_RCC_ClockConfig+0x1c0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e032      	b.n	80053fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a0:	4b19      	ldr	r3, [pc, #100]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4916      	ldr	r1, [pc, #88]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053be:	4b12      	ldr	r3, [pc, #72]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	490e      	ldr	r1, [pc, #56]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053d2:	f000 f821 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80053d6:	4602      	mov	r2, r0
 80053d8:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <HAL_RCC_ClockConfig+0x1c4>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	490a      	ldr	r1, [pc, #40]	; (800540c <HAL_RCC_ClockConfig+0x1c8>)
 80053e4:	5ccb      	ldrb	r3, [r1, r3]
 80053e6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ea:	4a09      	ldr	r2, [pc, #36]	; (8005410 <HAL_RCC_ClockConfig+0x1cc>)
 80053ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <HAL_RCC_ClockConfig+0x1d0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe fa08 	bl	8003808 <HAL_InitTick>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40022000 	.word	0x40022000
 8005408:	40021000 	.word	0x40021000
 800540c:	0800a23c 	.word	0x0800a23c
 8005410:	20000024 	.word	0x20000024
 8005414:	20000028 	.word	0x20000028

08005418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	b490      	push	{r4, r7}
 800541a:	b08a      	sub	sp, #40	; 0x28
 800541c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800541e:	4b2a      	ldr	r3, [pc, #168]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005420:	1d3c      	adds	r4, r7, #4
 8005422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005428:	f240 2301 	movw	r3, #513	; 0x201
 800542c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	2300      	movs	r3, #0
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	2300      	movs	r3, #0
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005442:	4b22      	ldr	r3, [pc, #136]	; (80054cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f003 030c 	and.w	r3, r3, #12
 800544e:	2b04      	cmp	r3, #4
 8005450:	d002      	beq.n	8005458 <HAL_RCC_GetSysClockFreq+0x40>
 8005452:	2b08      	cmp	r3, #8
 8005454:	d003      	beq.n	800545e <HAL_RCC_GetSysClockFreq+0x46>
 8005456:	e02d      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005458:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800545a:	623b      	str	r3, [r7, #32]
      break;
 800545c:	e02d      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	0c9b      	lsrs	r3, r3, #18
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800546a:	4413      	add	r3, r2
 800546c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005470:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d013      	beq.n	80054a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800547c:	4b13      	ldr	r3, [pc, #76]	; (80054cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	0c5b      	lsrs	r3, r3, #17
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800548a:	4413      	add	r3, r2
 800548c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005490:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	4a0e      	ldr	r2, [pc, #56]	; (80054d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005496:	fb02 f203 	mul.w	r2, r2, r3
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
 80054a2:	e004      	b.n	80054ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	4a0b      	ldr	r2, [pc, #44]	; (80054d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054a8:	fb02 f303 	mul.w	r3, r2, r3
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	623b      	str	r3, [r7, #32]
      break;
 80054b2:	e002      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054b4:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054b6:	623b      	str	r3, [r7, #32]
      break;
 80054b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ba:	6a3b      	ldr	r3, [r7, #32]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3728      	adds	r7, #40	; 0x28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc90      	pop	{r4, r7}
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	08009208 	.word	0x08009208
 80054cc:	40021000 	.word	0x40021000
 80054d0:	007a1200 	.word	0x007a1200
 80054d4:	003d0900 	.word	0x003d0900

080054d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054dc:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80054de:	681b      	ldr	r3, [r3, #0]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	20000024 	.word	0x20000024

080054ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054f0:	f7ff fff2 	bl	80054d8 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b05      	ldr	r3, [pc, #20]	; (800550c <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4903      	ldr	r1, [pc, #12]	; (8005510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40021000 	.word	0x40021000
 8005510:	0800a24c 	.word	0x0800a24c

08005514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005518:	f7ff ffde 	bl	80054d8 <HAL_RCC_GetHCLKFreq>
 800551c:	4602      	mov	r2, r0
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	0adb      	lsrs	r3, r3, #11
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	4903      	ldr	r1, [pc, #12]	; (8005538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800552a:	5ccb      	ldrb	r3, [r1, r3]
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40021000 	.word	0x40021000
 8005538:	0800a24c 	.word	0x0800a24c

0800553c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	220f      	movs	r2, #15
 800554a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800554c:	4b11      	ldr	r3, [pc, #68]	; (8005594 <HAL_RCC_GetClockConfig+0x58>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f003 0203 	and.w	r2, r3, #3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005558:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <HAL_RCC_GetClockConfig+0x58>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_RCC_GetClockConfig+0x58>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005570:	4b08      	ldr	r3, [pc, #32]	; (8005594 <HAL_RCC_GetClockConfig+0x58>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	08db      	lsrs	r3, r3, #3
 8005576:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <HAL_RCC_GetClockConfig+0x5c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0207 	and.w	r2, r3, #7
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	40021000 	.word	0x40021000
 8005598:	40022000 	.word	0x40022000

0800559c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055a4:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <RCC_Delay+0x34>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a0a      	ldr	r2, [pc, #40]	; (80055d4 <RCC_Delay+0x38>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	0a5b      	lsrs	r3, r3, #9
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	fb02 f303 	mul.w	r3, r2, r3
 80055b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055b8:	bf00      	nop
  }
  while (Delay --);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1e5a      	subs	r2, r3, #1
 80055be:	60fa      	str	r2, [r7, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f9      	bne.n	80055b8 <RCC_Delay+0x1c>
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr
 80055d0:	20000024 	.word	0x20000024
 80055d4:	10624dd3 	.word	0x10624dd3

080055d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d07d      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80055f4:	2300      	movs	r3, #0
 80055f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f8:	4b4f      	ldr	r3, [pc, #316]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10d      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005604:	4b4c      	ldr	r3, [pc, #304]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	4a4b      	ldr	r2, [pc, #300]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560e:	61d3      	str	r3, [r2, #28]
 8005610:	4b49      	ldr	r3, [pc, #292]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561c:	2301      	movs	r3, #1
 800561e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005620:	4b46      	ldr	r3, [pc, #280]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d118      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800562c:	4b43      	ldr	r3, [pc, #268]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a42      	ldr	r2, [pc, #264]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005638:	f7fe fb72 	bl	8003d20 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563e:	e008      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005640:	f7fe fb6e 	bl	8003d20 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b64      	cmp	r3, #100	; 0x64
 800564c:	d901      	bls.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e06d      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005652:	4b3a      	ldr	r3, [pc, #232]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f0      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800565e:	4b36      	ldr	r3, [pc, #216]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005666:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d02e      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	429a      	cmp	r2, r3
 800567a:	d027      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800567c:	4b2e      	ldr	r3, [pc, #184]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005684:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005686:	4b2e      	ldr	r3, [pc, #184]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005688:	2201      	movs	r2, #1
 800568a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800568c:	4b2c      	ldr	r3, [pc, #176]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005692:	4a29      	ldr	r2, [pc, #164]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d014      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a2:	f7fe fb3d 	bl	8003d20 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a8:	e00a      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056aa:	f7fe fb39 	bl	8003d20 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e036      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c0:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ee      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056cc:	4b1a      	ldr	r3, [pc, #104]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	4917      	ldr	r1, [pc, #92]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056de:	7dfb      	ldrb	r3, [r7, #23]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d105      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e4:	4b14      	ldr	r3, [pc, #80]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	4a13      	ldr	r2, [pc, #76]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056fc:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	490b      	ldr	r1, [pc, #44]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800570a:	4313      	orrs	r3, r2
 800570c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b00      	cmp	r3, #0
 8005718:	d008      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800571a:	4b07      	ldr	r3, [pc, #28]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	4904      	ldr	r1, [pc, #16]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005728:	4313      	orrs	r3, r2
 800572a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	40021000 	.word	0x40021000
 800573c:	40007000 	.word	0x40007000
 8005740:	42420440 	.word	0x42420440

08005744 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005744:	b590      	push	{r4, r7, lr}
 8005746:	b08d      	sub	sp, #52	; 0x34
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800574c:	4b6b      	ldr	r3, [pc, #428]	; (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800574e:	f107 040c 	add.w	r4, r7, #12
 8005752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005758:	f240 2301 	movw	r3, #513	; 0x201
 800575c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
 8005762:	2300      	movs	r3, #0
 8005764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005766:	2300      	movs	r3, #0
 8005768:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	2300      	movs	r3, #0
 8005770:	62bb      	str	r3, [r7, #40]	; 0x28
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3b01      	subs	r3, #1
 8005776:	2b0f      	cmp	r3, #15
 8005778:	f200 80b6 	bhi.w	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800577c:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005782:	bf00      	nop
 8005784:	08005867 	.word	0x08005867
 8005788:	080058cd 	.word	0x080058cd
 800578c:	080058e9 	.word	0x080058e9
 8005790:	08005857 	.word	0x08005857
 8005794:	080058e9 	.word	0x080058e9
 8005798:	080058e9 	.word	0x080058e9
 800579c:	080058e9 	.word	0x080058e9
 80057a0:	0800585f 	.word	0x0800585f
 80057a4:	080058e9 	.word	0x080058e9
 80057a8:	080058e9 	.word	0x080058e9
 80057ac:	080058e9 	.word	0x080058e9
 80057b0:	080058e9 	.word	0x080058e9
 80057b4:	080058e9 	.word	0x080058e9
 80057b8:	080058e9 	.word	0x080058e9
 80057bc:	080058e9 	.word	0x080058e9
 80057c0:	080057c5 	.word	0x080057c5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80057c4:	4b4e      	ldr	r3, [pc, #312]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80057ca:	4b4d      	ldr	r3, [pc, #308]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 808a 	beq.w	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	0c9b      	lsrs	r3, r3, #18
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80057e4:	4413      	add	r3, r2
 80057e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80057ea:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d018      	beq.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057f6:	4b42      	ldr	r3, [pc, #264]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	0c5b      	lsrs	r3, r3, #17
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005804:	4413      	add	r3, r2
 8005806:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00d      	beq.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005816:	4a3b      	ldr	r2, [pc, #236]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	fbb2 f2f3 	udiv	r2, r2, r3
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	fb02 f303 	mul.w	r3, r2, r3
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005826:	e004      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	4a37      	ldr	r2, [pc, #220]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800582c:	fb02 f303 	mul.w	r3, r2, r3
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005832:	4b33      	ldr	r3, [pc, #204]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800583e:	d102      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005844:	e052      	b.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	4a30      	ldr	r2, [pc, #192]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 800584c:	fba2 2303 	umull	r2, r3, r2, r3
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005854:	e04a      	b.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005856:	f7ff fddf 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 800585a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800585c:	e049      	b.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800585e:	f7ff fddb 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 8005862:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005864:	e045      	b.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005866:	4b26      	ldr	r3, [pc, #152]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005876:	d108      	bne.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8005882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28
 8005888:	e01f      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005894:	d109      	bne.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005896:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80058a2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80058a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a8:	e00f      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058b4:	d11c      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80058b6:	4b12      	ldr	r3, [pc, #72]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 80058c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80058c8:	e012      	b.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80058ca:	e011      	b.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80058cc:	f7ff fe22 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 80058d0:	4602      	mov	r2, r0
 80058d2:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	0b9b      	lsrs	r3, r3, #14
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	3301      	adds	r3, #1
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80058e6:	e004      	b.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 80058e8:	bf00      	nop
 80058ea:	e002      	b.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80058ec:	bf00      	nop
 80058ee:	e000      	b.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80058f0:	bf00      	nop
    }
  }
  return (frequency);
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3734      	adds	r7, #52	; 0x34
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd90      	pop	{r4, r7, pc}
 80058fc:	08009218 	.word	0x08009218
 8005900:	40021000 	.word	0x40021000
 8005904:	007a1200 	.word	0x007a1200
 8005908:	003d0900 	.word	0x003d0900
 800590c:	aaaaaaab 	.word	0xaaaaaaab

08005910 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <HAL_SRAM_Init+0x1c>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592a:	d101      	bne.n	8005930 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e038      	b.n	80059a2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d106      	bne.n	800594a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f7fd f9f9 	bl	8002d3c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3308      	adds	r3, #8
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f000 fd31 	bl	80063bc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	461a      	mov	r2, r3
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	f000 fd93 	bl	8006490 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6858      	ldr	r0, [r3, #4]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	f000 fdbe 	bl	80064f8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	6892      	ldr	r2, [r2, #8]
 8005984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	6892      	ldr	r2, [r2, #8]
 8005990:	f041 0101 	orr.w	r1, r1, #1
 8005994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e041      	b.n	8005a40 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fe f8bb 	bl	8003b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f000 fa7d 	bl	8005ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d001      	beq.n	8005a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e044      	b.n	8005aea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <HAL_TIM_Base_Start_IT+0xac>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d018      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1c      	ldr	r2, [pc, #112]	; (8005af8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d013      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a94:	d00e      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a18      	ldr	r2, [pc, #96]	; (8005afc <HAL_TIM_Base_Start_IT+0xb4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d009      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a16      	ldr	r2, [pc, #88]	; (8005b00 <HAL_TIM_Base_Start_IT+0xb8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d004      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <HAL_TIM_Base_Start_IT+0xbc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d111      	bne.n	8005ad8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b06      	cmp	r3, #6
 8005ac4:	d010      	beq.n	8005ae8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0201 	orr.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad6:	e007      	b.n	8005ae8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	40013400 	.word	0x40013400
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40000c00 	.word	0x40000c00

08005b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d122      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d11b      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0202 	mvn.w	r2, #2
 8005b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9b1 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005b50:	e005      	b.n	8005b5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f9a4 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f9b3 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d122      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d11b      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0204 	mvn.w	r2, #4
 8005b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f987 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f97a 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f989 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d122      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d11b      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0208 	mvn.w	r2, #8
 8005bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2204      	movs	r2, #4
 8005be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f95d 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f950 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f95f 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0310 	and.w	r3, r3, #16
 8005c16:	2b10      	cmp	r3, #16
 8005c18:	d122      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b10      	cmp	r3, #16
 8005c26:	d11b      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0210 	mvn.w	r2, #16
 8005c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2208      	movs	r2, #8
 8005c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f933 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f926 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f935 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d10e      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d107      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0201 	mvn.w	r2, #1
 8005c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fd fc70 	bl	800356c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c96:	2b80      	cmp	r3, #128	; 0x80
 8005c98:	d10e      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca4:	2b80      	cmp	r3, #128	; 0x80
 8005ca6:	d107      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fa9d 	bl	80061f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc2:	2b40      	cmp	r3, #64	; 0x40
 8005cc4:	d10e      	bne.n	8005ce4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	d107      	bne.n	8005ce4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f8f9 	bl	8005ed6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d10e      	bne.n	8005d10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d107      	bne.n	8005d10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f06f 0220 	mvn.w	r2, #32
 8005d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fa68 	bl	80061e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d10:	bf00      	nop
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_TIM_ConfigClockSource+0x18>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e0b3      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x180>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d68:	d03e      	beq.n	8005de8 <HAL_TIM_ConfigClockSource+0xd0>
 8005d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6e:	f200 8087 	bhi.w	8005e80 <HAL_TIM_ConfigClockSource+0x168>
 8005d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d76:	f000 8085 	beq.w	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7e:	d87f      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x168>
 8005d80:	2b70      	cmp	r3, #112	; 0x70
 8005d82:	d01a      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0xa2>
 8005d84:	2b70      	cmp	r3, #112	; 0x70
 8005d86:	d87b      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x168>
 8005d88:	2b60      	cmp	r3, #96	; 0x60
 8005d8a:	d050      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0x116>
 8005d8c:	2b60      	cmp	r3, #96	; 0x60
 8005d8e:	d877      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x168>
 8005d90:	2b50      	cmp	r3, #80	; 0x50
 8005d92:	d03c      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0xf6>
 8005d94:	2b50      	cmp	r3, #80	; 0x50
 8005d96:	d873      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x168>
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d058      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x136>
 8005d9c:	2b40      	cmp	r3, #64	; 0x40
 8005d9e:	d86f      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x168>
 8005da0:	2b30      	cmp	r3, #48	; 0x30
 8005da2:	d064      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x156>
 8005da4:	2b30      	cmp	r3, #48	; 0x30
 8005da6:	d86b      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x168>
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d060      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x156>
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d867      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x168>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d05c      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x156>
 8005db4:	2b10      	cmp	r3, #16
 8005db6:	d05a      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005db8:	e062      	b.n	8005e80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6899      	ldr	r1, [r3, #8]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f000 f97e 	bl	80060ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ddc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	609a      	str	r2, [r3, #8]
      break;
 8005de6:	e04e      	b.n	8005e86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	6899      	ldr	r1, [r3, #8]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f000 f967 	bl	80060ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e0a:	609a      	str	r2, [r3, #8]
      break;
 8005e0c:	e03b      	b.n	8005e86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6859      	ldr	r1, [r3, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f000 f8de 	bl	8005fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2150      	movs	r1, #80	; 0x50
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f935 	bl	8006096 <TIM_ITRx_SetConfig>
      break;
 8005e2c:	e02b      	b.n	8005e86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6859      	ldr	r1, [r3, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f000 f8fc 	bl	8006038 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2160      	movs	r1, #96	; 0x60
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 f925 	bl	8006096 <TIM_ITRx_SetConfig>
      break;
 8005e4c:	e01b      	b.n	8005e86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6859      	ldr	r1, [r3, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f000 f8be 	bl	8005fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2140      	movs	r1, #64	; 0x40
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 f915 	bl	8006096 <TIM_ITRx_SetConfig>
      break;
 8005e6c:	e00b      	b.n	8005e86 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4619      	mov	r1, r3
 8005e78:	4610      	mov	r0, r2
 8005e7a:	f000 f90c 	bl	8006096 <TIM_ITRx_SetConfig>
        break;
 8005e7e:	e002      	b.n	8005e86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e80:	bf00      	nop
 8005e82:	e000      	b.n	8005e86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr

08005ed6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bc80      	pop	{r7}
 8005ee6:	4770      	bx	lr

08005ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a33      	ldr	r2, [pc, #204]	; (8005fc8 <TIM_Base_SetConfig+0xe0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d013      	beq.n	8005f28 <TIM_Base_SetConfig+0x40>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a32      	ldr	r2, [pc, #200]	; (8005fcc <TIM_Base_SetConfig+0xe4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00f      	beq.n	8005f28 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0e:	d00b      	beq.n	8005f28 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a2f      	ldr	r2, [pc, #188]	; (8005fd0 <TIM_Base_SetConfig+0xe8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d007      	beq.n	8005f28 <TIM_Base_SetConfig+0x40>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a2e      	ldr	r2, [pc, #184]	; (8005fd4 <TIM_Base_SetConfig+0xec>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_Base_SetConfig+0x40>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a2d      	ldr	r2, [pc, #180]	; (8005fd8 <TIM_Base_SetConfig+0xf0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d108      	bne.n	8005f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a22      	ldr	r2, [pc, #136]	; (8005fc8 <TIM_Base_SetConfig+0xe0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <TIM_Base_SetConfig+0x82>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a21      	ldr	r2, [pc, #132]	; (8005fcc <TIM_Base_SetConfig+0xe4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00f      	beq.n	8005f6a <TIM_Base_SetConfig+0x82>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f50:	d00b      	beq.n	8005f6a <TIM_Base_SetConfig+0x82>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a1e      	ldr	r2, [pc, #120]	; (8005fd0 <TIM_Base_SetConfig+0xe8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d007      	beq.n	8005f6a <TIM_Base_SetConfig+0x82>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a1d      	ldr	r2, [pc, #116]	; (8005fd4 <TIM_Base_SetConfig+0xec>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d003      	beq.n	8005f6a <TIM_Base_SetConfig+0x82>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a1c      	ldr	r2, [pc, #112]	; (8005fd8 <TIM_Base_SetConfig+0xf0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d108      	bne.n	8005f7c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <TIM_Base_SetConfig+0xe0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_Base_SetConfig+0xc8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a08      	ldr	r2, [pc, #32]	; (8005fcc <TIM_Base_SetConfig+0xe4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d103      	bne.n	8005fb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	615a      	str	r2, [r3, #20]
}
 8005fbe:	bf00      	nop
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr
 8005fc8:	40012c00 	.word	0x40012c00
 8005fcc:	40013400 	.word	0x40013400
 8005fd0:	40000400 	.word	0x40000400
 8005fd4:	40000800 	.word	0x40000800
 8005fd8:	40000c00 	.word	0x40000c00

08005fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f023 0201 	bic.w	r2, r3, #1
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f023 030a 	bic.w	r3, r3, #10
 8006018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr

08006038 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	f023 0210 	bic.w	r2, r3, #16
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006062:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	031b      	lsls	r3, r3, #12
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006074:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	621a      	str	r2, [r3, #32]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	bc80      	pop	{r7}
 8006094:	4770      	bx	lr

08006096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f043 0307 	orr.w	r3, r3, #7
 80060b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	609a      	str	r2, [r3, #8]
}
 80060c0:	bf00      	nop
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr

080060ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b087      	sub	sp, #28
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	021a      	lsls	r2, r3, #8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	431a      	orrs	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	609a      	str	r2, [r3, #8]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	bc80      	pop	{r7}
 8006106:	4770      	bx	lr

08006108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800611c:	2302      	movs	r3, #2
 800611e:	e050      	b.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1b      	ldr	r2, [pc, #108]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d018      	beq.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d013      	beq.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006176:	d00e      	beq.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d009      	beq.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a14      	ldr	r2, [pc, #80]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d004      	beq.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a12      	ldr	r2, [pc, #72]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d10c      	bne.n	80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800619c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bc80      	pop	{r7}
 80061ca:	4770      	bx	lr
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40013400 	.word	0x40013400
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40000800 	.word	0x40000800
 80061dc:	40000c00 	.word	0x40000c00

080061e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr

080061f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e03f      	b.n	8006296 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fd fcde 	bl	8003bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2224      	movs	r2, #36	; 0x24
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006246:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f829 	bl	80062a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800625c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695a      	ldr	r2, [r3, #20]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800626c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800627c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80062da:	f023 030c 	bic.w	r3, r3, #12
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	430b      	orrs	r3, r1
 80062e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699a      	ldr	r2, [r3, #24]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a2c      	ldr	r2, [pc, #176]	; (80063b4 <UART_SetConfig+0x114>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d103      	bne.n	8006310 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006308:	f7ff f904 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	e002      	b.n	8006316 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006310:	f7ff f8ec 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8006314:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4613      	mov	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	009a      	lsls	r2, r3, #2
 8006320:	441a      	add	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	fbb2 f3f3 	udiv	r3, r2, r3
 800632c:	4a22      	ldr	r2, [pc, #136]	; (80063b8 <UART_SetConfig+0x118>)
 800632e:	fba2 2303 	umull	r2, r3, r2, r3
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	0119      	lsls	r1, r3, #4
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	009a      	lsls	r2, r3, #2
 8006340:	441a      	add	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	fbb2 f2f3 	udiv	r2, r2, r3
 800634c:	4b1a      	ldr	r3, [pc, #104]	; (80063b8 <UART_SetConfig+0x118>)
 800634e:	fba3 0302 	umull	r0, r3, r3, r2
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	2064      	movs	r0, #100	; 0x64
 8006356:	fb00 f303 	mul.w	r3, r0, r3
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	3332      	adds	r3, #50	; 0x32
 8006360:	4a15      	ldr	r2, [pc, #84]	; (80063b8 <UART_SetConfig+0x118>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800636c:	4419      	add	r1, r3
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	009a      	lsls	r2, r3, #2
 8006378:	441a      	add	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	fbb2 f2f3 	udiv	r2, r2, r3
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <UART_SetConfig+0x118>)
 8006386:	fba3 0302 	umull	r0, r3, r3, r2
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	2064      	movs	r0, #100	; 0x64
 800638e:	fb00 f303 	mul.w	r3, r0, r3
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	3332      	adds	r3, #50	; 0x32
 8006398:	4a07      	ldr	r2, [pc, #28]	; (80063b8 <UART_SetConfig+0x118>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	095b      	lsrs	r3, r3, #5
 80063a0:	f003 020f 	and.w	r2, r3, #15
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	440a      	add	r2, r1
 80063aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40013800 	.word	0x40013800
 80063b8:	51eb851f 	.word	0x51eb851f

080063bc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	f023 0101 	bic.w	r1, r3, #1
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d102      	bne.n	80063ec <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80063e6:	2340      	movs	r3, #64	; 0x40
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	e001      	b.n	80063f0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80063fc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006402:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006408:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800640e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006414:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800641a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8006420:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8006426:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800642c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8006432:	4313      	orrs	r3, r2
 8006434:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800644a:	4b10      	ldr	r3, [pc, #64]	; (800648c <FSMC_NORSRAM_Init+0xd0>)
 800644c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006454:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800645c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	43db      	mvns	r3, r3
 800646c:	ea02 0103 	and.w	r1, r2, r3
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	4319      	orrs	r1, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	0008fb7f 	.word	0x0008fb7f

08006490 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	431a      	orrs	r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	431a      	orrs	r2, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	041b      	lsls	r3, r3, #16
 80064c4:	431a      	orrs	r2, r3
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	051b      	lsls	r3, r3, #20
 80064ce:	431a      	orrs	r2, r3
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	3b02      	subs	r3, #2
 80064d6:	061b      	lsls	r3, r3, #24
 80064d8:	431a      	orrs	r2, r3
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	4313      	orrs	r3, r2
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	3201      	adds	r2, #1
 80064e4:	4319      	orrs	r1, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr

080064f8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800650c:	d11d      	bne.n	800654a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006516:	4b13      	ldr	r3, [pc, #76]	; (8006564 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006518:	4013      	ands	r3, r2
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	6811      	ldr	r1, [r2, #0]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	6852      	ldr	r2, [r2, #4]
 8006522:	0112      	lsls	r2, r2, #4
 8006524:	4311      	orrs	r1, r2
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	6892      	ldr	r2, [r2, #8]
 800652a:	0212      	lsls	r2, r2, #8
 800652c:	4311      	orrs	r1, r2
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	6992      	ldr	r2, [r2, #24]
 8006532:	4311      	orrs	r1, r2
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	68d2      	ldr	r2, [r2, #12]
 8006538:	0412      	lsls	r2, r2, #16
 800653a:	430a      	orrs	r2, r1
 800653c:	ea43 0102 	orr.w	r1, r3, r2
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006548:	e005      	b.n	8006556 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	bc80      	pop	{r7}
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	cff00000 	.word	0xcff00000

08006568 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800657a:	2b84      	cmp	r3, #132	; 0x84
 800657c:	d005      	beq.n	800658a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800657e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	3303      	adds	r3, #3
 8006588:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800658a:	68fb      	ldr	r3, [r7, #12]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	bc80      	pop	{r7}
 8006594:	4770      	bx	lr

08006596 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800659a:	f000 fae7 	bl	8006b6c <vTaskStartScheduler>
  
  return osOK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80065a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065a6:	b089      	sub	sp, #36	; 0x24
 80065a8:	af04      	add	r7, sp, #16
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d020      	beq.n	80065f8 <osThreadCreate+0x54>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d01c      	beq.n	80065f8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685c      	ldr	r4, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681d      	ldr	r5, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691e      	ldr	r6, [r3, #16]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff ffc9 	bl	8006568 <makeFreeRtosPriority>
 80065d6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065e0:	9202      	str	r2, [sp, #8]
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	9100      	str	r1, [sp, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	4632      	mov	r2, r6
 80065ea:	4629      	mov	r1, r5
 80065ec:	4620      	mov	r0, r4
 80065ee:	f000 f8e8 	bl	80067c2 <xTaskCreateStatic>
 80065f2:	4603      	mov	r3, r0
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	e01c      	b.n	8006632 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685c      	ldr	r4, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006604:	b29e      	uxth	r6, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff ffab 	bl	8006568 <makeFreeRtosPriority>
 8006612:	4602      	mov	r2, r0
 8006614:	f107 030c 	add.w	r3, r7, #12
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	9200      	str	r2, [sp, #0]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	4632      	mov	r2, r6
 8006620:	4629      	mov	r1, r5
 8006622:	4620      	mov	r0, r4
 8006624:	f000 f929 	bl	800687a <xTaskCreate>
 8006628:	4603      	mov	r3, r0
 800662a:	2b01      	cmp	r3, #1
 800662c:	d001      	beq.n	8006632 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	e000      	b.n	8006634 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006632:	68fb      	ldr	r3, [r7, #12]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800663c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <osDelay+0x16>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	e000      	b.n	8006654 <osDelay+0x18>
 8006652:	2301      	movs	r3, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fa55 	bl	8006b04 <vTaskDelay>
  
  return osOK;
 800665a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f103 0208 	add.w	r2, r3, #8
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800667c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f103 0208 	add.w	r2, r3, #8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f103 0208 	add.w	r2, r3, #8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr

080066a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr

080066ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	601a      	str	r2, [r3, #0]
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr

08006700 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006716:	d103      	bne.n	8006720 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	e00c      	b.n	800673a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3308      	adds	r3, #8
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	e002      	b.n	800672e <vListInsert+0x2e>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	429a      	cmp	r2, r3
 8006738:	d2f6      	bcs.n	8006728 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	601a      	str	r2, [r3, #0]
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6892      	ldr	r2, [r2, #8]
 8006786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6852      	ldr	r2, [r2, #4]
 8006790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	d103      	bne.n	80067a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	1e5a      	subs	r2, r3, #1
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b08e      	sub	sp, #56	; 0x38
 80067c6:	af04      	add	r7, sp, #16
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	607a      	str	r2, [r7, #4]
 80067ce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067e8:	bf00      	nop
 80067ea:	e7fe      	b.n	80067ea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <xTaskCreateStatic+0x46>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	61fb      	str	r3, [r7, #28]
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006808:	23b4      	movs	r3, #180	; 0xb4
 800680a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2bb4      	cmp	r3, #180	; 0xb4
 8006810:	d00a      	beq.n	8006828 <xTaskCreateStatic+0x66>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	61bb      	str	r3, [r7, #24]
}
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	2b00      	cmp	r3, #0
 800682c:	d01e      	beq.n	800686c <xTaskCreateStatic+0xaa>
 800682e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01b      	beq.n	800686c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800683c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	2202      	movs	r2, #2
 8006842:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006846:	2300      	movs	r3, #0
 8006848:	9303      	str	r3, [sp, #12]
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	9302      	str	r3, [sp, #8]
 800684e:	f107 0314 	add.w	r3, r7, #20
 8006852:	9301      	str	r3, [sp, #4]
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	68b9      	ldr	r1, [r7, #8]
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 f850 	bl	8006904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006866:	f000 f8e3 	bl	8006a30 <prvAddNewTaskToReadyList>
 800686a:	e001      	b.n	8006870 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800686c:	2300      	movs	r3, #0
 800686e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006870:	697b      	ldr	r3, [r7, #20]
	}
 8006872:	4618      	mov	r0, r3
 8006874:	3728      	adds	r7, #40	; 0x28
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800687a:	b580      	push	{r7, lr}
 800687c:	b08c      	sub	sp, #48	; 0x30
 800687e:	af04      	add	r7, sp, #16
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	603b      	str	r3, [r7, #0]
 8006886:	4613      	mov	r3, r2
 8006888:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fe96 	bl	80075c0 <pvPortMalloc>
 8006894:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00e      	beq.n	80068ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800689c:	20b4      	movs	r0, #180	; 0xb4
 800689e:	f000 fe8f 	bl	80075c0 <pvPortMalloc>
 80068a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	631a      	str	r2, [r3, #48]	; 0x30
 80068b0:	e005      	b.n	80068be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068b2:	6978      	ldr	r0, [r7, #20]
 80068b4:	f000 ff48 	bl	8007748 <vPortFree>
 80068b8:	e001      	b.n	80068be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d017      	beq.n	80068f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068cc:	88fa      	ldrh	r2, [r7, #6]
 80068ce:	2300      	movs	r3, #0
 80068d0:	9303      	str	r3, [sp, #12]
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	9302      	str	r3, [sp, #8]
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 f80e 	bl	8006904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068e8:	69f8      	ldr	r0, [r7, #28]
 80068ea:	f000 f8a1 	bl	8006a30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068ee:	2301      	movs	r3, #1
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	e002      	b.n	80068fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068fa:	69bb      	ldr	r3, [r7, #24]
	}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3720      	adds	r7, #32
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800691c:	3b01      	subs	r3, #1
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	f003 0307 	and.w	r3, r3, #7
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <prvInitialiseNewTask+0x48>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	617b      	str	r3, [r7, #20]
}
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800694c:	2300      	movs	r3, #0
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	e012      	b.n	8006978 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	7819      	ldrb	r1, [r3, #0]
 800695a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	4413      	add	r3, r2
 8006960:	3334      	adds	r3, #52	; 0x34
 8006962:	460a      	mov	r2, r1
 8006964:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4413      	add	r3, r2
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d006      	beq.n	8006980 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	3301      	adds	r3, #1
 8006976:	61fb      	str	r3, [r7, #28]
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	2b0f      	cmp	r3, #15
 800697c:	d9e9      	bls.n	8006952 <prvInitialiseNewTask+0x4e>
 800697e:	e000      	b.n	8006982 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006980:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	2b06      	cmp	r3, #6
 800698e:	d901      	bls.n	8006994 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006990:	2306      	movs	r3, #6
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006998:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800699e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	2200      	movs	r2, #0
 80069a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	3304      	adds	r3, #4
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fe79 	bl	80066a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	3318      	adds	r3, #24
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff fe74 	bl	80066a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	f1c3 0207 	rsb	r2, r3, #7
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	334c      	adds	r3, #76	; 0x4c
 80069e4:	2260      	movs	r2, #96	; 0x60
 80069e6:	2100      	movs	r1, #0
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 f8f2 	bl	8007bd2 <memset>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	4a0c      	ldr	r2, [pc, #48]	; (8006a24 <prvInitialiseNewTask+0x120>)
 80069f2:	651a      	str	r2, [r3, #80]	; 0x50
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	4a0c      	ldr	r2, [pc, #48]	; (8006a28 <prvInitialiseNewTask+0x124>)
 80069f8:	655a      	str	r2, [r3, #84]	; 0x54
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	4a0b      	ldr	r2, [pc, #44]	; (8006a2c <prvInitialiseNewTask+0x128>)
 80069fe:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	69b8      	ldr	r0, [r7, #24]
 8006a06:	f000 fc29 	bl	800725c <pxPortInitialiseStack>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a1c:	bf00      	nop
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	0800a274 	.word	0x0800a274
 8006a28:	0800a294 	.word	0x0800a294
 8006a2c:	0800a254 	.word	0x0800a254

08006a30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a38:	f000 fd00 	bl	800743c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a3c:	4b2a      	ldr	r3, [pc, #168]	; (8006ae8 <prvAddNewTaskToReadyList+0xb8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3301      	adds	r3, #1
 8006a42:	4a29      	ldr	r2, [pc, #164]	; (8006ae8 <prvAddNewTaskToReadyList+0xb8>)
 8006a44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a46:	4b29      	ldr	r3, [pc, #164]	; (8006aec <prvAddNewTaskToReadyList+0xbc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a4e:	4a27      	ldr	r2, [pc, #156]	; (8006aec <prvAddNewTaskToReadyList+0xbc>)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a54:	4b24      	ldr	r3, [pc, #144]	; (8006ae8 <prvAddNewTaskToReadyList+0xb8>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d110      	bne.n	8006a7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a5c:	f000 fad2 	bl	8007004 <prvInitialiseTaskLists>
 8006a60:	e00d      	b.n	8006a7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a62:	4b23      	ldr	r3, [pc, #140]	; (8006af0 <prvAddNewTaskToReadyList+0xc0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a6a:	4b20      	ldr	r3, [pc, #128]	; (8006aec <prvAddNewTaskToReadyList+0xbc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d802      	bhi.n	8006a7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a78:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <prvAddNewTaskToReadyList+0xbc>)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a7e:	4b1d      	ldr	r3, [pc, #116]	; (8006af4 <prvAddNewTaskToReadyList+0xc4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	4a1b      	ldr	r2, [pc, #108]	; (8006af4 <prvAddNewTaskToReadyList+0xc4>)
 8006a86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	4b19      	ldr	r3, [pc, #100]	; (8006af8 <prvAddNewTaskToReadyList+0xc8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <prvAddNewTaskToReadyList+0xc8>)
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4a15      	ldr	r2, [pc, #84]	; (8006afc <prvAddNewTaskToReadyList+0xcc>)
 8006aa8:	441a      	add	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3304      	adds	r3, #4
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	f7ff fe02 	bl	80066ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ab6:	f000 fcf1 	bl	800749c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006aba:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <prvAddNewTaskToReadyList+0xc0>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00e      	beq.n	8006ae0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ac2:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <prvAddNewTaskToReadyList+0xbc>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d207      	bcs.n	8006ae0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <prvAddNewTaskToReadyList+0xd0>)
 8006ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	200005f8 	.word	0x200005f8
 8006aec:	200004f8 	.word	0x200004f8
 8006af0:	20000604 	.word	0x20000604
 8006af4:	20000614 	.word	0x20000614
 8006af8:	20000600 	.word	0x20000600
 8006afc:	200004fc 	.word	0x200004fc
 8006b00:	e000ed04 	.word	0xe000ed04

08006b04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d017      	beq.n	8006b46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b16:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <vTaskDelay+0x60>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <vTaskDelay+0x30>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	60bb      	str	r3, [r7, #8]
}
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b34:	f000 f884 	bl	8006c40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b38:	2100      	movs	r1, #0
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fb28 	bl	8007190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b40:	f000 f88c 	bl	8006c5c <xTaskResumeAll>
 8006b44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d107      	bne.n	8006b5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b4c:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <vTaskDelay+0x64>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20000620 	.word	0x20000620
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08a      	sub	sp, #40	; 0x28
 8006b70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b7a:	463a      	mov	r2, r7
 8006b7c:	1d39      	adds	r1, r7, #4
 8006b7e:	f107 0308 	add.w	r3, r7, #8
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fa fd94 	bl	80016b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	9202      	str	r2, [sp, #8]
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	2300      	movs	r3, #0
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	2300      	movs	r3, #0
 8006b98:	460a      	mov	r2, r1
 8006b9a:	4921      	ldr	r1, [pc, #132]	; (8006c20 <vTaskStartScheduler+0xb4>)
 8006b9c:	4821      	ldr	r0, [pc, #132]	; (8006c24 <vTaskStartScheduler+0xb8>)
 8006b9e:	f7ff fe10 	bl	80067c2 <xTaskCreateStatic>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	4a20      	ldr	r2, [pc, #128]	; (8006c28 <vTaskStartScheduler+0xbc>)
 8006ba6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ba8:	4b1f      	ldr	r3, [pc, #124]	; (8006c28 <vTaskStartScheduler+0xbc>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	e001      	b.n	8006bba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d11b      	bne.n	8006bf8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	613b      	str	r3, [r7, #16]
}
 8006bd2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006bd4:	4b15      	ldr	r3, [pc, #84]	; (8006c2c <vTaskStartScheduler+0xc0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	334c      	adds	r3, #76	; 0x4c
 8006bda:	4a15      	ldr	r2, [pc, #84]	; (8006c30 <vTaskStartScheduler+0xc4>)
 8006bdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bde:	4b15      	ldr	r3, [pc, #84]	; (8006c34 <vTaskStartScheduler+0xc8>)
 8006be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006be4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006be6:	4b14      	ldr	r3, [pc, #80]	; (8006c38 <vTaskStartScheduler+0xcc>)
 8006be8:	2201      	movs	r2, #1
 8006bea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006bec:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <vTaskStartScheduler+0xd0>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bf2:	f000 fbb1 	bl	8007358 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bf6:	e00e      	b.n	8006c16 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bfe:	d10a      	bne.n	8006c16 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	60fb      	str	r3, [r7, #12]
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <vTaskStartScheduler+0xa8>
}
 8006c16:	bf00      	nop
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	08009228 	.word	0x08009228
 8006c24:	08006fd5 	.word	0x08006fd5
 8006c28:	2000061c 	.word	0x2000061c
 8006c2c:	200004f8 	.word	0x200004f8
 8006c30:	20000034 	.word	0x20000034
 8006c34:	20000618 	.word	0x20000618
 8006c38:	20000604 	.word	0x20000604
 8006c3c:	200005fc 	.word	0x200005fc

08006c40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c44:	4b04      	ldr	r3, [pc, #16]	; (8006c58 <vTaskSuspendAll+0x18>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	4a03      	ldr	r2, [pc, #12]	; (8006c58 <vTaskSuspendAll+0x18>)
 8006c4c:	6013      	str	r3, [r2, #0]
}
 8006c4e:	bf00      	nop
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bc80      	pop	{r7}
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	20000620 	.word	0x20000620

08006c5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c6a:	4b41      	ldr	r3, [pc, #260]	; (8006d70 <xTaskResumeAll+0x114>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <xTaskResumeAll+0x2c>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	603b      	str	r3, [r7, #0]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c88:	f000 fbd8 	bl	800743c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c8c:	4b38      	ldr	r3, [pc, #224]	; (8006d70 <xTaskResumeAll+0x114>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	4a37      	ldr	r2, [pc, #220]	; (8006d70 <xTaskResumeAll+0x114>)
 8006c94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c96:	4b36      	ldr	r3, [pc, #216]	; (8006d70 <xTaskResumeAll+0x114>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d161      	bne.n	8006d62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c9e:	4b35      	ldr	r3, [pc, #212]	; (8006d74 <xTaskResumeAll+0x118>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d05d      	beq.n	8006d62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ca6:	e02e      	b.n	8006d06 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006ca8:	4b33      	ldr	r3, [pc, #204]	; (8006d78 <xTaskResumeAll+0x11c>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	3318      	adds	r3, #24
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff fd5b 	bl	8006770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff fd56 	bl	8006770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	2201      	movs	r2, #1
 8006cca:	409a      	lsls	r2, r3
 8006ccc:	4b2b      	ldr	r3, [pc, #172]	; (8006d7c <xTaskResumeAll+0x120>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	4a2a      	ldr	r2, [pc, #168]	; (8006d7c <xTaskResumeAll+0x120>)
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4a27      	ldr	r2, [pc, #156]	; (8006d80 <xTaskResumeAll+0x124>)
 8006ce4:	441a      	add	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	4619      	mov	r1, r3
 8006cec:	4610      	mov	r0, r2
 8006cee:	f7ff fce4 	bl	80066ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	4b23      	ldr	r3, [pc, #140]	; (8006d84 <xTaskResumeAll+0x128>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d302      	bcc.n	8006d06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d00:	4b21      	ldr	r3, [pc, #132]	; (8006d88 <xTaskResumeAll+0x12c>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d06:	4b1c      	ldr	r3, [pc, #112]	; (8006d78 <xTaskResumeAll+0x11c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1cc      	bne.n	8006ca8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d14:	f000 fa18 	bl	8007148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d18:	4b1c      	ldr	r3, [pc, #112]	; (8006d8c <xTaskResumeAll+0x130>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d010      	beq.n	8006d46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d24:	f000 f836 	bl	8006d94 <xTaskIncrementTick>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d2e:	4b16      	ldr	r3, [pc, #88]	; (8006d88 <xTaskResumeAll+0x12c>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1f1      	bne.n	8006d24 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006d40:	4b12      	ldr	r3, [pc, #72]	; (8006d8c <xTaskResumeAll+0x130>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d46:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <xTaskResumeAll+0x12c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d009      	beq.n	8006d62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d52:	4b0f      	ldr	r3, [pc, #60]	; (8006d90 <xTaskResumeAll+0x134>)
 8006d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d62:	f000 fb9b 	bl	800749c <vPortExitCritical>

	return xAlreadyYielded;
 8006d66:	68bb      	ldr	r3, [r7, #8]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	20000620 	.word	0x20000620
 8006d74:	200005f8 	.word	0x200005f8
 8006d78:	200005b8 	.word	0x200005b8
 8006d7c:	20000600 	.word	0x20000600
 8006d80:	200004fc 	.word	0x200004fc
 8006d84:	200004f8 	.word	0x200004f8
 8006d88:	2000060c 	.word	0x2000060c
 8006d8c:	20000608 	.word	0x20000608
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d9e:	4b51      	ldr	r3, [pc, #324]	; (8006ee4 <xTaskIncrementTick+0x150>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f040 808d 	bne.w	8006ec2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006da8:	4b4f      	ldr	r3, [pc, #316]	; (8006ee8 <xTaskIncrementTick+0x154>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006db0:	4a4d      	ldr	r2, [pc, #308]	; (8006ee8 <xTaskIncrementTick+0x154>)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d120      	bne.n	8006dfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dbc:	4b4b      	ldr	r3, [pc, #300]	; (8006eec <xTaskIncrementTick+0x158>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <xTaskIncrementTick+0x48>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	603b      	str	r3, [r7, #0]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xTaskIncrementTick+0x46>
 8006ddc:	4b43      	ldr	r3, [pc, #268]	; (8006eec <xTaskIncrementTick+0x158>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	4b43      	ldr	r3, [pc, #268]	; (8006ef0 <xTaskIncrementTick+0x15c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a41      	ldr	r2, [pc, #260]	; (8006eec <xTaskIncrementTick+0x158>)
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	4a41      	ldr	r2, [pc, #260]	; (8006ef0 <xTaskIncrementTick+0x15c>)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	4b40      	ldr	r3, [pc, #256]	; (8006ef4 <xTaskIncrementTick+0x160>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3301      	adds	r3, #1
 8006df6:	4a3f      	ldr	r2, [pc, #252]	; (8006ef4 <xTaskIncrementTick+0x160>)
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	f000 f9a5 	bl	8007148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006dfe:	4b3e      	ldr	r3, [pc, #248]	; (8006ef8 <xTaskIncrementTick+0x164>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d34d      	bcc.n	8006ea4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e08:	4b38      	ldr	r3, [pc, #224]	; (8006eec <xTaskIncrementTick+0x158>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <xTaskIncrementTick+0x82>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <xTaskIncrementTick+0x84>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d004      	beq.n	8006e26 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e1c:	4b36      	ldr	r3, [pc, #216]	; (8006ef8 <xTaskIncrementTick+0x164>)
 8006e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e22:	601a      	str	r2, [r3, #0]
					break;
 8006e24:	e03e      	b.n	8006ea4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e26:	4b31      	ldr	r3, [pc, #196]	; (8006eec <xTaskIncrementTick+0x158>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d203      	bcs.n	8006e46 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e3e:	4a2e      	ldr	r2, [pc, #184]	; (8006ef8 <xTaskIncrementTick+0x164>)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6013      	str	r3, [r2, #0]
						break;
 8006e44:	e02e      	b.n	8006ea4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fc90 	bl	8006770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d004      	beq.n	8006e62 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	3318      	adds	r3, #24
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff fc87 	bl	8006770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	2201      	movs	r2, #1
 8006e68:	409a      	lsls	r2, r3
 8006e6a:	4b24      	ldr	r3, [pc, #144]	; (8006efc <xTaskIncrementTick+0x168>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	4a22      	ldr	r2, [pc, #136]	; (8006efc <xTaskIncrementTick+0x168>)
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4a1f      	ldr	r2, [pc, #124]	; (8006f00 <xTaskIncrementTick+0x16c>)
 8006e82:	441a      	add	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	f7ff fc15 	bl	80066ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e94:	4b1b      	ldr	r3, [pc, #108]	; (8006f04 <xTaskIncrementTick+0x170>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d3b4      	bcc.n	8006e08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ea2:	e7b1      	b.n	8006e08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ea4:	4b17      	ldr	r3, [pc, #92]	; (8006f04 <xTaskIncrementTick+0x170>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eaa:	4915      	ldr	r1, [pc, #84]	; (8006f00 <xTaskIncrementTick+0x16c>)
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d907      	bls.n	8006ecc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	e004      	b.n	8006ecc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ec2:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <xTaskIncrementTick+0x174>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	4a0f      	ldr	r2, [pc, #60]	; (8006f08 <xTaskIncrementTick+0x174>)
 8006eca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ecc:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <xTaskIncrementTick+0x178>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ed8:	697b      	ldr	r3, [r7, #20]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000620 	.word	0x20000620
 8006ee8:	200005fc 	.word	0x200005fc
 8006eec:	200005b0 	.word	0x200005b0
 8006ef0:	200005b4 	.word	0x200005b4
 8006ef4:	20000610 	.word	0x20000610
 8006ef8:	20000618 	.word	0x20000618
 8006efc:	20000600 	.word	0x20000600
 8006f00:	200004fc 	.word	0x200004fc
 8006f04:	200004f8 	.word	0x200004f8
 8006f08:	20000608 	.word	0x20000608
 8006f0c:	2000060c 	.word	0x2000060c

08006f10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f16:	4b29      	ldr	r3, [pc, #164]	; (8006fbc <vTaskSwitchContext+0xac>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f1e:	4b28      	ldr	r3, [pc, #160]	; (8006fc0 <vTaskSwitchContext+0xb0>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f24:	e044      	b.n	8006fb0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006f26:	4b26      	ldr	r3, [pc, #152]	; (8006fc0 <vTaskSwitchContext+0xb0>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f2c:	4b25      	ldr	r3, [pc, #148]	; (8006fc4 <vTaskSwitchContext+0xb4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	fab3 f383 	clz	r3, r3
 8006f38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	f1c3 031f 	rsb	r3, r3, #31
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	4921      	ldr	r1, [pc, #132]	; (8006fc8 <vTaskSwitchContext+0xb8>)
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10a      	bne.n	8006f6c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	607b      	str	r3, [r7, #4]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <vTaskSwitchContext+0x5a>
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4a14      	ldr	r2, [pc, #80]	; (8006fc8 <vTaskSwitchContext+0xb8>)
 8006f78:	4413      	add	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	605a      	str	r2, [r3, #4]
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d104      	bne.n	8006f9c <vTaskSwitchContext+0x8c>
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	605a      	str	r2, [r3, #4]
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <vTaskSwitchContext+0xbc>)
 8006fa4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fa6:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <vTaskSwitchContext+0xbc>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	334c      	adds	r3, #76	; 0x4c
 8006fac:	4a08      	ldr	r2, [pc, #32]	; (8006fd0 <vTaskSwitchContext+0xc0>)
 8006fae:	6013      	str	r3, [r2, #0]
}
 8006fb0:	bf00      	nop
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20000620 	.word	0x20000620
 8006fc0:	2000060c 	.word	0x2000060c
 8006fc4:	20000600 	.word	0x20000600
 8006fc8:	200004fc 	.word	0x200004fc
 8006fcc:	200004f8 	.word	0x200004f8
 8006fd0:	20000034 	.word	0x20000034

08006fd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006fdc:	f000 f852 	bl	8007084 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fe0:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <prvIdleTask+0x28>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d9f9      	bls.n	8006fdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006fe8:	4b05      	ldr	r3, [pc, #20]	; (8007000 <prvIdleTask+0x2c>)
 8006fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ff8:	e7f0      	b.n	8006fdc <prvIdleTask+0x8>
 8006ffa:	bf00      	nop
 8006ffc:	200004fc 	.word	0x200004fc
 8007000:	e000ed04 	.word	0xe000ed04

08007004 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800700a:	2300      	movs	r3, #0
 800700c:	607b      	str	r3, [r7, #4]
 800700e:	e00c      	b.n	800702a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4a12      	ldr	r2, [pc, #72]	; (8007064 <prvInitialiseTaskLists+0x60>)
 800701c:	4413      	add	r3, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff fb20 	bl	8006664 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3301      	adds	r3, #1
 8007028:	607b      	str	r3, [r7, #4]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b06      	cmp	r3, #6
 800702e:	d9ef      	bls.n	8007010 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007030:	480d      	ldr	r0, [pc, #52]	; (8007068 <prvInitialiseTaskLists+0x64>)
 8007032:	f7ff fb17 	bl	8006664 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007036:	480d      	ldr	r0, [pc, #52]	; (800706c <prvInitialiseTaskLists+0x68>)
 8007038:	f7ff fb14 	bl	8006664 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800703c:	480c      	ldr	r0, [pc, #48]	; (8007070 <prvInitialiseTaskLists+0x6c>)
 800703e:	f7ff fb11 	bl	8006664 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007042:	480c      	ldr	r0, [pc, #48]	; (8007074 <prvInitialiseTaskLists+0x70>)
 8007044:	f7ff fb0e 	bl	8006664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007048:	480b      	ldr	r0, [pc, #44]	; (8007078 <prvInitialiseTaskLists+0x74>)
 800704a:	f7ff fb0b 	bl	8006664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800704e:	4b0b      	ldr	r3, [pc, #44]	; (800707c <prvInitialiseTaskLists+0x78>)
 8007050:	4a05      	ldr	r2, [pc, #20]	; (8007068 <prvInitialiseTaskLists+0x64>)
 8007052:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007054:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <prvInitialiseTaskLists+0x7c>)
 8007056:	4a05      	ldr	r2, [pc, #20]	; (800706c <prvInitialiseTaskLists+0x68>)
 8007058:	601a      	str	r2, [r3, #0]
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	200004fc 	.word	0x200004fc
 8007068:	20000588 	.word	0x20000588
 800706c:	2000059c 	.word	0x2000059c
 8007070:	200005b8 	.word	0x200005b8
 8007074:	200005cc 	.word	0x200005cc
 8007078:	200005e4 	.word	0x200005e4
 800707c:	200005b0 	.word	0x200005b0
 8007080:	200005b4 	.word	0x200005b4

08007084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800708a:	e019      	b.n	80070c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800708c:	f000 f9d6 	bl	800743c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007090:	4b10      	ldr	r3, [pc, #64]	; (80070d4 <prvCheckTasksWaitingTermination+0x50>)
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3304      	adds	r3, #4
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff fb67 	bl	8006770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070a2:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <prvCheckTasksWaitingTermination+0x54>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	4a0b      	ldr	r2, [pc, #44]	; (80070d8 <prvCheckTasksWaitingTermination+0x54>)
 80070aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070ac:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <prvCheckTasksWaitingTermination+0x58>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	4a0a      	ldr	r2, [pc, #40]	; (80070dc <prvCheckTasksWaitingTermination+0x58>)
 80070b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070b6:	f000 f9f1 	bl	800749c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f810 	bl	80070e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070c0:	4b06      	ldr	r3, [pc, #24]	; (80070dc <prvCheckTasksWaitingTermination+0x58>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e1      	bne.n	800708c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	200005cc 	.word	0x200005cc
 80070d8:	200005f8 	.word	0x200005f8
 80070dc:	200005e0 	.word	0x200005e0

080070e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	334c      	adds	r3, #76	; 0x4c
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fe4f 	bl	8007d90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d108      	bne.n	800710e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fb21 	bl	8007748 <vPortFree>
				vPortFree( pxTCB );
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fb1e 	bl	8007748 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800710c:	e018      	b.n	8007140 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007114:	2b01      	cmp	r3, #1
 8007116:	d103      	bne.n	8007120 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fb15 	bl	8007748 <vPortFree>
	}
 800711e:	e00f      	b.n	8007140 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007126:	2b02      	cmp	r3, #2
 8007128:	d00a      	beq.n	8007140 <prvDeleteTCB+0x60>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	60fb      	str	r3, [r7, #12]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <prvDeleteTCB+0x5e>
	}
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800714e:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <prvResetNextTaskUnblockTime+0x40>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <prvResetNextTaskUnblockTime+0x14>
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <prvResetNextTaskUnblockTime+0x16>
 800715c:	2300      	movs	r3, #0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d004      	beq.n	800716c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007162:	4b0a      	ldr	r3, [pc, #40]	; (800718c <prvResetNextTaskUnblockTime+0x44>)
 8007164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007168:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800716a:	e008      	b.n	800717e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800716c:	4b06      	ldr	r3, [pc, #24]	; (8007188 <prvResetNextTaskUnblockTime+0x40>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4a04      	ldr	r2, [pc, #16]	; (800718c <prvResetNextTaskUnblockTime+0x44>)
 800717c:	6013      	str	r3, [r2, #0]
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	bc80      	pop	{r7}
 8007186:	4770      	bx	lr
 8007188:	200005b0 	.word	0x200005b0
 800718c:	20000618 	.word	0x20000618

08007190 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800719a:	4b29      	ldr	r3, [pc, #164]	; (8007240 <prvAddCurrentTaskToDelayedList+0xb0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071a0:	4b28      	ldr	r3, [pc, #160]	; (8007244 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fae2 	bl	8006770 <uxListRemove>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10b      	bne.n	80071ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80071b2:	4b24      	ldr	r3, [pc, #144]	; (8007244 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	2201      	movs	r2, #1
 80071ba:	fa02 f303 	lsl.w	r3, r2, r3
 80071be:	43da      	mvns	r2, r3
 80071c0:	4b21      	ldr	r3, [pc, #132]	; (8007248 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4013      	ands	r3, r2
 80071c6:	4a20      	ldr	r2, [pc, #128]	; (8007248 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071d0:	d10a      	bne.n	80071e8 <prvAddCurrentTaskToDelayedList+0x58>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d007      	beq.n	80071e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071d8:	4b1a      	ldr	r3, [pc, #104]	; (8007244 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	481a      	ldr	r0, [pc, #104]	; (800724c <prvAddCurrentTaskToDelayedList+0xbc>)
 80071e2:	f7ff fa6a 	bl	80066ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071e6:	e026      	b.n	8007236 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071f0:	4b14      	ldr	r3, [pc, #80]	; (8007244 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d209      	bcs.n	8007214 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007200:	4b13      	ldr	r3, [pc, #76]	; (8007250 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4b0f      	ldr	r3, [pc, #60]	; (8007244 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3304      	adds	r3, #4
 800720a:	4619      	mov	r1, r3
 800720c:	4610      	mov	r0, r2
 800720e:	f7ff fa77 	bl	8006700 <vListInsert>
}
 8007212:	e010      	b.n	8007236 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007214:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	4b0a      	ldr	r3, [pc, #40]	; (8007244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3304      	adds	r3, #4
 800721e:	4619      	mov	r1, r3
 8007220:	4610      	mov	r0, r2
 8007222:	f7ff fa6d 	bl	8006700 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007226:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	429a      	cmp	r2, r3
 800722e:	d202      	bcs.n	8007236 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007230:	4a09      	ldr	r2, [pc, #36]	; (8007258 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	6013      	str	r3, [r2, #0]
}
 8007236:	bf00      	nop
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	200005fc 	.word	0x200005fc
 8007244:	200004f8 	.word	0x200004f8
 8007248:	20000600 	.word	0x20000600
 800724c:	200005e4 	.word	0x200005e4
 8007250:	200005b4 	.word	0x200005b4
 8007254:	200005b0 	.word	0x200005b0
 8007258:	20000618 	.word	0x20000618

0800725c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3b04      	subs	r3, #4
 800726c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3b04      	subs	r3, #4
 800727a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f023 0201 	bic.w	r2, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3b04      	subs	r3, #4
 800728a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800728c:	4a08      	ldr	r2, [pc, #32]	; (80072b0 <pxPortInitialiseStack+0x54>)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3b14      	subs	r3, #20
 8007296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3b20      	subs	r3, #32
 80072a2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072a4:	68fb      	ldr	r3, [r7, #12]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr
 80072b0:	080072b5 	.word	0x080072b5

080072b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072be:	4b12      	ldr	r3, [pc, #72]	; (8007308 <prvTaskExitError+0x54>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c6:	d00a      	beq.n	80072de <prvTaskExitError+0x2a>
	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	60fb      	str	r3, [r7, #12]
}
 80072da:	bf00      	nop
 80072dc:	e7fe      	b.n	80072dc <prvTaskExitError+0x28>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	60bb      	str	r3, [r7, #8]
}
 80072f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072f2:	bf00      	nop
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0fc      	beq.n	80072f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072fa:	bf00      	nop
 80072fc:	bf00      	nop
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	bc80      	pop	{r7}
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20000030 	.word	0x20000030
 800730c:	00000000 	.word	0x00000000

08007310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007310:	4b07      	ldr	r3, [pc, #28]	; (8007330 <pxCurrentTCBConst2>)
 8007312:	6819      	ldr	r1, [r3, #0]
 8007314:	6808      	ldr	r0, [r1, #0]
 8007316:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800731a:	f380 8809 	msr	PSP, r0
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f04f 0000 	mov.w	r0, #0
 8007326:	f380 8811 	msr	BASEPRI, r0
 800732a:	f04e 0e0d 	orr.w	lr, lr, #13
 800732e:	4770      	bx	lr

08007330 <pxCurrentTCBConst2>:
 8007330:	200004f8 	.word	0x200004f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop

08007338 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007338:	4806      	ldr	r0, [pc, #24]	; (8007354 <prvPortStartFirstTask+0x1c>)
 800733a:	6800      	ldr	r0, [r0, #0]
 800733c:	6800      	ldr	r0, [r0, #0]
 800733e:	f380 8808 	msr	MSP, r0
 8007342:	b662      	cpsie	i
 8007344:	b661      	cpsie	f
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	df00      	svc	0
 8007350:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007352:	bf00      	nop
 8007354:	e000ed08 	.word	0xe000ed08

08007358 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800735e:	4b32      	ldr	r3, [pc, #200]	; (8007428 <xPortStartScheduler+0xd0>)
 8007360:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	22ff      	movs	r2, #255	; 0xff
 800736e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	b2db      	uxtb	r3, r3
 8007376:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007378:	78fb      	ldrb	r3, [r7, #3]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007380:	b2da      	uxtb	r2, r3
 8007382:	4b2a      	ldr	r3, [pc, #168]	; (800742c <xPortStartScheduler+0xd4>)
 8007384:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007386:	4b2a      	ldr	r3, [pc, #168]	; (8007430 <xPortStartScheduler+0xd8>)
 8007388:	2207      	movs	r2, #7
 800738a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800738c:	e009      	b.n	80073a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800738e:	4b28      	ldr	r3, [pc, #160]	; (8007430 <xPortStartScheduler+0xd8>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3b01      	subs	r3, #1
 8007394:	4a26      	ldr	r2, [pc, #152]	; (8007430 <xPortStartScheduler+0xd8>)
 8007396:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007398:	78fb      	ldrb	r3, [r7, #3]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073a2:	78fb      	ldrb	r3, [r7, #3]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073aa:	2b80      	cmp	r3, #128	; 0x80
 80073ac:	d0ef      	beq.n	800738e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073ae:	4b20      	ldr	r3, [pc, #128]	; (8007430 <xPortStartScheduler+0xd8>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f1c3 0307 	rsb	r3, r3, #7
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d00a      	beq.n	80073d0 <xPortStartScheduler+0x78>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	60bb      	str	r3, [r7, #8]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073d0:	4b17      	ldr	r3, [pc, #92]	; (8007430 <xPortStartScheduler+0xd8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	021b      	lsls	r3, r3, #8
 80073d6:	4a16      	ldr	r2, [pc, #88]	; (8007430 <xPortStartScheduler+0xd8>)
 80073d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073da:	4b15      	ldr	r3, [pc, #84]	; (8007430 <xPortStartScheduler+0xd8>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073e2:	4a13      	ldr	r2, [pc, #76]	; (8007430 <xPortStartScheduler+0xd8>)
 80073e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073ee:	4b11      	ldr	r3, [pc, #68]	; (8007434 <xPortStartScheduler+0xdc>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a10      	ldr	r2, [pc, #64]	; (8007434 <xPortStartScheduler+0xdc>)
 80073f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073fa:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <xPortStartScheduler+0xdc>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a0d      	ldr	r2, [pc, #52]	; (8007434 <xPortStartScheduler+0xdc>)
 8007400:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007404:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007406:	f000 f8b9 	bl	800757c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800740a:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <xPortStartScheduler+0xe0>)
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007410:	f7ff ff92 	bl	8007338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007414:	f7ff fd7c 	bl	8006f10 <vTaskSwitchContext>
	prvTaskExitError();
 8007418:	f7ff ff4c 	bl	80072b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	e000e400 	.word	0xe000e400
 800742c:	20000624 	.word	0x20000624
 8007430:	20000628 	.word	0x20000628
 8007434:	e000ed20 	.word	0xe000ed20
 8007438:	20000030 	.word	0x20000030

0800743c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	607b      	str	r3, [r7, #4]
}
 8007454:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007456:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <vPortEnterCritical+0x58>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3301      	adds	r3, #1
 800745c:	4a0d      	ldr	r2, [pc, #52]	; (8007494 <vPortEnterCritical+0x58>)
 800745e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007460:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <vPortEnterCritical+0x58>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d10f      	bne.n	8007488 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007468:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <vPortEnterCritical+0x5c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <vPortEnterCritical+0x4c>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	603b      	str	r3, [r7, #0]
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <vPortEnterCritical+0x4a>
	}
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20000030 	.word	0x20000030
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074a2:	4b11      	ldr	r3, [pc, #68]	; (80074e8 <vPortExitCritical+0x4c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10a      	bne.n	80074c0 <vPortExitCritical+0x24>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	607b      	str	r3, [r7, #4]
}
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074c0:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <vPortExitCritical+0x4c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	4a08      	ldr	r2, [pc, #32]	; (80074e8 <vPortExitCritical+0x4c>)
 80074c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074ca:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <vPortExitCritical+0x4c>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d105      	bne.n	80074de <vPortExitCritical+0x42>
 80074d2:	2300      	movs	r3, #0
 80074d4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr
 80074e8:	20000030 	.word	0x20000030
 80074ec:	00000000 	.word	0x00000000

080074f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074f0:	f3ef 8009 	mrs	r0, PSP
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <pxCurrentTCBConst>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007500:	6010      	str	r0, [r2, #0]
 8007502:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007506:	f04f 0050 	mov.w	r0, #80	; 0x50
 800750a:	f380 8811 	msr	BASEPRI, r0
 800750e:	f7ff fcff 	bl	8006f10 <vTaskSwitchContext>
 8007512:	f04f 0000 	mov.w	r0, #0
 8007516:	f380 8811 	msr	BASEPRI, r0
 800751a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800751e:	6819      	ldr	r1, [r3, #0]
 8007520:	6808      	ldr	r0, [r1, #0]
 8007522:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007526:	f380 8809 	msr	PSP, r0
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	4770      	bx	lr

08007530 <pxCurrentTCBConst>:
 8007530:	200004f8 	.word	0x200004f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop

08007538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	607b      	str	r3, [r7, #4]
}
 8007550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007552:	f7ff fc1f 	bl	8006d94 <xTaskIncrementTick>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <SysTick_Handler+0x40>)
 800755e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	2300      	movs	r3, #0
 8007566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	f383 8811 	msr	BASEPRI, r3
}
 800756e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007570:	bf00      	nop
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	e000ed04 	.word	0xe000ed04

0800757c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <vPortSetupTimerInterrupt+0x30>)
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007586:	4b0a      	ldr	r3, [pc, #40]	; (80075b0 <vPortSetupTimerInterrupt+0x34>)
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800758c:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <vPortSetupTimerInterrupt+0x38>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a09      	ldr	r2, [pc, #36]	; (80075b8 <vPortSetupTimerInterrupt+0x3c>)
 8007592:	fba2 2303 	umull	r2, r3, r2, r3
 8007596:	099b      	lsrs	r3, r3, #6
 8007598:	4a08      	ldr	r2, [pc, #32]	; (80075bc <vPortSetupTimerInterrupt+0x40>)
 800759a:	3b01      	subs	r3, #1
 800759c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800759e:	4b03      	ldr	r3, [pc, #12]	; (80075ac <vPortSetupTimerInterrupt+0x30>)
 80075a0:	2207      	movs	r2, #7
 80075a2:	601a      	str	r2, [r3, #0]
}
 80075a4:	bf00      	nop
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr
 80075ac:	e000e010 	.word	0xe000e010
 80075b0:	e000e018 	.word	0xe000e018
 80075b4:	20000024 	.word	0x20000024
 80075b8:	10624dd3 	.word	0x10624dd3
 80075bc:	e000e014 	.word	0xe000e014

080075c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08a      	sub	sp, #40	; 0x28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075c8:	2300      	movs	r3, #0
 80075ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075cc:	f7ff fb38 	bl	8006c40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075d0:	4b58      	ldr	r3, [pc, #352]	; (8007734 <pvPortMalloc+0x174>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075d8:	f000 f910 	bl	80077fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075dc:	4b56      	ldr	r3, [pc, #344]	; (8007738 <pvPortMalloc+0x178>)
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4013      	ands	r3, r2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f040 808e 	bne.w	8007706 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01d      	beq.n	800762c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075f0:	2208      	movs	r2, #8
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4413      	add	r3, r2
 80075f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d014      	beq.n	800762c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f023 0307 	bic.w	r3, r3, #7
 8007608:	3308      	adds	r3, #8
 800760a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f003 0307 	and.w	r3, r3, #7
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <pvPortMalloc+0x6c>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	617b      	str	r3, [r7, #20]
}
 8007628:	bf00      	nop
 800762a:	e7fe      	b.n	800762a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d069      	beq.n	8007706 <pvPortMalloc+0x146>
 8007632:	4b42      	ldr	r3, [pc, #264]	; (800773c <pvPortMalloc+0x17c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	429a      	cmp	r2, r3
 800763a:	d864      	bhi.n	8007706 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800763c:	4b40      	ldr	r3, [pc, #256]	; (8007740 <pvPortMalloc+0x180>)
 800763e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007640:	4b3f      	ldr	r3, [pc, #252]	; (8007740 <pvPortMalloc+0x180>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007646:	e004      	b.n	8007652 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	429a      	cmp	r2, r3
 800765a:	d903      	bls.n	8007664 <pvPortMalloc+0xa4>
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1f1      	bne.n	8007648 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007664:	4b33      	ldr	r3, [pc, #204]	; (8007734 <pvPortMalloc+0x174>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	429a      	cmp	r2, r3
 800766c:	d04b      	beq.n	8007706 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2208      	movs	r2, #8
 8007674:	4413      	add	r3, r2
 8007676:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	1ad2      	subs	r2, r2, r3
 8007688:	2308      	movs	r3, #8
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	429a      	cmp	r2, r3
 800768e:	d91f      	bls.n	80076d0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4413      	add	r3, r2
 8007696:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <pvPortMalloc+0xf8>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	613b      	str	r3, [r7, #16]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076ca:	69b8      	ldr	r0, [r7, #24]
 80076cc:	f000 f8f8 	bl	80078c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076d0:	4b1a      	ldr	r3, [pc, #104]	; (800773c <pvPortMalloc+0x17c>)
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	4a18      	ldr	r2, [pc, #96]	; (800773c <pvPortMalloc+0x17c>)
 80076dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076de:	4b17      	ldr	r3, [pc, #92]	; (800773c <pvPortMalloc+0x17c>)
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	4b18      	ldr	r3, [pc, #96]	; (8007744 <pvPortMalloc+0x184>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d203      	bcs.n	80076f2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076ea:	4b14      	ldr	r3, [pc, #80]	; (800773c <pvPortMalloc+0x17c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a15      	ldr	r2, [pc, #84]	; (8007744 <pvPortMalloc+0x184>)
 80076f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	4b10      	ldr	r3, [pc, #64]	; (8007738 <pvPortMalloc+0x178>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	431a      	orrs	r2, r3
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007706:	f7ff faa9 	bl	8006c5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <pvPortMalloc+0x16a>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	60fb      	str	r3, [r7, #12]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <pvPortMalloc+0x168>
	return pvReturn;
 800772a:	69fb      	ldr	r3, [r7, #28]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3728      	adds	r7, #40	; 0x28
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	20001234 	.word	0x20001234
 8007738:	20001240 	.word	0x20001240
 800773c:	20001238 	.word	0x20001238
 8007740:	2000122c 	.word	0x2000122c
 8007744:	2000123c 	.word	0x2000123c

08007748 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d048      	beq.n	80077ec <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800775a:	2308      	movs	r3, #8
 800775c:	425b      	negs	r3, r3
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4413      	add	r3, r2
 8007762:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	4b21      	ldr	r3, [pc, #132]	; (80077f4 <vPortFree+0xac>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4013      	ands	r3, r2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10a      	bne.n	800778c <vPortFree+0x44>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	60fb      	str	r3, [r7, #12]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <vPortFree+0x62>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	60bb      	str	r3, [r7, #8]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <vPortFree+0xac>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4013      	ands	r3, r2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d019      	beq.n	80077ec <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d115      	bne.n	80077ec <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <vPortFree+0xac>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	43db      	mvns	r3, r3
 80077ca:	401a      	ands	r2, r3
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077d0:	f7ff fa36 	bl	8006c40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <vPortFree+0xb0>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4413      	add	r3, r2
 80077de:	4a06      	ldr	r2, [pc, #24]	; (80077f8 <vPortFree+0xb0>)
 80077e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077e2:	6938      	ldr	r0, [r7, #16]
 80077e4:	f000 f86c 	bl	80078c0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80077e8:	f7ff fa38 	bl	8006c5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20001240 	.word	0x20001240
 80077f8:	20001238 	.word	0x20001238

080077fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007802:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007806:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007808:	4b27      	ldr	r3, [pc, #156]	; (80078a8 <prvHeapInit+0xac>)
 800780a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00c      	beq.n	8007830 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3307      	adds	r3, #7
 800781a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 0307 	bic.w	r3, r3, #7
 8007822:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	4a1f      	ldr	r2, [pc, #124]	; (80078a8 <prvHeapInit+0xac>)
 800782c:	4413      	add	r3, r2
 800782e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007834:	4a1d      	ldr	r2, [pc, #116]	; (80078ac <prvHeapInit+0xb0>)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800783a:	4b1c      	ldr	r3, [pc, #112]	; (80078ac <prvHeapInit+0xb0>)
 800783c:	2200      	movs	r2, #0
 800783e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	4413      	add	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007848:	2208      	movs	r2, #8
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0307 	bic.w	r3, r3, #7
 8007856:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4a15      	ldr	r2, [pc, #84]	; (80078b0 <prvHeapInit+0xb4>)
 800785c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800785e:	4b14      	ldr	r3, [pc, #80]	; (80078b0 <prvHeapInit+0xb4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2200      	movs	r2, #0
 8007864:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007866:	4b12      	ldr	r3, [pc, #72]	; (80078b0 <prvHeapInit+0xb4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	1ad2      	subs	r2, r2, r3
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800787c:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <prvHeapInit+0xb4>)
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	4a0a      	ldr	r2, [pc, #40]	; (80078b4 <prvHeapInit+0xb8>)
 800788a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	4a09      	ldr	r2, [pc, #36]	; (80078b8 <prvHeapInit+0xbc>)
 8007892:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007894:	4b09      	ldr	r3, [pc, #36]	; (80078bc <prvHeapInit+0xc0>)
 8007896:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800789a:	601a      	str	r2, [r3, #0]
}
 800789c:	bf00      	nop
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	2000062c 	.word	0x2000062c
 80078ac:	2000122c 	.word	0x2000122c
 80078b0:	20001234 	.word	0x20001234
 80078b4:	2000123c 	.word	0x2000123c
 80078b8:	20001238 	.word	0x20001238
 80078bc:	20001240 	.word	0x20001240

080078c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078c8:	4b27      	ldr	r3, [pc, #156]	; (8007968 <prvInsertBlockIntoFreeList+0xa8>)
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e002      	b.n	80078d4 <prvInsertBlockIntoFreeList+0x14>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d8f7      	bhi.n	80078ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	4413      	add	r3, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d108      	bne.n	8007902 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	441a      	add	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	441a      	add	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	429a      	cmp	r2, r3
 8007914:	d118      	bne.n	8007948 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4b14      	ldr	r3, [pc, #80]	; (800796c <prvInsertBlockIntoFreeList+0xac>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	429a      	cmp	r2, r3
 8007920:	d00d      	beq.n	800793e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	441a      	add	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	e008      	b.n	8007950 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800793e:	4b0b      	ldr	r3, [pc, #44]	; (800796c <prvInsertBlockIntoFreeList+0xac>)
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	e003      	b.n	8007950 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	429a      	cmp	r2, r3
 8007956:	d002      	beq.n	800795e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800795e:	bf00      	nop
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	bc80      	pop	{r7}
 8007966:	4770      	bx	lr
 8007968:	2000122c 	.word	0x2000122c
 800796c:	20001234 	.word	0x20001234

08007970 <__errno>:
 8007970:	4b01      	ldr	r3, [pc, #4]	; (8007978 <__errno+0x8>)
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000034 	.word	0x20000034

0800797c <std>:
 800797c:	2300      	movs	r3, #0
 800797e:	b510      	push	{r4, lr}
 8007980:	4604      	mov	r4, r0
 8007982:	e9c0 3300 	strd	r3, r3, [r0]
 8007986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800798a:	6083      	str	r3, [r0, #8]
 800798c:	8181      	strh	r1, [r0, #12]
 800798e:	6643      	str	r3, [r0, #100]	; 0x64
 8007990:	81c2      	strh	r2, [r0, #14]
 8007992:	6183      	str	r3, [r0, #24]
 8007994:	4619      	mov	r1, r3
 8007996:	2208      	movs	r2, #8
 8007998:	305c      	adds	r0, #92	; 0x5c
 800799a:	f000 f91a 	bl	8007bd2 <memset>
 800799e:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <std+0x38>)
 80079a0:	6224      	str	r4, [r4, #32]
 80079a2:	6263      	str	r3, [r4, #36]	; 0x24
 80079a4:	4b04      	ldr	r3, [pc, #16]	; (80079b8 <std+0x3c>)
 80079a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80079a8:	4b04      	ldr	r3, [pc, #16]	; (80079bc <std+0x40>)
 80079aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079ac:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <std+0x44>)
 80079ae:	6323      	str	r3, [r4, #48]	; 0x30
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	bf00      	nop
 80079b4:	08007ea9 	.word	0x08007ea9
 80079b8:	08007ecb 	.word	0x08007ecb
 80079bc:	08007f03 	.word	0x08007f03
 80079c0:	08007f27 	.word	0x08007f27

080079c4 <_cleanup_r>:
 80079c4:	4901      	ldr	r1, [pc, #4]	; (80079cc <_cleanup_r+0x8>)
 80079c6:	f000 b8af 	b.w	8007b28 <_fwalk_reent>
 80079ca:	bf00      	nop
 80079cc:	080080bd 	.word	0x080080bd

080079d0 <__sfmoreglue>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	2568      	movs	r5, #104	; 0x68
 80079d4:	1e4a      	subs	r2, r1, #1
 80079d6:	4355      	muls	r5, r2
 80079d8:	460e      	mov	r6, r1
 80079da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079de:	f000 f901 	bl	8007be4 <_malloc_r>
 80079e2:	4604      	mov	r4, r0
 80079e4:	b140      	cbz	r0, 80079f8 <__sfmoreglue+0x28>
 80079e6:	2100      	movs	r1, #0
 80079e8:	e9c0 1600 	strd	r1, r6, [r0]
 80079ec:	300c      	adds	r0, #12
 80079ee:	60a0      	str	r0, [r4, #8]
 80079f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079f4:	f000 f8ed 	bl	8007bd2 <memset>
 80079f8:	4620      	mov	r0, r4
 80079fa:	bd70      	pop	{r4, r5, r6, pc}

080079fc <__sfp_lock_acquire>:
 80079fc:	4801      	ldr	r0, [pc, #4]	; (8007a04 <__sfp_lock_acquire+0x8>)
 80079fe:	f000 b8d8 	b.w	8007bb2 <__retarget_lock_acquire_recursive>
 8007a02:	bf00      	nop
 8007a04:	2000239c 	.word	0x2000239c

08007a08 <__sfp_lock_release>:
 8007a08:	4801      	ldr	r0, [pc, #4]	; (8007a10 <__sfp_lock_release+0x8>)
 8007a0a:	f000 b8d3 	b.w	8007bb4 <__retarget_lock_release_recursive>
 8007a0e:	bf00      	nop
 8007a10:	2000239c 	.word	0x2000239c

08007a14 <__sinit_lock_acquire>:
 8007a14:	4801      	ldr	r0, [pc, #4]	; (8007a1c <__sinit_lock_acquire+0x8>)
 8007a16:	f000 b8cc 	b.w	8007bb2 <__retarget_lock_acquire_recursive>
 8007a1a:	bf00      	nop
 8007a1c:	20002397 	.word	0x20002397

08007a20 <__sinit_lock_release>:
 8007a20:	4801      	ldr	r0, [pc, #4]	; (8007a28 <__sinit_lock_release+0x8>)
 8007a22:	f000 b8c7 	b.w	8007bb4 <__retarget_lock_release_recursive>
 8007a26:	bf00      	nop
 8007a28:	20002397 	.word	0x20002397

08007a2c <__sinit>:
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	4604      	mov	r4, r0
 8007a30:	f7ff fff0 	bl	8007a14 <__sinit_lock_acquire>
 8007a34:	69a3      	ldr	r3, [r4, #24]
 8007a36:	b11b      	cbz	r3, 8007a40 <__sinit+0x14>
 8007a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a3c:	f7ff bff0 	b.w	8007a20 <__sinit_lock_release>
 8007a40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a44:	6523      	str	r3, [r4, #80]	; 0x50
 8007a46:	4b13      	ldr	r3, [pc, #76]	; (8007a94 <__sinit+0x68>)
 8007a48:	4a13      	ldr	r2, [pc, #76]	; (8007a98 <__sinit+0x6c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a4e:	42a3      	cmp	r3, r4
 8007a50:	bf08      	it	eq
 8007a52:	2301      	moveq	r3, #1
 8007a54:	4620      	mov	r0, r4
 8007a56:	bf08      	it	eq
 8007a58:	61a3      	streq	r3, [r4, #24]
 8007a5a:	f000 f81f 	bl	8007a9c <__sfp>
 8007a5e:	6060      	str	r0, [r4, #4]
 8007a60:	4620      	mov	r0, r4
 8007a62:	f000 f81b 	bl	8007a9c <__sfp>
 8007a66:	60a0      	str	r0, [r4, #8]
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f000 f817 	bl	8007a9c <__sfp>
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2104      	movs	r1, #4
 8007a72:	60e0      	str	r0, [r4, #12]
 8007a74:	6860      	ldr	r0, [r4, #4]
 8007a76:	f7ff ff81 	bl	800797c <std>
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	2109      	movs	r1, #9
 8007a7e:	68a0      	ldr	r0, [r4, #8]
 8007a80:	f7ff ff7c 	bl	800797c <std>
 8007a84:	2202      	movs	r2, #2
 8007a86:	2112      	movs	r1, #18
 8007a88:	68e0      	ldr	r0, [r4, #12]
 8007a8a:	f7ff ff77 	bl	800797c <std>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	61a3      	str	r3, [r4, #24]
 8007a92:	e7d1      	b.n	8007a38 <__sinit+0xc>
 8007a94:	0800a2b4 	.word	0x0800a2b4
 8007a98:	080079c5 	.word	0x080079c5

08007a9c <__sfp>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	f7ff ffac 	bl	80079fc <__sfp_lock_acquire>
 8007aa4:	4b1e      	ldr	r3, [pc, #120]	; (8007b20 <__sfp+0x84>)
 8007aa6:	681e      	ldr	r6, [r3, #0]
 8007aa8:	69b3      	ldr	r3, [r6, #24]
 8007aaa:	b913      	cbnz	r3, 8007ab2 <__sfp+0x16>
 8007aac:	4630      	mov	r0, r6
 8007aae:	f7ff ffbd 	bl	8007a2c <__sinit>
 8007ab2:	3648      	adds	r6, #72	; 0x48
 8007ab4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	d503      	bpl.n	8007ac4 <__sfp+0x28>
 8007abc:	6833      	ldr	r3, [r6, #0]
 8007abe:	b30b      	cbz	r3, 8007b04 <__sfp+0x68>
 8007ac0:	6836      	ldr	r6, [r6, #0]
 8007ac2:	e7f7      	b.n	8007ab4 <__sfp+0x18>
 8007ac4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ac8:	b9d5      	cbnz	r5, 8007b00 <__sfp+0x64>
 8007aca:	4b16      	ldr	r3, [pc, #88]	; (8007b24 <__sfp+0x88>)
 8007acc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ad0:	60e3      	str	r3, [r4, #12]
 8007ad2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ad4:	f000 f86c 	bl	8007bb0 <__retarget_lock_init_recursive>
 8007ad8:	f7ff ff96 	bl	8007a08 <__sfp_lock_release>
 8007adc:	2208      	movs	r2, #8
 8007ade:	4629      	mov	r1, r5
 8007ae0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ae4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ae8:	6025      	str	r5, [r4, #0]
 8007aea:	61a5      	str	r5, [r4, #24]
 8007aec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007af0:	f000 f86f 	bl	8007bd2 <memset>
 8007af4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007af8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007afc:	4620      	mov	r0, r4
 8007afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b00:	3468      	adds	r4, #104	; 0x68
 8007b02:	e7d9      	b.n	8007ab8 <__sfp+0x1c>
 8007b04:	2104      	movs	r1, #4
 8007b06:	4638      	mov	r0, r7
 8007b08:	f7ff ff62 	bl	80079d0 <__sfmoreglue>
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	6030      	str	r0, [r6, #0]
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d1d5      	bne.n	8007ac0 <__sfp+0x24>
 8007b14:	f7ff ff78 	bl	8007a08 <__sfp_lock_release>
 8007b18:	230c      	movs	r3, #12
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	e7ee      	b.n	8007afc <__sfp+0x60>
 8007b1e:	bf00      	nop
 8007b20:	0800a2b4 	.word	0x0800a2b4
 8007b24:	ffff0001 	.word	0xffff0001

08007b28 <_fwalk_reent>:
 8007b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	4688      	mov	r8, r1
 8007b30:	2700      	movs	r7, #0
 8007b32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b3a:	f1b9 0901 	subs.w	r9, r9, #1
 8007b3e:	d505      	bpl.n	8007b4c <_fwalk_reent+0x24>
 8007b40:	6824      	ldr	r4, [r4, #0]
 8007b42:	2c00      	cmp	r4, #0
 8007b44:	d1f7      	bne.n	8007b36 <_fwalk_reent+0xe>
 8007b46:	4638      	mov	r0, r7
 8007b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b4c:	89ab      	ldrh	r3, [r5, #12]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d907      	bls.n	8007b62 <_fwalk_reent+0x3a>
 8007b52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b56:	3301      	adds	r3, #1
 8007b58:	d003      	beq.n	8007b62 <_fwalk_reent+0x3a>
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	47c0      	blx	r8
 8007b60:	4307      	orrs	r7, r0
 8007b62:	3568      	adds	r5, #104	; 0x68
 8007b64:	e7e9      	b.n	8007b3a <_fwalk_reent+0x12>
	...

08007b68 <__libc_init_array>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	4d0c      	ldr	r5, [pc, #48]	; (8007ba0 <__libc_init_array+0x38>)
 8007b6e:	4c0d      	ldr	r4, [pc, #52]	; (8007ba4 <__libc_init_array+0x3c>)
 8007b70:	1b64      	subs	r4, r4, r5
 8007b72:	10a4      	asrs	r4, r4, #2
 8007b74:	42a6      	cmp	r6, r4
 8007b76:	d109      	bne.n	8007b8c <__libc_init_array+0x24>
 8007b78:	f001 f9a4 	bl	8008ec4 <_init>
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	4d0a      	ldr	r5, [pc, #40]	; (8007ba8 <__libc_init_array+0x40>)
 8007b80:	4c0a      	ldr	r4, [pc, #40]	; (8007bac <__libc_init_array+0x44>)
 8007b82:	1b64      	subs	r4, r4, r5
 8007b84:	10a4      	asrs	r4, r4, #2
 8007b86:	42a6      	cmp	r6, r4
 8007b88:	d105      	bne.n	8007b96 <__libc_init_array+0x2e>
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b90:	4798      	blx	r3
 8007b92:	3601      	adds	r6, #1
 8007b94:	e7ee      	b.n	8007b74 <__libc_init_array+0xc>
 8007b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b9a:	4798      	blx	r3
 8007b9c:	3601      	adds	r6, #1
 8007b9e:	e7f2      	b.n	8007b86 <__libc_init_array+0x1e>
 8007ba0:	0800a3a0 	.word	0x0800a3a0
 8007ba4:	0800a3a0 	.word	0x0800a3a0
 8007ba8:	0800a3a0 	.word	0x0800a3a0
 8007bac:	0800a3a4 	.word	0x0800a3a4

08007bb0 <__retarget_lock_init_recursive>:
 8007bb0:	4770      	bx	lr

08007bb2 <__retarget_lock_acquire_recursive>:
 8007bb2:	4770      	bx	lr

08007bb4 <__retarget_lock_release_recursive>:
 8007bb4:	4770      	bx	lr

08007bb6 <memcpy>:
 8007bb6:	440a      	add	r2, r1
 8007bb8:	4291      	cmp	r1, r2
 8007bba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007bbe:	d100      	bne.n	8007bc2 <memcpy+0xc>
 8007bc0:	4770      	bx	lr
 8007bc2:	b510      	push	{r4, lr}
 8007bc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bc8:	4291      	cmp	r1, r2
 8007bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bce:	d1f9      	bne.n	8007bc4 <memcpy+0xe>
 8007bd0:	bd10      	pop	{r4, pc}

08007bd2 <memset>:
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4402      	add	r2, r0
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d100      	bne.n	8007bdc <memset+0xa>
 8007bda:	4770      	bx	lr
 8007bdc:	f803 1b01 	strb.w	r1, [r3], #1
 8007be0:	e7f9      	b.n	8007bd6 <memset+0x4>
	...

08007be4 <_malloc_r>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	1ccd      	adds	r5, r1, #3
 8007be8:	f025 0503 	bic.w	r5, r5, #3
 8007bec:	3508      	adds	r5, #8
 8007bee:	2d0c      	cmp	r5, #12
 8007bf0:	bf38      	it	cc
 8007bf2:	250c      	movcc	r5, #12
 8007bf4:	2d00      	cmp	r5, #0
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	db01      	blt.n	8007bfe <_malloc_r+0x1a>
 8007bfa:	42a9      	cmp	r1, r5
 8007bfc:	d903      	bls.n	8007c06 <_malloc_r+0x22>
 8007bfe:	230c      	movs	r3, #12
 8007c00:	6033      	str	r3, [r6, #0]
 8007c02:	2000      	movs	r0, #0
 8007c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c06:	f000 fac1 	bl	800818c <__malloc_lock>
 8007c0a:	4921      	ldr	r1, [pc, #132]	; (8007c90 <_malloc_r+0xac>)
 8007c0c:	680a      	ldr	r2, [r1, #0]
 8007c0e:	4614      	mov	r4, r2
 8007c10:	b99c      	cbnz	r4, 8007c3a <_malloc_r+0x56>
 8007c12:	4f20      	ldr	r7, [pc, #128]	; (8007c94 <_malloc_r+0xb0>)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	b923      	cbnz	r3, 8007c22 <_malloc_r+0x3e>
 8007c18:	4621      	mov	r1, r4
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f000 f914 	bl	8007e48 <_sbrk_r>
 8007c20:	6038      	str	r0, [r7, #0]
 8007c22:	4629      	mov	r1, r5
 8007c24:	4630      	mov	r0, r6
 8007c26:	f000 f90f 	bl	8007e48 <_sbrk_r>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d123      	bne.n	8007c76 <_malloc_r+0x92>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	4630      	mov	r0, r6
 8007c32:	6033      	str	r3, [r6, #0]
 8007c34:	f000 fab0 	bl	8008198 <__malloc_unlock>
 8007c38:	e7e3      	b.n	8007c02 <_malloc_r+0x1e>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	1b5b      	subs	r3, r3, r5
 8007c3e:	d417      	bmi.n	8007c70 <_malloc_r+0x8c>
 8007c40:	2b0b      	cmp	r3, #11
 8007c42:	d903      	bls.n	8007c4c <_malloc_r+0x68>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	441c      	add	r4, r3
 8007c48:	6025      	str	r5, [r4, #0]
 8007c4a:	e004      	b.n	8007c56 <_malloc_r+0x72>
 8007c4c:	6863      	ldr	r3, [r4, #4]
 8007c4e:	42a2      	cmp	r2, r4
 8007c50:	bf0c      	ite	eq
 8007c52:	600b      	streq	r3, [r1, #0]
 8007c54:	6053      	strne	r3, [r2, #4]
 8007c56:	4630      	mov	r0, r6
 8007c58:	f000 fa9e 	bl	8008198 <__malloc_unlock>
 8007c5c:	f104 000b 	add.w	r0, r4, #11
 8007c60:	1d23      	adds	r3, r4, #4
 8007c62:	f020 0007 	bic.w	r0, r0, #7
 8007c66:	1ac2      	subs	r2, r0, r3
 8007c68:	d0cc      	beq.n	8007c04 <_malloc_r+0x20>
 8007c6a:	1a1b      	subs	r3, r3, r0
 8007c6c:	50a3      	str	r3, [r4, r2]
 8007c6e:	e7c9      	b.n	8007c04 <_malloc_r+0x20>
 8007c70:	4622      	mov	r2, r4
 8007c72:	6864      	ldr	r4, [r4, #4]
 8007c74:	e7cc      	b.n	8007c10 <_malloc_r+0x2c>
 8007c76:	1cc4      	adds	r4, r0, #3
 8007c78:	f024 0403 	bic.w	r4, r4, #3
 8007c7c:	42a0      	cmp	r0, r4
 8007c7e:	d0e3      	beq.n	8007c48 <_malloc_r+0x64>
 8007c80:	1a21      	subs	r1, r4, r0
 8007c82:	4630      	mov	r0, r6
 8007c84:	f000 f8e0 	bl	8007e48 <_sbrk_r>
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d1dd      	bne.n	8007c48 <_malloc_r+0x64>
 8007c8c:	e7cf      	b.n	8007c2e <_malloc_r+0x4a>
 8007c8e:	bf00      	nop
 8007c90:	20001244 	.word	0x20001244
 8007c94:	20001248 	.word	0x20001248

08007c98 <srand>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4b10      	ldr	r3, [pc, #64]	; (8007cdc <srand+0x44>)
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	681d      	ldr	r5, [r3, #0]
 8007ca0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007ca2:	b9b3      	cbnz	r3, 8007cd2 <srand+0x3a>
 8007ca4:	2018      	movs	r0, #24
 8007ca6:	f000 fa69 	bl	800817c <malloc>
 8007caa:	4602      	mov	r2, r0
 8007cac:	63a8      	str	r0, [r5, #56]	; 0x38
 8007cae:	b920      	cbnz	r0, 8007cba <srand+0x22>
 8007cb0:	2142      	movs	r1, #66	; 0x42
 8007cb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <srand+0x48>)
 8007cb4:	480b      	ldr	r0, [pc, #44]	; (8007ce4 <srand+0x4c>)
 8007cb6:	f000 f94d 	bl	8007f54 <__assert_func>
 8007cba:	490b      	ldr	r1, [pc, #44]	; (8007ce8 <srand+0x50>)
 8007cbc:	4b0b      	ldr	r3, [pc, #44]	; (8007cec <srand+0x54>)
 8007cbe:	e9c0 1300 	strd	r1, r3, [r0]
 8007cc2:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <srand+0x58>)
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	6083      	str	r3, [r0, #8]
 8007cc8:	230b      	movs	r3, #11
 8007cca:	8183      	strh	r3, [r0, #12]
 8007ccc:	2001      	movs	r0, #1
 8007cce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007cd6:	611c      	str	r4, [r3, #16]
 8007cd8:	615a      	str	r2, [r3, #20]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	20000034 	.word	0x20000034
 8007ce0:	0800a2b8 	.word	0x0800a2b8
 8007ce4:	0800a2cf 	.word	0x0800a2cf
 8007ce8:	abcd330e 	.word	0xabcd330e
 8007cec:	e66d1234 	.word	0xe66d1234
 8007cf0:	0005deec 	.word	0x0005deec

08007cf4 <rand>:
 8007cf4:	4b17      	ldr	r3, [pc, #92]	; (8007d54 <rand+0x60>)
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	681c      	ldr	r4, [r3, #0]
 8007cfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007cfc:	b9b3      	cbnz	r3, 8007d2c <rand+0x38>
 8007cfe:	2018      	movs	r0, #24
 8007d00:	f000 fa3c 	bl	800817c <malloc>
 8007d04:	4602      	mov	r2, r0
 8007d06:	63a0      	str	r0, [r4, #56]	; 0x38
 8007d08:	b920      	cbnz	r0, 8007d14 <rand+0x20>
 8007d0a:	214e      	movs	r1, #78	; 0x4e
 8007d0c:	4b12      	ldr	r3, [pc, #72]	; (8007d58 <rand+0x64>)
 8007d0e:	4813      	ldr	r0, [pc, #76]	; (8007d5c <rand+0x68>)
 8007d10:	f000 f920 	bl	8007f54 <__assert_func>
 8007d14:	4912      	ldr	r1, [pc, #72]	; (8007d60 <rand+0x6c>)
 8007d16:	4b13      	ldr	r3, [pc, #76]	; (8007d64 <rand+0x70>)
 8007d18:	e9c0 1300 	strd	r1, r3, [r0]
 8007d1c:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <rand+0x74>)
 8007d1e:	2100      	movs	r1, #0
 8007d20:	6083      	str	r3, [r0, #8]
 8007d22:	230b      	movs	r3, #11
 8007d24:	8183      	strh	r3, [r0, #12]
 8007d26:	2001      	movs	r0, #1
 8007d28:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007d2c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d2e:	480f      	ldr	r0, [pc, #60]	; (8007d6c <rand+0x78>)
 8007d30:	690a      	ldr	r2, [r1, #16]
 8007d32:	694b      	ldr	r3, [r1, #20]
 8007d34:	4350      	muls	r0, r2
 8007d36:	4c0e      	ldr	r4, [pc, #56]	; (8007d70 <rand+0x7c>)
 8007d38:	fb04 0003 	mla	r0, r4, r3, r0
 8007d3c:	fba2 3404 	umull	r3, r4, r2, r4
 8007d40:	1c5a      	adds	r2, r3, #1
 8007d42:	4404      	add	r4, r0
 8007d44:	f144 0000 	adc.w	r0, r4, #0
 8007d48:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8007d4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007d50:	bd10      	pop	{r4, pc}
 8007d52:	bf00      	nop
 8007d54:	20000034 	.word	0x20000034
 8007d58:	0800a2b8 	.word	0x0800a2b8
 8007d5c:	0800a2cf 	.word	0x0800a2cf
 8007d60:	abcd330e 	.word	0xabcd330e
 8007d64:	e66d1234 	.word	0xe66d1234
 8007d68:	0005deec 	.word	0x0005deec
 8007d6c:	5851f42d 	.word	0x5851f42d
 8007d70:	4c957f2d 	.word	0x4c957f2d

08007d74 <cleanup_glue>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	460c      	mov	r4, r1
 8007d78:	6809      	ldr	r1, [r1, #0]
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	b109      	cbz	r1, 8007d82 <cleanup_glue+0xe>
 8007d7e:	f7ff fff9 	bl	8007d74 <cleanup_glue>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4628      	mov	r0, r5
 8007d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d8a:	f000 ba0b 	b.w	80081a4 <_free_r>
	...

08007d90 <_reclaim_reent>:
 8007d90:	4b2c      	ldr	r3, [pc, #176]	; (8007e44 <_reclaim_reent+0xb4>)
 8007d92:	b570      	push	{r4, r5, r6, lr}
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4604      	mov	r4, r0
 8007d98:	4283      	cmp	r3, r0
 8007d9a:	d051      	beq.n	8007e40 <_reclaim_reent+0xb0>
 8007d9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d9e:	b143      	cbz	r3, 8007db2 <_reclaim_reent+0x22>
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d14a      	bne.n	8007e3c <_reclaim_reent+0xac>
 8007da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007da8:	6819      	ldr	r1, [r3, #0]
 8007daa:	b111      	cbz	r1, 8007db2 <_reclaim_reent+0x22>
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 f9f9 	bl	80081a4 <_free_r>
 8007db2:	6961      	ldr	r1, [r4, #20]
 8007db4:	b111      	cbz	r1, 8007dbc <_reclaim_reent+0x2c>
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 f9f4 	bl	80081a4 <_free_r>
 8007dbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007dbe:	b111      	cbz	r1, 8007dc6 <_reclaim_reent+0x36>
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 f9ef 	bl	80081a4 <_free_r>
 8007dc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007dc8:	b111      	cbz	r1, 8007dd0 <_reclaim_reent+0x40>
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 f9ea 	bl	80081a4 <_free_r>
 8007dd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007dd2:	b111      	cbz	r1, 8007dda <_reclaim_reent+0x4a>
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 f9e5 	bl	80081a4 <_free_r>
 8007dda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007ddc:	b111      	cbz	r1, 8007de4 <_reclaim_reent+0x54>
 8007dde:	4620      	mov	r0, r4
 8007de0:	f000 f9e0 	bl	80081a4 <_free_r>
 8007de4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007de6:	b111      	cbz	r1, 8007dee <_reclaim_reent+0x5e>
 8007de8:	4620      	mov	r0, r4
 8007dea:	f000 f9db 	bl	80081a4 <_free_r>
 8007dee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007df0:	b111      	cbz	r1, 8007df8 <_reclaim_reent+0x68>
 8007df2:	4620      	mov	r0, r4
 8007df4:	f000 f9d6 	bl	80081a4 <_free_r>
 8007df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dfa:	b111      	cbz	r1, 8007e02 <_reclaim_reent+0x72>
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f000 f9d1 	bl	80081a4 <_free_r>
 8007e02:	69a3      	ldr	r3, [r4, #24]
 8007e04:	b1e3      	cbz	r3, 8007e40 <_reclaim_reent+0xb0>
 8007e06:	4620      	mov	r0, r4
 8007e08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e0a:	4798      	blx	r3
 8007e0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e0e:	b1b9      	cbz	r1, 8007e40 <_reclaim_reent+0xb0>
 8007e10:	4620      	mov	r0, r4
 8007e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e16:	f7ff bfad 	b.w	8007d74 <cleanup_glue>
 8007e1a:	5949      	ldr	r1, [r1, r5]
 8007e1c:	b941      	cbnz	r1, 8007e30 <_reclaim_reent+0xa0>
 8007e1e:	3504      	adds	r5, #4
 8007e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e22:	2d80      	cmp	r5, #128	; 0x80
 8007e24:	68d9      	ldr	r1, [r3, #12]
 8007e26:	d1f8      	bne.n	8007e1a <_reclaim_reent+0x8a>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 f9bb 	bl	80081a4 <_free_r>
 8007e2e:	e7ba      	b.n	8007da6 <_reclaim_reent+0x16>
 8007e30:	680e      	ldr	r6, [r1, #0]
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 f9b6 	bl	80081a4 <_free_r>
 8007e38:	4631      	mov	r1, r6
 8007e3a:	e7ef      	b.n	8007e1c <_reclaim_reent+0x8c>
 8007e3c:	2500      	movs	r5, #0
 8007e3e:	e7ef      	b.n	8007e20 <_reclaim_reent+0x90>
 8007e40:	bd70      	pop	{r4, r5, r6, pc}
 8007e42:	bf00      	nop
 8007e44:	20000034 	.word	0x20000034

08007e48 <_sbrk_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4d05      	ldr	r5, [pc, #20]	; (8007e64 <_sbrk_r+0x1c>)
 8007e4e:	4604      	mov	r4, r0
 8007e50:	4608      	mov	r0, r1
 8007e52:	602b      	str	r3, [r5, #0]
 8007e54:	f7fb fdf0 	bl	8003a38 <_sbrk>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d102      	bne.n	8007e62 <_sbrk_r+0x1a>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	b103      	cbz	r3, 8007e62 <_sbrk_r+0x1a>
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	200023a0 	.word	0x200023a0

08007e68 <siprintf>:
 8007e68:	b40e      	push	{r1, r2, r3}
 8007e6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e6e:	b500      	push	{lr}
 8007e70:	b09c      	sub	sp, #112	; 0x70
 8007e72:	ab1d      	add	r3, sp, #116	; 0x74
 8007e74:	9002      	str	r0, [sp, #8]
 8007e76:	9006      	str	r0, [sp, #24]
 8007e78:	9107      	str	r1, [sp, #28]
 8007e7a:	9104      	str	r1, [sp, #16]
 8007e7c:	4808      	ldr	r0, [pc, #32]	; (8007ea0 <siprintf+0x38>)
 8007e7e:	4909      	ldr	r1, [pc, #36]	; (8007ea4 <siprintf+0x3c>)
 8007e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e84:	9105      	str	r1, [sp, #20]
 8007e86:	6800      	ldr	r0, [r0, #0]
 8007e88:	a902      	add	r1, sp, #8
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	f000 fa32 	bl	80082f4 <_svfiprintf_r>
 8007e90:	2200      	movs	r2, #0
 8007e92:	9b02      	ldr	r3, [sp, #8]
 8007e94:	701a      	strb	r2, [r3, #0]
 8007e96:	b01c      	add	sp, #112	; 0x70
 8007e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e9c:	b003      	add	sp, #12
 8007e9e:	4770      	bx	lr
 8007ea0:	20000034 	.word	0x20000034
 8007ea4:	ffff0208 	.word	0xffff0208

08007ea8 <__sread>:
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	460c      	mov	r4, r1
 8007eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb0:	f000 fe0e 	bl	8008ad0 <_read_r>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	bfab      	itete	ge
 8007eb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eba:	89a3      	ldrhlt	r3, [r4, #12]
 8007ebc:	181b      	addge	r3, r3, r0
 8007ebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ec2:	bfac      	ite	ge
 8007ec4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ec6:	81a3      	strhlt	r3, [r4, #12]
 8007ec8:	bd10      	pop	{r4, pc}

08007eca <__swrite>:
 8007eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ece:	461f      	mov	r7, r3
 8007ed0:	898b      	ldrh	r3, [r1, #12]
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	05db      	lsls	r3, r3, #23
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	4616      	mov	r6, r2
 8007eda:	d505      	bpl.n	8007ee8 <__swrite+0x1e>
 8007edc:	2302      	movs	r3, #2
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee4:	f000 f938 	bl	8008158 <_lseek_r>
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	4632      	mov	r2, r6
 8007eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	463b      	mov	r3, r7
 8007ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	f000 b817 	b.w	8007f30 <_write_r>

08007f02 <__sseek>:
 8007f02:	b510      	push	{r4, lr}
 8007f04:	460c      	mov	r4, r1
 8007f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0a:	f000 f925 	bl	8008158 <_lseek_r>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	bf15      	itete	ne
 8007f14:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f1e:	81a3      	strheq	r3, [r4, #12]
 8007f20:	bf18      	it	ne
 8007f22:	81a3      	strhne	r3, [r4, #12]
 8007f24:	bd10      	pop	{r4, pc}

08007f26 <__sclose>:
 8007f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2a:	f000 b831 	b.w	8007f90 <_close_r>
	...

08007f30 <_write_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4604      	mov	r4, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4d05      	ldr	r5, [pc, #20]	; (8007f50 <_write_r+0x20>)
 8007f3c:	602a      	str	r2, [r5, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f7fb fd2e 	bl	80039a0 <_write>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_write_r+0x1e>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_write_r+0x1e>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	200023a0 	.word	0x200023a0

08007f54 <__assert_func>:
 8007f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f56:	4614      	mov	r4, r2
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <__assert_func+0x2c>)
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68d8      	ldr	r0, [r3, #12]
 8007f62:	b14c      	cbz	r4, 8007f78 <__assert_func+0x24>
 8007f64:	4b07      	ldr	r3, [pc, #28]	; (8007f84 <__assert_func+0x30>)
 8007f66:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f6a:	9100      	str	r1, [sp, #0]
 8007f6c:	462b      	mov	r3, r5
 8007f6e:	4906      	ldr	r1, [pc, #24]	; (8007f88 <__assert_func+0x34>)
 8007f70:	f000 f8e0 	bl	8008134 <fiprintf>
 8007f74:	f000 fe7e 	bl	8008c74 <abort>
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <__assert_func+0x38>)
 8007f7a:	461c      	mov	r4, r3
 8007f7c:	e7f3      	b.n	8007f66 <__assert_func+0x12>
 8007f7e:	bf00      	nop
 8007f80:	20000034 	.word	0x20000034
 8007f84:	0800a32e 	.word	0x0800a32e
 8007f88:	0800a33b 	.word	0x0800a33b
 8007f8c:	0800a369 	.word	0x0800a369

08007f90 <_close_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	2300      	movs	r3, #0
 8007f94:	4d05      	ldr	r5, [pc, #20]	; (8007fac <_close_r+0x1c>)
 8007f96:	4604      	mov	r4, r0
 8007f98:	4608      	mov	r0, r1
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f7fb fd1c 	bl	80039d8 <_close>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_close_r+0x1a>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_close_r+0x1a>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	200023a0 	.word	0x200023a0

08007fb0 <__sflush_r>:
 8007fb0:	898a      	ldrh	r2, [r1, #12]
 8007fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	0710      	lsls	r0, r2, #28
 8007fba:	460c      	mov	r4, r1
 8007fbc:	d458      	bmi.n	8008070 <__sflush_r+0xc0>
 8007fbe:	684b      	ldr	r3, [r1, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dc05      	bgt.n	8007fd0 <__sflush_r+0x20>
 8007fc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	dc02      	bgt.n	8007fd0 <__sflush_r+0x20>
 8007fca:	2000      	movs	r0, #0
 8007fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fd2:	2e00      	cmp	r6, #0
 8007fd4:	d0f9      	beq.n	8007fca <__sflush_r+0x1a>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fdc:	682f      	ldr	r7, [r5, #0]
 8007fde:	602b      	str	r3, [r5, #0]
 8007fe0:	d032      	beq.n	8008048 <__sflush_r+0x98>
 8007fe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	075a      	lsls	r2, r3, #29
 8007fe8:	d505      	bpl.n	8007ff6 <__sflush_r+0x46>
 8007fea:	6863      	ldr	r3, [r4, #4]
 8007fec:	1ac0      	subs	r0, r0, r3
 8007fee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ff0:	b10b      	cbz	r3, 8007ff6 <__sflush_r+0x46>
 8007ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ff4:	1ac0      	subs	r0, r0, r3
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	6a21      	ldr	r1, [r4, #32]
 8008000:	47b0      	blx	r6
 8008002:	1c43      	adds	r3, r0, #1
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	d106      	bne.n	8008016 <__sflush_r+0x66>
 8008008:	6829      	ldr	r1, [r5, #0]
 800800a:	291d      	cmp	r1, #29
 800800c:	d82c      	bhi.n	8008068 <__sflush_r+0xb8>
 800800e:	4a2a      	ldr	r2, [pc, #168]	; (80080b8 <__sflush_r+0x108>)
 8008010:	40ca      	lsrs	r2, r1
 8008012:	07d6      	lsls	r6, r2, #31
 8008014:	d528      	bpl.n	8008068 <__sflush_r+0xb8>
 8008016:	2200      	movs	r2, #0
 8008018:	6062      	str	r2, [r4, #4]
 800801a:	6922      	ldr	r2, [r4, #16]
 800801c:	04d9      	lsls	r1, r3, #19
 800801e:	6022      	str	r2, [r4, #0]
 8008020:	d504      	bpl.n	800802c <__sflush_r+0x7c>
 8008022:	1c42      	adds	r2, r0, #1
 8008024:	d101      	bne.n	800802a <__sflush_r+0x7a>
 8008026:	682b      	ldr	r3, [r5, #0]
 8008028:	b903      	cbnz	r3, 800802c <__sflush_r+0x7c>
 800802a:	6560      	str	r0, [r4, #84]	; 0x54
 800802c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800802e:	602f      	str	r7, [r5, #0]
 8008030:	2900      	cmp	r1, #0
 8008032:	d0ca      	beq.n	8007fca <__sflush_r+0x1a>
 8008034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008038:	4299      	cmp	r1, r3
 800803a:	d002      	beq.n	8008042 <__sflush_r+0x92>
 800803c:	4628      	mov	r0, r5
 800803e:	f000 f8b1 	bl	80081a4 <_free_r>
 8008042:	2000      	movs	r0, #0
 8008044:	6360      	str	r0, [r4, #52]	; 0x34
 8008046:	e7c1      	b.n	8007fcc <__sflush_r+0x1c>
 8008048:	6a21      	ldr	r1, [r4, #32]
 800804a:	2301      	movs	r3, #1
 800804c:	4628      	mov	r0, r5
 800804e:	47b0      	blx	r6
 8008050:	1c41      	adds	r1, r0, #1
 8008052:	d1c7      	bne.n	8007fe4 <__sflush_r+0x34>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0c4      	beq.n	8007fe4 <__sflush_r+0x34>
 800805a:	2b1d      	cmp	r3, #29
 800805c:	d001      	beq.n	8008062 <__sflush_r+0xb2>
 800805e:	2b16      	cmp	r3, #22
 8008060:	d101      	bne.n	8008066 <__sflush_r+0xb6>
 8008062:	602f      	str	r7, [r5, #0]
 8008064:	e7b1      	b.n	8007fca <__sflush_r+0x1a>
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800806c:	81a3      	strh	r3, [r4, #12]
 800806e:	e7ad      	b.n	8007fcc <__sflush_r+0x1c>
 8008070:	690f      	ldr	r7, [r1, #16]
 8008072:	2f00      	cmp	r7, #0
 8008074:	d0a9      	beq.n	8007fca <__sflush_r+0x1a>
 8008076:	0793      	lsls	r3, r2, #30
 8008078:	bf18      	it	ne
 800807a:	2300      	movne	r3, #0
 800807c:	680e      	ldr	r6, [r1, #0]
 800807e:	bf08      	it	eq
 8008080:	694b      	ldreq	r3, [r1, #20]
 8008082:	eba6 0807 	sub.w	r8, r6, r7
 8008086:	600f      	str	r7, [r1, #0]
 8008088:	608b      	str	r3, [r1, #8]
 800808a:	f1b8 0f00 	cmp.w	r8, #0
 800808e:	dd9c      	ble.n	8007fca <__sflush_r+0x1a>
 8008090:	4643      	mov	r3, r8
 8008092:	463a      	mov	r2, r7
 8008094:	4628      	mov	r0, r5
 8008096:	6a21      	ldr	r1, [r4, #32]
 8008098:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800809a:	47b0      	blx	r6
 800809c:	2800      	cmp	r0, #0
 800809e:	dc06      	bgt.n	80080ae <__sflush_r+0xfe>
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080aa:	81a3      	strh	r3, [r4, #12]
 80080ac:	e78e      	b.n	8007fcc <__sflush_r+0x1c>
 80080ae:	4407      	add	r7, r0
 80080b0:	eba8 0800 	sub.w	r8, r8, r0
 80080b4:	e7e9      	b.n	800808a <__sflush_r+0xda>
 80080b6:	bf00      	nop
 80080b8:	20400001 	.word	0x20400001

080080bc <_fflush_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	690b      	ldr	r3, [r1, #16]
 80080c0:	4605      	mov	r5, r0
 80080c2:	460c      	mov	r4, r1
 80080c4:	b913      	cbnz	r3, 80080cc <_fflush_r+0x10>
 80080c6:	2500      	movs	r5, #0
 80080c8:	4628      	mov	r0, r5
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	b118      	cbz	r0, 80080d6 <_fflush_r+0x1a>
 80080ce:	6983      	ldr	r3, [r0, #24]
 80080d0:	b90b      	cbnz	r3, 80080d6 <_fflush_r+0x1a>
 80080d2:	f7ff fcab 	bl	8007a2c <__sinit>
 80080d6:	4b14      	ldr	r3, [pc, #80]	; (8008128 <_fflush_r+0x6c>)
 80080d8:	429c      	cmp	r4, r3
 80080da:	d11b      	bne.n	8008114 <_fflush_r+0x58>
 80080dc:	686c      	ldr	r4, [r5, #4]
 80080de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0ef      	beq.n	80080c6 <_fflush_r+0xa>
 80080e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080e8:	07d0      	lsls	r0, r2, #31
 80080ea:	d404      	bmi.n	80080f6 <_fflush_r+0x3a>
 80080ec:	0599      	lsls	r1, r3, #22
 80080ee:	d402      	bmi.n	80080f6 <_fflush_r+0x3a>
 80080f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080f2:	f7ff fd5e 	bl	8007bb2 <__retarget_lock_acquire_recursive>
 80080f6:	4628      	mov	r0, r5
 80080f8:	4621      	mov	r1, r4
 80080fa:	f7ff ff59 	bl	8007fb0 <__sflush_r>
 80080fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008100:	4605      	mov	r5, r0
 8008102:	07da      	lsls	r2, r3, #31
 8008104:	d4e0      	bmi.n	80080c8 <_fflush_r+0xc>
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	059b      	lsls	r3, r3, #22
 800810a:	d4dd      	bmi.n	80080c8 <_fflush_r+0xc>
 800810c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810e:	f7ff fd51 	bl	8007bb4 <__retarget_lock_release_recursive>
 8008112:	e7d9      	b.n	80080c8 <_fflush_r+0xc>
 8008114:	4b05      	ldr	r3, [pc, #20]	; (800812c <_fflush_r+0x70>)
 8008116:	429c      	cmp	r4, r3
 8008118:	d101      	bne.n	800811e <_fflush_r+0x62>
 800811a:	68ac      	ldr	r4, [r5, #8]
 800811c:	e7df      	b.n	80080de <_fflush_r+0x22>
 800811e:	4b04      	ldr	r3, [pc, #16]	; (8008130 <_fflush_r+0x74>)
 8008120:	429c      	cmp	r4, r3
 8008122:	bf08      	it	eq
 8008124:	68ec      	ldreq	r4, [r5, #12]
 8008126:	e7da      	b.n	80080de <_fflush_r+0x22>
 8008128:	0800a274 	.word	0x0800a274
 800812c:	0800a294 	.word	0x0800a294
 8008130:	0800a254 	.word	0x0800a254

08008134 <fiprintf>:
 8008134:	b40e      	push	{r1, r2, r3}
 8008136:	b503      	push	{r0, r1, lr}
 8008138:	4601      	mov	r1, r0
 800813a:	ab03      	add	r3, sp, #12
 800813c:	4805      	ldr	r0, [pc, #20]	; (8008154 <fiprintf+0x20>)
 800813e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008142:	6800      	ldr	r0, [r0, #0]
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	f000 f9fd 	bl	8008544 <_vfiprintf_r>
 800814a:	b002      	add	sp, #8
 800814c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008150:	b003      	add	sp, #12
 8008152:	4770      	bx	lr
 8008154:	20000034 	.word	0x20000034

08008158 <_lseek_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4604      	mov	r4, r0
 800815c:	4608      	mov	r0, r1
 800815e:	4611      	mov	r1, r2
 8008160:	2200      	movs	r2, #0
 8008162:	4d05      	ldr	r5, [pc, #20]	; (8008178 <_lseek_r+0x20>)
 8008164:	602a      	str	r2, [r5, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	f7fb fc5a 	bl	8003a20 <_lseek>
 800816c:	1c43      	adds	r3, r0, #1
 800816e:	d102      	bne.n	8008176 <_lseek_r+0x1e>
 8008170:	682b      	ldr	r3, [r5, #0]
 8008172:	b103      	cbz	r3, 8008176 <_lseek_r+0x1e>
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	bd38      	pop	{r3, r4, r5, pc}
 8008178:	200023a0 	.word	0x200023a0

0800817c <malloc>:
 800817c:	4b02      	ldr	r3, [pc, #8]	; (8008188 <malloc+0xc>)
 800817e:	4601      	mov	r1, r0
 8008180:	6818      	ldr	r0, [r3, #0]
 8008182:	f7ff bd2f 	b.w	8007be4 <_malloc_r>
 8008186:	bf00      	nop
 8008188:	20000034 	.word	0x20000034

0800818c <__malloc_lock>:
 800818c:	4801      	ldr	r0, [pc, #4]	; (8008194 <__malloc_lock+0x8>)
 800818e:	f7ff bd10 	b.w	8007bb2 <__retarget_lock_acquire_recursive>
 8008192:	bf00      	nop
 8008194:	20002398 	.word	0x20002398

08008198 <__malloc_unlock>:
 8008198:	4801      	ldr	r0, [pc, #4]	; (80081a0 <__malloc_unlock+0x8>)
 800819a:	f7ff bd0b 	b.w	8007bb4 <__retarget_lock_release_recursive>
 800819e:	bf00      	nop
 80081a0:	20002398 	.word	0x20002398

080081a4 <_free_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4605      	mov	r5, r0
 80081a8:	2900      	cmp	r1, #0
 80081aa:	d043      	beq.n	8008234 <_free_r+0x90>
 80081ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081b0:	1f0c      	subs	r4, r1, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bfb8      	it	lt
 80081b6:	18e4      	addlt	r4, r4, r3
 80081b8:	f7ff ffe8 	bl	800818c <__malloc_lock>
 80081bc:	4a1e      	ldr	r2, [pc, #120]	; (8008238 <_free_r+0x94>)
 80081be:	6813      	ldr	r3, [r2, #0]
 80081c0:	4610      	mov	r0, r2
 80081c2:	b933      	cbnz	r3, 80081d2 <_free_r+0x2e>
 80081c4:	6063      	str	r3, [r4, #4]
 80081c6:	6014      	str	r4, [r2, #0]
 80081c8:	4628      	mov	r0, r5
 80081ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ce:	f7ff bfe3 	b.w	8008198 <__malloc_unlock>
 80081d2:	42a3      	cmp	r3, r4
 80081d4:	d90a      	bls.n	80081ec <_free_r+0x48>
 80081d6:	6821      	ldr	r1, [r4, #0]
 80081d8:	1862      	adds	r2, r4, r1
 80081da:	4293      	cmp	r3, r2
 80081dc:	bf01      	itttt	eq
 80081de:	681a      	ldreq	r2, [r3, #0]
 80081e0:	685b      	ldreq	r3, [r3, #4]
 80081e2:	1852      	addeq	r2, r2, r1
 80081e4:	6022      	streq	r2, [r4, #0]
 80081e6:	6063      	str	r3, [r4, #4]
 80081e8:	6004      	str	r4, [r0, #0]
 80081ea:	e7ed      	b.n	80081c8 <_free_r+0x24>
 80081ec:	461a      	mov	r2, r3
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	b10b      	cbz	r3, 80081f6 <_free_r+0x52>
 80081f2:	42a3      	cmp	r3, r4
 80081f4:	d9fa      	bls.n	80081ec <_free_r+0x48>
 80081f6:	6811      	ldr	r1, [r2, #0]
 80081f8:	1850      	adds	r0, r2, r1
 80081fa:	42a0      	cmp	r0, r4
 80081fc:	d10b      	bne.n	8008216 <_free_r+0x72>
 80081fe:	6820      	ldr	r0, [r4, #0]
 8008200:	4401      	add	r1, r0
 8008202:	1850      	adds	r0, r2, r1
 8008204:	4283      	cmp	r3, r0
 8008206:	6011      	str	r1, [r2, #0]
 8008208:	d1de      	bne.n	80081c8 <_free_r+0x24>
 800820a:	6818      	ldr	r0, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	4401      	add	r1, r0
 8008210:	6011      	str	r1, [r2, #0]
 8008212:	6053      	str	r3, [r2, #4]
 8008214:	e7d8      	b.n	80081c8 <_free_r+0x24>
 8008216:	d902      	bls.n	800821e <_free_r+0x7a>
 8008218:	230c      	movs	r3, #12
 800821a:	602b      	str	r3, [r5, #0]
 800821c:	e7d4      	b.n	80081c8 <_free_r+0x24>
 800821e:	6820      	ldr	r0, [r4, #0]
 8008220:	1821      	adds	r1, r4, r0
 8008222:	428b      	cmp	r3, r1
 8008224:	bf01      	itttt	eq
 8008226:	6819      	ldreq	r1, [r3, #0]
 8008228:	685b      	ldreq	r3, [r3, #4]
 800822a:	1809      	addeq	r1, r1, r0
 800822c:	6021      	streq	r1, [r4, #0]
 800822e:	6063      	str	r3, [r4, #4]
 8008230:	6054      	str	r4, [r2, #4]
 8008232:	e7c9      	b.n	80081c8 <_free_r+0x24>
 8008234:	bd38      	pop	{r3, r4, r5, pc}
 8008236:	bf00      	nop
 8008238:	20001244 	.word	0x20001244

0800823c <__ssputs_r>:
 800823c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008240:	688e      	ldr	r6, [r1, #8]
 8008242:	4682      	mov	sl, r0
 8008244:	429e      	cmp	r6, r3
 8008246:	460c      	mov	r4, r1
 8008248:	4690      	mov	r8, r2
 800824a:	461f      	mov	r7, r3
 800824c:	d838      	bhi.n	80082c0 <__ssputs_r+0x84>
 800824e:	898a      	ldrh	r2, [r1, #12]
 8008250:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008254:	d032      	beq.n	80082bc <__ssputs_r+0x80>
 8008256:	6825      	ldr	r5, [r4, #0]
 8008258:	6909      	ldr	r1, [r1, #16]
 800825a:	3301      	adds	r3, #1
 800825c:	eba5 0901 	sub.w	r9, r5, r1
 8008260:	6965      	ldr	r5, [r4, #20]
 8008262:	444b      	add	r3, r9
 8008264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800826c:	106d      	asrs	r5, r5, #1
 800826e:	429d      	cmp	r5, r3
 8008270:	bf38      	it	cc
 8008272:	461d      	movcc	r5, r3
 8008274:	0553      	lsls	r3, r2, #21
 8008276:	d531      	bpl.n	80082dc <__ssputs_r+0xa0>
 8008278:	4629      	mov	r1, r5
 800827a:	f7ff fcb3 	bl	8007be4 <_malloc_r>
 800827e:	4606      	mov	r6, r0
 8008280:	b950      	cbnz	r0, 8008298 <__ssputs_r+0x5c>
 8008282:	230c      	movs	r3, #12
 8008284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008288:	f8ca 3000 	str.w	r3, [sl]
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008292:	81a3      	strh	r3, [r4, #12]
 8008294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008298:	464a      	mov	r2, r9
 800829a:	6921      	ldr	r1, [r4, #16]
 800829c:	f7ff fc8b 	bl	8007bb6 <memcpy>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082aa:	81a3      	strh	r3, [r4, #12]
 80082ac:	6126      	str	r6, [r4, #16]
 80082ae:	444e      	add	r6, r9
 80082b0:	6026      	str	r6, [r4, #0]
 80082b2:	463e      	mov	r6, r7
 80082b4:	6165      	str	r5, [r4, #20]
 80082b6:	eba5 0509 	sub.w	r5, r5, r9
 80082ba:	60a5      	str	r5, [r4, #8]
 80082bc:	42be      	cmp	r6, r7
 80082be:	d900      	bls.n	80082c2 <__ssputs_r+0x86>
 80082c0:	463e      	mov	r6, r7
 80082c2:	4632      	mov	r2, r6
 80082c4:	4641      	mov	r1, r8
 80082c6:	6820      	ldr	r0, [r4, #0]
 80082c8:	f000 fd4e 	bl	8008d68 <memmove>
 80082cc:	68a3      	ldr	r3, [r4, #8]
 80082ce:	6822      	ldr	r2, [r4, #0]
 80082d0:	1b9b      	subs	r3, r3, r6
 80082d2:	4432      	add	r2, r6
 80082d4:	2000      	movs	r0, #0
 80082d6:	60a3      	str	r3, [r4, #8]
 80082d8:	6022      	str	r2, [r4, #0]
 80082da:	e7db      	b.n	8008294 <__ssputs_r+0x58>
 80082dc:	462a      	mov	r2, r5
 80082de:	f000 fd5d 	bl	8008d9c <_realloc_r>
 80082e2:	4606      	mov	r6, r0
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d1e1      	bne.n	80082ac <__ssputs_r+0x70>
 80082e8:	4650      	mov	r0, sl
 80082ea:	6921      	ldr	r1, [r4, #16]
 80082ec:	f7ff ff5a 	bl	80081a4 <_free_r>
 80082f0:	e7c7      	b.n	8008282 <__ssputs_r+0x46>
	...

080082f4 <_svfiprintf_r>:
 80082f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f8:	4698      	mov	r8, r3
 80082fa:	898b      	ldrh	r3, [r1, #12]
 80082fc:	4607      	mov	r7, r0
 80082fe:	061b      	lsls	r3, r3, #24
 8008300:	460d      	mov	r5, r1
 8008302:	4614      	mov	r4, r2
 8008304:	b09d      	sub	sp, #116	; 0x74
 8008306:	d50e      	bpl.n	8008326 <_svfiprintf_r+0x32>
 8008308:	690b      	ldr	r3, [r1, #16]
 800830a:	b963      	cbnz	r3, 8008326 <_svfiprintf_r+0x32>
 800830c:	2140      	movs	r1, #64	; 0x40
 800830e:	f7ff fc69 	bl	8007be4 <_malloc_r>
 8008312:	6028      	str	r0, [r5, #0]
 8008314:	6128      	str	r0, [r5, #16]
 8008316:	b920      	cbnz	r0, 8008322 <_svfiprintf_r+0x2e>
 8008318:	230c      	movs	r3, #12
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008320:	e0d1      	b.n	80084c6 <_svfiprintf_r+0x1d2>
 8008322:	2340      	movs	r3, #64	; 0x40
 8008324:	616b      	str	r3, [r5, #20]
 8008326:	2300      	movs	r3, #0
 8008328:	9309      	str	r3, [sp, #36]	; 0x24
 800832a:	2320      	movs	r3, #32
 800832c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008330:	2330      	movs	r3, #48	; 0x30
 8008332:	f04f 0901 	mov.w	r9, #1
 8008336:	f8cd 800c 	str.w	r8, [sp, #12]
 800833a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80084e0 <_svfiprintf_r+0x1ec>
 800833e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008342:	4623      	mov	r3, r4
 8008344:	469a      	mov	sl, r3
 8008346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800834a:	b10a      	cbz	r2, 8008350 <_svfiprintf_r+0x5c>
 800834c:	2a25      	cmp	r2, #37	; 0x25
 800834e:	d1f9      	bne.n	8008344 <_svfiprintf_r+0x50>
 8008350:	ebba 0b04 	subs.w	fp, sl, r4
 8008354:	d00b      	beq.n	800836e <_svfiprintf_r+0x7a>
 8008356:	465b      	mov	r3, fp
 8008358:	4622      	mov	r2, r4
 800835a:	4629      	mov	r1, r5
 800835c:	4638      	mov	r0, r7
 800835e:	f7ff ff6d 	bl	800823c <__ssputs_r>
 8008362:	3001      	adds	r0, #1
 8008364:	f000 80aa 	beq.w	80084bc <_svfiprintf_r+0x1c8>
 8008368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800836a:	445a      	add	r2, fp
 800836c:	9209      	str	r2, [sp, #36]	; 0x24
 800836e:	f89a 3000 	ldrb.w	r3, [sl]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 80a2 	beq.w	80084bc <_svfiprintf_r+0x1c8>
 8008378:	2300      	movs	r3, #0
 800837a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800837e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008382:	f10a 0a01 	add.w	sl, sl, #1
 8008386:	9304      	str	r3, [sp, #16]
 8008388:	9307      	str	r3, [sp, #28]
 800838a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800838e:	931a      	str	r3, [sp, #104]	; 0x68
 8008390:	4654      	mov	r4, sl
 8008392:	2205      	movs	r2, #5
 8008394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008398:	4851      	ldr	r0, [pc, #324]	; (80084e0 <_svfiprintf_r+0x1ec>)
 800839a:	f000 fcd7 	bl	8008d4c <memchr>
 800839e:	9a04      	ldr	r2, [sp, #16]
 80083a0:	b9d8      	cbnz	r0, 80083da <_svfiprintf_r+0xe6>
 80083a2:	06d0      	lsls	r0, r2, #27
 80083a4:	bf44      	itt	mi
 80083a6:	2320      	movmi	r3, #32
 80083a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ac:	0711      	lsls	r1, r2, #28
 80083ae:	bf44      	itt	mi
 80083b0:	232b      	movmi	r3, #43	; 0x2b
 80083b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083b6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ba:	2b2a      	cmp	r3, #42	; 0x2a
 80083bc:	d015      	beq.n	80083ea <_svfiprintf_r+0xf6>
 80083be:	4654      	mov	r4, sl
 80083c0:	2000      	movs	r0, #0
 80083c2:	f04f 0c0a 	mov.w	ip, #10
 80083c6:	9a07      	ldr	r2, [sp, #28]
 80083c8:	4621      	mov	r1, r4
 80083ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ce:	3b30      	subs	r3, #48	; 0x30
 80083d0:	2b09      	cmp	r3, #9
 80083d2:	d94e      	bls.n	8008472 <_svfiprintf_r+0x17e>
 80083d4:	b1b0      	cbz	r0, 8008404 <_svfiprintf_r+0x110>
 80083d6:	9207      	str	r2, [sp, #28]
 80083d8:	e014      	b.n	8008404 <_svfiprintf_r+0x110>
 80083da:	eba0 0308 	sub.w	r3, r0, r8
 80083de:	fa09 f303 	lsl.w	r3, r9, r3
 80083e2:	4313      	orrs	r3, r2
 80083e4:	46a2      	mov	sl, r4
 80083e6:	9304      	str	r3, [sp, #16]
 80083e8:	e7d2      	b.n	8008390 <_svfiprintf_r+0x9c>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	1d19      	adds	r1, r3, #4
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	9103      	str	r1, [sp, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bfbb      	ittet	lt
 80083f6:	425b      	neglt	r3, r3
 80083f8:	f042 0202 	orrlt.w	r2, r2, #2
 80083fc:	9307      	strge	r3, [sp, #28]
 80083fe:	9307      	strlt	r3, [sp, #28]
 8008400:	bfb8      	it	lt
 8008402:	9204      	strlt	r2, [sp, #16]
 8008404:	7823      	ldrb	r3, [r4, #0]
 8008406:	2b2e      	cmp	r3, #46	; 0x2e
 8008408:	d10c      	bne.n	8008424 <_svfiprintf_r+0x130>
 800840a:	7863      	ldrb	r3, [r4, #1]
 800840c:	2b2a      	cmp	r3, #42	; 0x2a
 800840e:	d135      	bne.n	800847c <_svfiprintf_r+0x188>
 8008410:	9b03      	ldr	r3, [sp, #12]
 8008412:	3402      	adds	r4, #2
 8008414:	1d1a      	adds	r2, r3, #4
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	9203      	str	r2, [sp, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	bfb8      	it	lt
 800841e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008422:	9305      	str	r3, [sp, #20]
 8008424:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80084f0 <_svfiprintf_r+0x1fc>
 8008428:	2203      	movs	r2, #3
 800842a:	4650      	mov	r0, sl
 800842c:	7821      	ldrb	r1, [r4, #0]
 800842e:	f000 fc8d 	bl	8008d4c <memchr>
 8008432:	b140      	cbz	r0, 8008446 <_svfiprintf_r+0x152>
 8008434:	2340      	movs	r3, #64	; 0x40
 8008436:	eba0 000a 	sub.w	r0, r0, sl
 800843a:	fa03 f000 	lsl.w	r0, r3, r0
 800843e:	9b04      	ldr	r3, [sp, #16]
 8008440:	3401      	adds	r4, #1
 8008442:	4303      	orrs	r3, r0
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800844a:	2206      	movs	r2, #6
 800844c:	4825      	ldr	r0, [pc, #148]	; (80084e4 <_svfiprintf_r+0x1f0>)
 800844e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008452:	f000 fc7b 	bl	8008d4c <memchr>
 8008456:	2800      	cmp	r0, #0
 8008458:	d038      	beq.n	80084cc <_svfiprintf_r+0x1d8>
 800845a:	4b23      	ldr	r3, [pc, #140]	; (80084e8 <_svfiprintf_r+0x1f4>)
 800845c:	bb1b      	cbnz	r3, 80084a6 <_svfiprintf_r+0x1b2>
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	3307      	adds	r3, #7
 8008462:	f023 0307 	bic.w	r3, r3, #7
 8008466:	3308      	adds	r3, #8
 8008468:	9303      	str	r3, [sp, #12]
 800846a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846c:	4433      	add	r3, r6
 800846e:	9309      	str	r3, [sp, #36]	; 0x24
 8008470:	e767      	b.n	8008342 <_svfiprintf_r+0x4e>
 8008472:	460c      	mov	r4, r1
 8008474:	2001      	movs	r0, #1
 8008476:	fb0c 3202 	mla	r2, ip, r2, r3
 800847a:	e7a5      	b.n	80083c8 <_svfiprintf_r+0xd4>
 800847c:	2300      	movs	r3, #0
 800847e:	f04f 0c0a 	mov.w	ip, #10
 8008482:	4619      	mov	r1, r3
 8008484:	3401      	adds	r4, #1
 8008486:	9305      	str	r3, [sp, #20]
 8008488:	4620      	mov	r0, r4
 800848a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800848e:	3a30      	subs	r2, #48	; 0x30
 8008490:	2a09      	cmp	r2, #9
 8008492:	d903      	bls.n	800849c <_svfiprintf_r+0x1a8>
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0c5      	beq.n	8008424 <_svfiprintf_r+0x130>
 8008498:	9105      	str	r1, [sp, #20]
 800849a:	e7c3      	b.n	8008424 <_svfiprintf_r+0x130>
 800849c:	4604      	mov	r4, r0
 800849e:	2301      	movs	r3, #1
 80084a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80084a4:	e7f0      	b.n	8008488 <_svfiprintf_r+0x194>
 80084a6:	ab03      	add	r3, sp, #12
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	462a      	mov	r2, r5
 80084ac:	4638      	mov	r0, r7
 80084ae:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <_svfiprintf_r+0x1f8>)
 80084b0:	a904      	add	r1, sp, #16
 80084b2:	f3af 8000 	nop.w
 80084b6:	1c42      	adds	r2, r0, #1
 80084b8:	4606      	mov	r6, r0
 80084ba:	d1d6      	bne.n	800846a <_svfiprintf_r+0x176>
 80084bc:	89ab      	ldrh	r3, [r5, #12]
 80084be:	065b      	lsls	r3, r3, #25
 80084c0:	f53f af2c 	bmi.w	800831c <_svfiprintf_r+0x28>
 80084c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084c6:	b01d      	add	sp, #116	; 0x74
 80084c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084cc:	ab03      	add	r3, sp, #12
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	462a      	mov	r2, r5
 80084d2:	4638      	mov	r0, r7
 80084d4:	4b05      	ldr	r3, [pc, #20]	; (80084ec <_svfiprintf_r+0x1f8>)
 80084d6:	a904      	add	r1, sp, #16
 80084d8:	f000 f9d4 	bl	8008884 <_printf_i>
 80084dc:	e7eb      	b.n	80084b6 <_svfiprintf_r+0x1c2>
 80084de:	bf00      	nop
 80084e0:	0800a36a 	.word	0x0800a36a
 80084e4:	0800a374 	.word	0x0800a374
 80084e8:	00000000 	.word	0x00000000
 80084ec:	0800823d 	.word	0x0800823d
 80084f0:	0800a370 	.word	0x0800a370

080084f4 <__sfputc_r>:
 80084f4:	6893      	ldr	r3, [r2, #8]
 80084f6:	b410      	push	{r4}
 80084f8:	3b01      	subs	r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	6093      	str	r3, [r2, #8]
 80084fe:	da07      	bge.n	8008510 <__sfputc_r+0x1c>
 8008500:	6994      	ldr	r4, [r2, #24]
 8008502:	42a3      	cmp	r3, r4
 8008504:	db01      	blt.n	800850a <__sfputc_r+0x16>
 8008506:	290a      	cmp	r1, #10
 8008508:	d102      	bne.n	8008510 <__sfputc_r+0x1c>
 800850a:	bc10      	pop	{r4}
 800850c:	f000 baf2 	b.w	8008af4 <__swbuf_r>
 8008510:	6813      	ldr	r3, [r2, #0]
 8008512:	1c58      	adds	r0, r3, #1
 8008514:	6010      	str	r0, [r2, #0]
 8008516:	7019      	strb	r1, [r3, #0]
 8008518:	4608      	mov	r0, r1
 800851a:	bc10      	pop	{r4}
 800851c:	4770      	bx	lr

0800851e <__sfputs_r>:
 800851e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008520:	4606      	mov	r6, r0
 8008522:	460f      	mov	r7, r1
 8008524:	4614      	mov	r4, r2
 8008526:	18d5      	adds	r5, r2, r3
 8008528:	42ac      	cmp	r4, r5
 800852a:	d101      	bne.n	8008530 <__sfputs_r+0x12>
 800852c:	2000      	movs	r0, #0
 800852e:	e007      	b.n	8008540 <__sfputs_r+0x22>
 8008530:	463a      	mov	r2, r7
 8008532:	4630      	mov	r0, r6
 8008534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008538:	f7ff ffdc 	bl	80084f4 <__sfputc_r>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d1f3      	bne.n	8008528 <__sfputs_r+0xa>
 8008540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008544 <_vfiprintf_r>:
 8008544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	460d      	mov	r5, r1
 800854a:	4614      	mov	r4, r2
 800854c:	4698      	mov	r8, r3
 800854e:	4606      	mov	r6, r0
 8008550:	b09d      	sub	sp, #116	; 0x74
 8008552:	b118      	cbz	r0, 800855c <_vfiprintf_r+0x18>
 8008554:	6983      	ldr	r3, [r0, #24]
 8008556:	b90b      	cbnz	r3, 800855c <_vfiprintf_r+0x18>
 8008558:	f7ff fa68 	bl	8007a2c <__sinit>
 800855c:	4b89      	ldr	r3, [pc, #548]	; (8008784 <_vfiprintf_r+0x240>)
 800855e:	429d      	cmp	r5, r3
 8008560:	d11b      	bne.n	800859a <_vfiprintf_r+0x56>
 8008562:	6875      	ldr	r5, [r6, #4]
 8008564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008566:	07d9      	lsls	r1, r3, #31
 8008568:	d405      	bmi.n	8008576 <_vfiprintf_r+0x32>
 800856a:	89ab      	ldrh	r3, [r5, #12]
 800856c:	059a      	lsls	r2, r3, #22
 800856e:	d402      	bmi.n	8008576 <_vfiprintf_r+0x32>
 8008570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008572:	f7ff fb1e 	bl	8007bb2 <__retarget_lock_acquire_recursive>
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	071b      	lsls	r3, r3, #28
 800857a:	d501      	bpl.n	8008580 <_vfiprintf_r+0x3c>
 800857c:	692b      	ldr	r3, [r5, #16]
 800857e:	b9eb      	cbnz	r3, 80085bc <_vfiprintf_r+0x78>
 8008580:	4629      	mov	r1, r5
 8008582:	4630      	mov	r0, r6
 8008584:	f000 fb08 	bl	8008b98 <__swsetup_r>
 8008588:	b1c0      	cbz	r0, 80085bc <_vfiprintf_r+0x78>
 800858a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800858c:	07dc      	lsls	r4, r3, #31
 800858e:	d50e      	bpl.n	80085ae <_vfiprintf_r+0x6a>
 8008590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008594:	b01d      	add	sp, #116	; 0x74
 8008596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859a:	4b7b      	ldr	r3, [pc, #492]	; (8008788 <_vfiprintf_r+0x244>)
 800859c:	429d      	cmp	r5, r3
 800859e:	d101      	bne.n	80085a4 <_vfiprintf_r+0x60>
 80085a0:	68b5      	ldr	r5, [r6, #8]
 80085a2:	e7df      	b.n	8008564 <_vfiprintf_r+0x20>
 80085a4:	4b79      	ldr	r3, [pc, #484]	; (800878c <_vfiprintf_r+0x248>)
 80085a6:	429d      	cmp	r5, r3
 80085a8:	bf08      	it	eq
 80085aa:	68f5      	ldreq	r5, [r6, #12]
 80085ac:	e7da      	b.n	8008564 <_vfiprintf_r+0x20>
 80085ae:	89ab      	ldrh	r3, [r5, #12]
 80085b0:	0598      	lsls	r0, r3, #22
 80085b2:	d4ed      	bmi.n	8008590 <_vfiprintf_r+0x4c>
 80085b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085b6:	f7ff fafd 	bl	8007bb4 <__retarget_lock_release_recursive>
 80085ba:	e7e9      	b.n	8008590 <_vfiprintf_r+0x4c>
 80085bc:	2300      	movs	r3, #0
 80085be:	9309      	str	r3, [sp, #36]	; 0x24
 80085c0:	2320      	movs	r3, #32
 80085c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085c6:	2330      	movs	r3, #48	; 0x30
 80085c8:	f04f 0901 	mov.w	r9, #1
 80085cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80085d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008790 <_vfiprintf_r+0x24c>
 80085d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085d8:	4623      	mov	r3, r4
 80085da:	469a      	mov	sl, r3
 80085dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085e0:	b10a      	cbz	r2, 80085e6 <_vfiprintf_r+0xa2>
 80085e2:	2a25      	cmp	r2, #37	; 0x25
 80085e4:	d1f9      	bne.n	80085da <_vfiprintf_r+0x96>
 80085e6:	ebba 0b04 	subs.w	fp, sl, r4
 80085ea:	d00b      	beq.n	8008604 <_vfiprintf_r+0xc0>
 80085ec:	465b      	mov	r3, fp
 80085ee:	4622      	mov	r2, r4
 80085f0:	4629      	mov	r1, r5
 80085f2:	4630      	mov	r0, r6
 80085f4:	f7ff ff93 	bl	800851e <__sfputs_r>
 80085f8:	3001      	adds	r0, #1
 80085fa:	f000 80aa 	beq.w	8008752 <_vfiprintf_r+0x20e>
 80085fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008600:	445a      	add	r2, fp
 8008602:	9209      	str	r2, [sp, #36]	; 0x24
 8008604:	f89a 3000 	ldrb.w	r3, [sl]
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 80a2 	beq.w	8008752 <_vfiprintf_r+0x20e>
 800860e:	2300      	movs	r3, #0
 8008610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008618:	f10a 0a01 	add.w	sl, sl, #1
 800861c:	9304      	str	r3, [sp, #16]
 800861e:	9307      	str	r3, [sp, #28]
 8008620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008624:	931a      	str	r3, [sp, #104]	; 0x68
 8008626:	4654      	mov	r4, sl
 8008628:	2205      	movs	r2, #5
 800862a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862e:	4858      	ldr	r0, [pc, #352]	; (8008790 <_vfiprintf_r+0x24c>)
 8008630:	f000 fb8c 	bl	8008d4c <memchr>
 8008634:	9a04      	ldr	r2, [sp, #16]
 8008636:	b9d8      	cbnz	r0, 8008670 <_vfiprintf_r+0x12c>
 8008638:	06d1      	lsls	r1, r2, #27
 800863a:	bf44      	itt	mi
 800863c:	2320      	movmi	r3, #32
 800863e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008642:	0713      	lsls	r3, r2, #28
 8008644:	bf44      	itt	mi
 8008646:	232b      	movmi	r3, #43	; 0x2b
 8008648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800864c:	f89a 3000 	ldrb.w	r3, [sl]
 8008650:	2b2a      	cmp	r3, #42	; 0x2a
 8008652:	d015      	beq.n	8008680 <_vfiprintf_r+0x13c>
 8008654:	4654      	mov	r4, sl
 8008656:	2000      	movs	r0, #0
 8008658:	f04f 0c0a 	mov.w	ip, #10
 800865c:	9a07      	ldr	r2, [sp, #28]
 800865e:	4621      	mov	r1, r4
 8008660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008664:	3b30      	subs	r3, #48	; 0x30
 8008666:	2b09      	cmp	r3, #9
 8008668:	d94e      	bls.n	8008708 <_vfiprintf_r+0x1c4>
 800866a:	b1b0      	cbz	r0, 800869a <_vfiprintf_r+0x156>
 800866c:	9207      	str	r2, [sp, #28]
 800866e:	e014      	b.n	800869a <_vfiprintf_r+0x156>
 8008670:	eba0 0308 	sub.w	r3, r0, r8
 8008674:	fa09 f303 	lsl.w	r3, r9, r3
 8008678:	4313      	orrs	r3, r2
 800867a:	46a2      	mov	sl, r4
 800867c:	9304      	str	r3, [sp, #16]
 800867e:	e7d2      	b.n	8008626 <_vfiprintf_r+0xe2>
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	1d19      	adds	r1, r3, #4
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	9103      	str	r1, [sp, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	bfbb      	ittet	lt
 800868c:	425b      	neglt	r3, r3
 800868e:	f042 0202 	orrlt.w	r2, r2, #2
 8008692:	9307      	strge	r3, [sp, #28]
 8008694:	9307      	strlt	r3, [sp, #28]
 8008696:	bfb8      	it	lt
 8008698:	9204      	strlt	r2, [sp, #16]
 800869a:	7823      	ldrb	r3, [r4, #0]
 800869c:	2b2e      	cmp	r3, #46	; 0x2e
 800869e:	d10c      	bne.n	80086ba <_vfiprintf_r+0x176>
 80086a0:	7863      	ldrb	r3, [r4, #1]
 80086a2:	2b2a      	cmp	r3, #42	; 0x2a
 80086a4:	d135      	bne.n	8008712 <_vfiprintf_r+0x1ce>
 80086a6:	9b03      	ldr	r3, [sp, #12]
 80086a8:	3402      	adds	r4, #2
 80086aa:	1d1a      	adds	r2, r3, #4
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	9203      	str	r2, [sp, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	bfb8      	it	lt
 80086b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086b8:	9305      	str	r3, [sp, #20]
 80086ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087a0 <_vfiprintf_r+0x25c>
 80086be:	2203      	movs	r2, #3
 80086c0:	4650      	mov	r0, sl
 80086c2:	7821      	ldrb	r1, [r4, #0]
 80086c4:	f000 fb42 	bl	8008d4c <memchr>
 80086c8:	b140      	cbz	r0, 80086dc <_vfiprintf_r+0x198>
 80086ca:	2340      	movs	r3, #64	; 0x40
 80086cc:	eba0 000a 	sub.w	r0, r0, sl
 80086d0:	fa03 f000 	lsl.w	r0, r3, r0
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	3401      	adds	r4, #1
 80086d8:	4303      	orrs	r3, r0
 80086da:	9304      	str	r3, [sp, #16]
 80086dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e0:	2206      	movs	r2, #6
 80086e2:	482c      	ldr	r0, [pc, #176]	; (8008794 <_vfiprintf_r+0x250>)
 80086e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086e8:	f000 fb30 	bl	8008d4c <memchr>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d03f      	beq.n	8008770 <_vfiprintf_r+0x22c>
 80086f0:	4b29      	ldr	r3, [pc, #164]	; (8008798 <_vfiprintf_r+0x254>)
 80086f2:	bb1b      	cbnz	r3, 800873c <_vfiprintf_r+0x1f8>
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	3307      	adds	r3, #7
 80086f8:	f023 0307 	bic.w	r3, r3, #7
 80086fc:	3308      	adds	r3, #8
 80086fe:	9303      	str	r3, [sp, #12]
 8008700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008702:	443b      	add	r3, r7
 8008704:	9309      	str	r3, [sp, #36]	; 0x24
 8008706:	e767      	b.n	80085d8 <_vfiprintf_r+0x94>
 8008708:	460c      	mov	r4, r1
 800870a:	2001      	movs	r0, #1
 800870c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008710:	e7a5      	b.n	800865e <_vfiprintf_r+0x11a>
 8008712:	2300      	movs	r3, #0
 8008714:	f04f 0c0a 	mov.w	ip, #10
 8008718:	4619      	mov	r1, r3
 800871a:	3401      	adds	r4, #1
 800871c:	9305      	str	r3, [sp, #20]
 800871e:	4620      	mov	r0, r4
 8008720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008724:	3a30      	subs	r2, #48	; 0x30
 8008726:	2a09      	cmp	r2, #9
 8008728:	d903      	bls.n	8008732 <_vfiprintf_r+0x1ee>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0c5      	beq.n	80086ba <_vfiprintf_r+0x176>
 800872e:	9105      	str	r1, [sp, #20]
 8008730:	e7c3      	b.n	80086ba <_vfiprintf_r+0x176>
 8008732:	4604      	mov	r4, r0
 8008734:	2301      	movs	r3, #1
 8008736:	fb0c 2101 	mla	r1, ip, r1, r2
 800873a:	e7f0      	b.n	800871e <_vfiprintf_r+0x1da>
 800873c:	ab03      	add	r3, sp, #12
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	462a      	mov	r2, r5
 8008742:	4630      	mov	r0, r6
 8008744:	4b15      	ldr	r3, [pc, #84]	; (800879c <_vfiprintf_r+0x258>)
 8008746:	a904      	add	r1, sp, #16
 8008748:	f3af 8000 	nop.w
 800874c:	4607      	mov	r7, r0
 800874e:	1c78      	adds	r0, r7, #1
 8008750:	d1d6      	bne.n	8008700 <_vfiprintf_r+0x1bc>
 8008752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008754:	07d9      	lsls	r1, r3, #31
 8008756:	d405      	bmi.n	8008764 <_vfiprintf_r+0x220>
 8008758:	89ab      	ldrh	r3, [r5, #12]
 800875a:	059a      	lsls	r2, r3, #22
 800875c:	d402      	bmi.n	8008764 <_vfiprintf_r+0x220>
 800875e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008760:	f7ff fa28 	bl	8007bb4 <__retarget_lock_release_recursive>
 8008764:	89ab      	ldrh	r3, [r5, #12]
 8008766:	065b      	lsls	r3, r3, #25
 8008768:	f53f af12 	bmi.w	8008590 <_vfiprintf_r+0x4c>
 800876c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800876e:	e711      	b.n	8008594 <_vfiprintf_r+0x50>
 8008770:	ab03      	add	r3, sp, #12
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	462a      	mov	r2, r5
 8008776:	4630      	mov	r0, r6
 8008778:	4b08      	ldr	r3, [pc, #32]	; (800879c <_vfiprintf_r+0x258>)
 800877a:	a904      	add	r1, sp, #16
 800877c:	f000 f882 	bl	8008884 <_printf_i>
 8008780:	e7e4      	b.n	800874c <_vfiprintf_r+0x208>
 8008782:	bf00      	nop
 8008784:	0800a274 	.word	0x0800a274
 8008788:	0800a294 	.word	0x0800a294
 800878c:	0800a254 	.word	0x0800a254
 8008790:	0800a36a 	.word	0x0800a36a
 8008794:	0800a374 	.word	0x0800a374
 8008798:	00000000 	.word	0x00000000
 800879c:	0800851f 	.word	0x0800851f
 80087a0:	0800a370 	.word	0x0800a370

080087a4 <_printf_common>:
 80087a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a8:	4616      	mov	r6, r2
 80087aa:	4699      	mov	r9, r3
 80087ac:	688a      	ldr	r2, [r1, #8]
 80087ae:	690b      	ldr	r3, [r1, #16]
 80087b0:	4607      	mov	r7, r0
 80087b2:	4293      	cmp	r3, r2
 80087b4:	bfb8      	it	lt
 80087b6:	4613      	movlt	r3, r2
 80087b8:	6033      	str	r3, [r6, #0]
 80087ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087be:	460c      	mov	r4, r1
 80087c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087c4:	b10a      	cbz	r2, 80087ca <_printf_common+0x26>
 80087c6:	3301      	adds	r3, #1
 80087c8:	6033      	str	r3, [r6, #0]
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	0699      	lsls	r1, r3, #26
 80087ce:	bf42      	ittt	mi
 80087d0:	6833      	ldrmi	r3, [r6, #0]
 80087d2:	3302      	addmi	r3, #2
 80087d4:	6033      	strmi	r3, [r6, #0]
 80087d6:	6825      	ldr	r5, [r4, #0]
 80087d8:	f015 0506 	ands.w	r5, r5, #6
 80087dc:	d106      	bne.n	80087ec <_printf_common+0x48>
 80087de:	f104 0a19 	add.w	sl, r4, #25
 80087e2:	68e3      	ldr	r3, [r4, #12]
 80087e4:	6832      	ldr	r2, [r6, #0]
 80087e6:	1a9b      	subs	r3, r3, r2
 80087e8:	42ab      	cmp	r3, r5
 80087ea:	dc28      	bgt.n	800883e <_printf_common+0x9a>
 80087ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087f0:	1e13      	subs	r3, r2, #0
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	bf18      	it	ne
 80087f6:	2301      	movne	r3, #1
 80087f8:	0692      	lsls	r2, r2, #26
 80087fa:	d42d      	bmi.n	8008858 <_printf_common+0xb4>
 80087fc:	4649      	mov	r1, r9
 80087fe:	4638      	mov	r0, r7
 8008800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008804:	47c0      	blx	r8
 8008806:	3001      	adds	r0, #1
 8008808:	d020      	beq.n	800884c <_printf_common+0xa8>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	68e5      	ldr	r5, [r4, #12]
 800880e:	f003 0306 	and.w	r3, r3, #6
 8008812:	2b04      	cmp	r3, #4
 8008814:	bf18      	it	ne
 8008816:	2500      	movne	r5, #0
 8008818:	6832      	ldr	r2, [r6, #0]
 800881a:	f04f 0600 	mov.w	r6, #0
 800881e:	68a3      	ldr	r3, [r4, #8]
 8008820:	bf08      	it	eq
 8008822:	1aad      	subeq	r5, r5, r2
 8008824:	6922      	ldr	r2, [r4, #16]
 8008826:	bf08      	it	eq
 8008828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800882c:	4293      	cmp	r3, r2
 800882e:	bfc4      	itt	gt
 8008830:	1a9b      	subgt	r3, r3, r2
 8008832:	18ed      	addgt	r5, r5, r3
 8008834:	341a      	adds	r4, #26
 8008836:	42b5      	cmp	r5, r6
 8008838:	d11a      	bne.n	8008870 <_printf_common+0xcc>
 800883a:	2000      	movs	r0, #0
 800883c:	e008      	b.n	8008850 <_printf_common+0xac>
 800883e:	2301      	movs	r3, #1
 8008840:	4652      	mov	r2, sl
 8008842:	4649      	mov	r1, r9
 8008844:	4638      	mov	r0, r7
 8008846:	47c0      	blx	r8
 8008848:	3001      	adds	r0, #1
 800884a:	d103      	bne.n	8008854 <_printf_common+0xb0>
 800884c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008854:	3501      	adds	r5, #1
 8008856:	e7c4      	b.n	80087e2 <_printf_common+0x3e>
 8008858:	2030      	movs	r0, #48	; 0x30
 800885a:	18e1      	adds	r1, r4, r3
 800885c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008866:	4422      	add	r2, r4
 8008868:	3302      	adds	r3, #2
 800886a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800886e:	e7c5      	b.n	80087fc <_printf_common+0x58>
 8008870:	2301      	movs	r3, #1
 8008872:	4622      	mov	r2, r4
 8008874:	4649      	mov	r1, r9
 8008876:	4638      	mov	r0, r7
 8008878:	47c0      	blx	r8
 800887a:	3001      	adds	r0, #1
 800887c:	d0e6      	beq.n	800884c <_printf_common+0xa8>
 800887e:	3601      	adds	r6, #1
 8008880:	e7d9      	b.n	8008836 <_printf_common+0x92>
	...

08008884 <_printf_i>:
 8008884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008888:	460c      	mov	r4, r1
 800888a:	7e27      	ldrb	r7, [r4, #24]
 800888c:	4691      	mov	r9, r2
 800888e:	2f78      	cmp	r7, #120	; 0x78
 8008890:	4680      	mov	r8, r0
 8008892:	469a      	mov	sl, r3
 8008894:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008896:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800889a:	d807      	bhi.n	80088ac <_printf_i+0x28>
 800889c:	2f62      	cmp	r7, #98	; 0x62
 800889e:	d80a      	bhi.n	80088b6 <_printf_i+0x32>
 80088a0:	2f00      	cmp	r7, #0
 80088a2:	f000 80d9 	beq.w	8008a58 <_printf_i+0x1d4>
 80088a6:	2f58      	cmp	r7, #88	; 0x58
 80088a8:	f000 80a4 	beq.w	80089f4 <_printf_i+0x170>
 80088ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088b4:	e03a      	b.n	800892c <_printf_i+0xa8>
 80088b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088ba:	2b15      	cmp	r3, #21
 80088bc:	d8f6      	bhi.n	80088ac <_printf_i+0x28>
 80088be:	a001      	add	r0, pc, #4	; (adr r0, 80088c4 <_printf_i+0x40>)
 80088c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80088c4:	0800891d 	.word	0x0800891d
 80088c8:	08008931 	.word	0x08008931
 80088cc:	080088ad 	.word	0x080088ad
 80088d0:	080088ad 	.word	0x080088ad
 80088d4:	080088ad 	.word	0x080088ad
 80088d8:	080088ad 	.word	0x080088ad
 80088dc:	08008931 	.word	0x08008931
 80088e0:	080088ad 	.word	0x080088ad
 80088e4:	080088ad 	.word	0x080088ad
 80088e8:	080088ad 	.word	0x080088ad
 80088ec:	080088ad 	.word	0x080088ad
 80088f0:	08008a3f 	.word	0x08008a3f
 80088f4:	08008961 	.word	0x08008961
 80088f8:	08008a21 	.word	0x08008a21
 80088fc:	080088ad 	.word	0x080088ad
 8008900:	080088ad 	.word	0x080088ad
 8008904:	08008a61 	.word	0x08008a61
 8008908:	080088ad 	.word	0x080088ad
 800890c:	08008961 	.word	0x08008961
 8008910:	080088ad 	.word	0x080088ad
 8008914:	080088ad 	.word	0x080088ad
 8008918:	08008a29 	.word	0x08008a29
 800891c:	680b      	ldr	r3, [r1, #0]
 800891e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008922:	1d1a      	adds	r2, r3, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	600a      	str	r2, [r1, #0]
 8008928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800892c:	2301      	movs	r3, #1
 800892e:	e0a4      	b.n	8008a7a <_printf_i+0x1f6>
 8008930:	6825      	ldr	r5, [r4, #0]
 8008932:	6808      	ldr	r0, [r1, #0]
 8008934:	062e      	lsls	r6, r5, #24
 8008936:	f100 0304 	add.w	r3, r0, #4
 800893a:	d50a      	bpl.n	8008952 <_printf_i+0xce>
 800893c:	6805      	ldr	r5, [r0, #0]
 800893e:	600b      	str	r3, [r1, #0]
 8008940:	2d00      	cmp	r5, #0
 8008942:	da03      	bge.n	800894c <_printf_i+0xc8>
 8008944:	232d      	movs	r3, #45	; 0x2d
 8008946:	426d      	negs	r5, r5
 8008948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800894c:	230a      	movs	r3, #10
 800894e:	485e      	ldr	r0, [pc, #376]	; (8008ac8 <_printf_i+0x244>)
 8008950:	e019      	b.n	8008986 <_printf_i+0x102>
 8008952:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008956:	6805      	ldr	r5, [r0, #0]
 8008958:	600b      	str	r3, [r1, #0]
 800895a:	bf18      	it	ne
 800895c:	b22d      	sxthne	r5, r5
 800895e:	e7ef      	b.n	8008940 <_printf_i+0xbc>
 8008960:	680b      	ldr	r3, [r1, #0]
 8008962:	6825      	ldr	r5, [r4, #0]
 8008964:	1d18      	adds	r0, r3, #4
 8008966:	6008      	str	r0, [r1, #0]
 8008968:	0628      	lsls	r0, r5, #24
 800896a:	d501      	bpl.n	8008970 <_printf_i+0xec>
 800896c:	681d      	ldr	r5, [r3, #0]
 800896e:	e002      	b.n	8008976 <_printf_i+0xf2>
 8008970:	0669      	lsls	r1, r5, #25
 8008972:	d5fb      	bpl.n	800896c <_printf_i+0xe8>
 8008974:	881d      	ldrh	r5, [r3, #0]
 8008976:	2f6f      	cmp	r7, #111	; 0x6f
 8008978:	bf0c      	ite	eq
 800897a:	2308      	moveq	r3, #8
 800897c:	230a      	movne	r3, #10
 800897e:	4852      	ldr	r0, [pc, #328]	; (8008ac8 <_printf_i+0x244>)
 8008980:	2100      	movs	r1, #0
 8008982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008986:	6866      	ldr	r6, [r4, #4]
 8008988:	2e00      	cmp	r6, #0
 800898a:	bfa8      	it	ge
 800898c:	6821      	ldrge	r1, [r4, #0]
 800898e:	60a6      	str	r6, [r4, #8]
 8008990:	bfa4      	itt	ge
 8008992:	f021 0104 	bicge.w	r1, r1, #4
 8008996:	6021      	strge	r1, [r4, #0]
 8008998:	b90d      	cbnz	r5, 800899e <_printf_i+0x11a>
 800899a:	2e00      	cmp	r6, #0
 800899c:	d04d      	beq.n	8008a3a <_printf_i+0x1b6>
 800899e:	4616      	mov	r6, r2
 80089a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80089a4:	fb03 5711 	mls	r7, r3, r1, r5
 80089a8:	5dc7      	ldrb	r7, [r0, r7]
 80089aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089ae:	462f      	mov	r7, r5
 80089b0:	42bb      	cmp	r3, r7
 80089b2:	460d      	mov	r5, r1
 80089b4:	d9f4      	bls.n	80089a0 <_printf_i+0x11c>
 80089b6:	2b08      	cmp	r3, #8
 80089b8:	d10b      	bne.n	80089d2 <_printf_i+0x14e>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	07df      	lsls	r7, r3, #31
 80089be:	d508      	bpl.n	80089d2 <_printf_i+0x14e>
 80089c0:	6923      	ldr	r3, [r4, #16]
 80089c2:	6861      	ldr	r1, [r4, #4]
 80089c4:	4299      	cmp	r1, r3
 80089c6:	bfde      	ittt	le
 80089c8:	2330      	movle	r3, #48	; 0x30
 80089ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089ce:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80089d2:	1b92      	subs	r2, r2, r6
 80089d4:	6122      	str	r2, [r4, #16]
 80089d6:	464b      	mov	r3, r9
 80089d8:	4621      	mov	r1, r4
 80089da:	4640      	mov	r0, r8
 80089dc:	f8cd a000 	str.w	sl, [sp]
 80089e0:	aa03      	add	r2, sp, #12
 80089e2:	f7ff fedf 	bl	80087a4 <_printf_common>
 80089e6:	3001      	adds	r0, #1
 80089e8:	d14c      	bne.n	8008a84 <_printf_i+0x200>
 80089ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089ee:	b004      	add	sp, #16
 80089f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f4:	4834      	ldr	r0, [pc, #208]	; (8008ac8 <_printf_i+0x244>)
 80089f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089fa:	680e      	ldr	r6, [r1, #0]
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a02:	061f      	lsls	r7, r3, #24
 8008a04:	600e      	str	r6, [r1, #0]
 8008a06:	d514      	bpl.n	8008a32 <_printf_i+0x1ae>
 8008a08:	07d9      	lsls	r1, r3, #31
 8008a0a:	bf44      	itt	mi
 8008a0c:	f043 0320 	orrmi.w	r3, r3, #32
 8008a10:	6023      	strmi	r3, [r4, #0]
 8008a12:	b91d      	cbnz	r5, 8008a1c <_printf_i+0x198>
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	f023 0320 	bic.w	r3, r3, #32
 8008a1a:	6023      	str	r3, [r4, #0]
 8008a1c:	2310      	movs	r3, #16
 8008a1e:	e7af      	b.n	8008980 <_printf_i+0xfc>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	f043 0320 	orr.w	r3, r3, #32
 8008a26:	6023      	str	r3, [r4, #0]
 8008a28:	2378      	movs	r3, #120	; 0x78
 8008a2a:	4828      	ldr	r0, [pc, #160]	; (8008acc <_printf_i+0x248>)
 8008a2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a30:	e7e3      	b.n	80089fa <_printf_i+0x176>
 8008a32:	065e      	lsls	r6, r3, #25
 8008a34:	bf48      	it	mi
 8008a36:	b2ad      	uxthmi	r5, r5
 8008a38:	e7e6      	b.n	8008a08 <_printf_i+0x184>
 8008a3a:	4616      	mov	r6, r2
 8008a3c:	e7bb      	b.n	80089b6 <_printf_i+0x132>
 8008a3e:	680b      	ldr	r3, [r1, #0]
 8008a40:	6826      	ldr	r6, [r4, #0]
 8008a42:	1d1d      	adds	r5, r3, #4
 8008a44:	6960      	ldr	r0, [r4, #20]
 8008a46:	600d      	str	r5, [r1, #0]
 8008a48:	0635      	lsls	r5, r6, #24
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	d501      	bpl.n	8008a52 <_printf_i+0x1ce>
 8008a4e:	6018      	str	r0, [r3, #0]
 8008a50:	e002      	b.n	8008a58 <_printf_i+0x1d4>
 8008a52:	0671      	lsls	r1, r6, #25
 8008a54:	d5fb      	bpl.n	8008a4e <_printf_i+0x1ca>
 8008a56:	8018      	strh	r0, [r3, #0]
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4616      	mov	r6, r2
 8008a5c:	6123      	str	r3, [r4, #16]
 8008a5e:	e7ba      	b.n	80089d6 <_printf_i+0x152>
 8008a60:	680b      	ldr	r3, [r1, #0]
 8008a62:	1d1a      	adds	r2, r3, #4
 8008a64:	600a      	str	r2, [r1, #0]
 8008a66:	681e      	ldr	r6, [r3, #0]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	6862      	ldr	r2, [r4, #4]
 8008a6e:	f000 f96d 	bl	8008d4c <memchr>
 8008a72:	b108      	cbz	r0, 8008a78 <_printf_i+0x1f4>
 8008a74:	1b80      	subs	r0, r0, r6
 8008a76:	6060      	str	r0, [r4, #4]
 8008a78:	6863      	ldr	r3, [r4, #4]
 8008a7a:	6123      	str	r3, [r4, #16]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a82:	e7a8      	b.n	80089d6 <_printf_i+0x152>
 8008a84:	4632      	mov	r2, r6
 8008a86:	4649      	mov	r1, r9
 8008a88:	4640      	mov	r0, r8
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	47d0      	blx	sl
 8008a8e:	3001      	adds	r0, #1
 8008a90:	d0ab      	beq.n	80089ea <_printf_i+0x166>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	079b      	lsls	r3, r3, #30
 8008a96:	d413      	bmi.n	8008ac0 <_printf_i+0x23c>
 8008a98:	68e0      	ldr	r0, [r4, #12]
 8008a9a:	9b03      	ldr	r3, [sp, #12]
 8008a9c:	4298      	cmp	r0, r3
 8008a9e:	bfb8      	it	lt
 8008aa0:	4618      	movlt	r0, r3
 8008aa2:	e7a4      	b.n	80089ee <_printf_i+0x16a>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	4632      	mov	r2, r6
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	4640      	mov	r0, r8
 8008aac:	47d0      	blx	sl
 8008aae:	3001      	adds	r0, #1
 8008ab0:	d09b      	beq.n	80089ea <_printf_i+0x166>
 8008ab2:	3501      	adds	r5, #1
 8008ab4:	68e3      	ldr	r3, [r4, #12]
 8008ab6:	9903      	ldr	r1, [sp, #12]
 8008ab8:	1a5b      	subs	r3, r3, r1
 8008aba:	42ab      	cmp	r3, r5
 8008abc:	dcf2      	bgt.n	8008aa4 <_printf_i+0x220>
 8008abe:	e7eb      	b.n	8008a98 <_printf_i+0x214>
 8008ac0:	2500      	movs	r5, #0
 8008ac2:	f104 0619 	add.w	r6, r4, #25
 8008ac6:	e7f5      	b.n	8008ab4 <_printf_i+0x230>
 8008ac8:	0800a37b 	.word	0x0800a37b
 8008acc:	0800a38c 	.word	0x0800a38c

08008ad0 <_read_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4d05      	ldr	r5, [pc, #20]	; (8008af0 <_read_r+0x20>)
 8008adc:	602a      	str	r2, [r5, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f7fa ff41 	bl	8003966 <_read>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_read_r+0x1e>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_read_r+0x1e>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	200023a0 	.word	0x200023a0

08008af4 <__swbuf_r>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	460e      	mov	r6, r1
 8008af8:	4614      	mov	r4, r2
 8008afa:	4605      	mov	r5, r0
 8008afc:	b118      	cbz	r0, 8008b06 <__swbuf_r+0x12>
 8008afe:	6983      	ldr	r3, [r0, #24]
 8008b00:	b90b      	cbnz	r3, 8008b06 <__swbuf_r+0x12>
 8008b02:	f7fe ff93 	bl	8007a2c <__sinit>
 8008b06:	4b21      	ldr	r3, [pc, #132]	; (8008b8c <__swbuf_r+0x98>)
 8008b08:	429c      	cmp	r4, r3
 8008b0a:	d12b      	bne.n	8008b64 <__swbuf_r+0x70>
 8008b0c:	686c      	ldr	r4, [r5, #4]
 8008b0e:	69a3      	ldr	r3, [r4, #24]
 8008b10:	60a3      	str	r3, [r4, #8]
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	071a      	lsls	r2, r3, #28
 8008b16:	d52f      	bpl.n	8008b78 <__swbuf_r+0x84>
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	b36b      	cbz	r3, 8008b78 <__swbuf_r+0x84>
 8008b1c:	6923      	ldr	r3, [r4, #16]
 8008b1e:	6820      	ldr	r0, [r4, #0]
 8008b20:	b2f6      	uxtb	r6, r6
 8008b22:	1ac0      	subs	r0, r0, r3
 8008b24:	6963      	ldr	r3, [r4, #20]
 8008b26:	4637      	mov	r7, r6
 8008b28:	4283      	cmp	r3, r0
 8008b2a:	dc04      	bgt.n	8008b36 <__swbuf_r+0x42>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f7ff fac4 	bl	80080bc <_fflush_r>
 8008b34:	bb30      	cbnz	r0, 8008b84 <__swbuf_r+0x90>
 8008b36:	68a3      	ldr	r3, [r4, #8]
 8008b38:	3001      	adds	r0, #1
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	60a3      	str	r3, [r4, #8]
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	6022      	str	r2, [r4, #0]
 8008b44:	701e      	strb	r6, [r3, #0]
 8008b46:	6963      	ldr	r3, [r4, #20]
 8008b48:	4283      	cmp	r3, r0
 8008b4a:	d004      	beq.n	8008b56 <__swbuf_r+0x62>
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	07db      	lsls	r3, r3, #31
 8008b50:	d506      	bpl.n	8008b60 <__swbuf_r+0x6c>
 8008b52:	2e0a      	cmp	r6, #10
 8008b54:	d104      	bne.n	8008b60 <__swbuf_r+0x6c>
 8008b56:	4621      	mov	r1, r4
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f7ff faaf 	bl	80080bc <_fflush_r>
 8008b5e:	b988      	cbnz	r0, 8008b84 <__swbuf_r+0x90>
 8008b60:	4638      	mov	r0, r7
 8008b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b64:	4b0a      	ldr	r3, [pc, #40]	; (8008b90 <__swbuf_r+0x9c>)
 8008b66:	429c      	cmp	r4, r3
 8008b68:	d101      	bne.n	8008b6e <__swbuf_r+0x7a>
 8008b6a:	68ac      	ldr	r4, [r5, #8]
 8008b6c:	e7cf      	b.n	8008b0e <__swbuf_r+0x1a>
 8008b6e:	4b09      	ldr	r3, [pc, #36]	; (8008b94 <__swbuf_r+0xa0>)
 8008b70:	429c      	cmp	r4, r3
 8008b72:	bf08      	it	eq
 8008b74:	68ec      	ldreq	r4, [r5, #12]
 8008b76:	e7ca      	b.n	8008b0e <__swbuf_r+0x1a>
 8008b78:	4621      	mov	r1, r4
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f000 f80c 	bl	8008b98 <__swsetup_r>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d0cb      	beq.n	8008b1c <__swbuf_r+0x28>
 8008b84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008b88:	e7ea      	b.n	8008b60 <__swbuf_r+0x6c>
 8008b8a:	bf00      	nop
 8008b8c:	0800a274 	.word	0x0800a274
 8008b90:	0800a294 	.word	0x0800a294
 8008b94:	0800a254 	.word	0x0800a254

08008b98 <__swsetup_r>:
 8008b98:	4b32      	ldr	r3, [pc, #200]	; (8008c64 <__swsetup_r+0xcc>)
 8008b9a:	b570      	push	{r4, r5, r6, lr}
 8008b9c:	681d      	ldr	r5, [r3, #0]
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	b125      	cbz	r5, 8008bae <__swsetup_r+0x16>
 8008ba4:	69ab      	ldr	r3, [r5, #24]
 8008ba6:	b913      	cbnz	r3, 8008bae <__swsetup_r+0x16>
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f7fe ff3f 	bl	8007a2c <__sinit>
 8008bae:	4b2e      	ldr	r3, [pc, #184]	; (8008c68 <__swsetup_r+0xd0>)
 8008bb0:	429c      	cmp	r4, r3
 8008bb2:	d10f      	bne.n	8008bd4 <__swsetup_r+0x3c>
 8008bb4:	686c      	ldr	r4, [r5, #4]
 8008bb6:	89a3      	ldrh	r3, [r4, #12]
 8008bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bbc:	0719      	lsls	r1, r3, #28
 8008bbe:	d42c      	bmi.n	8008c1a <__swsetup_r+0x82>
 8008bc0:	06dd      	lsls	r5, r3, #27
 8008bc2:	d411      	bmi.n	8008be8 <__swsetup_r+0x50>
 8008bc4:	2309      	movs	r3, #9
 8008bc6:	6033      	str	r3, [r6, #0]
 8008bc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd0:	81a3      	strh	r3, [r4, #12]
 8008bd2:	e03e      	b.n	8008c52 <__swsetup_r+0xba>
 8008bd4:	4b25      	ldr	r3, [pc, #148]	; (8008c6c <__swsetup_r+0xd4>)
 8008bd6:	429c      	cmp	r4, r3
 8008bd8:	d101      	bne.n	8008bde <__swsetup_r+0x46>
 8008bda:	68ac      	ldr	r4, [r5, #8]
 8008bdc:	e7eb      	b.n	8008bb6 <__swsetup_r+0x1e>
 8008bde:	4b24      	ldr	r3, [pc, #144]	; (8008c70 <__swsetup_r+0xd8>)
 8008be0:	429c      	cmp	r4, r3
 8008be2:	bf08      	it	eq
 8008be4:	68ec      	ldreq	r4, [r5, #12]
 8008be6:	e7e6      	b.n	8008bb6 <__swsetup_r+0x1e>
 8008be8:	0758      	lsls	r0, r3, #29
 8008bea:	d512      	bpl.n	8008c12 <__swsetup_r+0x7a>
 8008bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bee:	b141      	cbz	r1, 8008c02 <__swsetup_r+0x6a>
 8008bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bf4:	4299      	cmp	r1, r3
 8008bf6:	d002      	beq.n	8008bfe <__swsetup_r+0x66>
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7ff fad3 	bl	80081a4 <_free_r>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	6363      	str	r3, [r4, #52]	; 0x34
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c08:	81a3      	strh	r3, [r4, #12]
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	6063      	str	r3, [r4, #4]
 8008c0e:	6923      	ldr	r3, [r4, #16]
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	f043 0308 	orr.w	r3, r3, #8
 8008c18:	81a3      	strh	r3, [r4, #12]
 8008c1a:	6923      	ldr	r3, [r4, #16]
 8008c1c:	b94b      	cbnz	r3, 8008c32 <__swsetup_r+0x9a>
 8008c1e:	89a3      	ldrh	r3, [r4, #12]
 8008c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c28:	d003      	beq.n	8008c32 <__swsetup_r+0x9a>
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f000 f84d 	bl	8008ccc <__smakebuf_r>
 8008c32:	89a0      	ldrh	r0, [r4, #12]
 8008c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c38:	f010 0301 	ands.w	r3, r0, #1
 8008c3c:	d00a      	beq.n	8008c54 <__swsetup_r+0xbc>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60a3      	str	r3, [r4, #8]
 8008c42:	6963      	ldr	r3, [r4, #20]
 8008c44:	425b      	negs	r3, r3
 8008c46:	61a3      	str	r3, [r4, #24]
 8008c48:	6923      	ldr	r3, [r4, #16]
 8008c4a:	b943      	cbnz	r3, 8008c5e <__swsetup_r+0xc6>
 8008c4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c50:	d1ba      	bne.n	8008bc8 <__swsetup_r+0x30>
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	0781      	lsls	r1, r0, #30
 8008c56:	bf58      	it	pl
 8008c58:	6963      	ldrpl	r3, [r4, #20]
 8008c5a:	60a3      	str	r3, [r4, #8]
 8008c5c:	e7f4      	b.n	8008c48 <__swsetup_r+0xb0>
 8008c5e:	2000      	movs	r0, #0
 8008c60:	e7f7      	b.n	8008c52 <__swsetup_r+0xba>
 8008c62:	bf00      	nop
 8008c64:	20000034 	.word	0x20000034
 8008c68:	0800a274 	.word	0x0800a274
 8008c6c:	0800a294 	.word	0x0800a294
 8008c70:	0800a254 	.word	0x0800a254

08008c74 <abort>:
 8008c74:	2006      	movs	r0, #6
 8008c76:	b508      	push	{r3, lr}
 8008c78:	f000 f8de 	bl	8008e38 <raise>
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	f7fa fe68 	bl	8003952 <_exit>

08008c82 <__swhatbuf_r>:
 8008c82:	b570      	push	{r4, r5, r6, lr}
 8008c84:	460e      	mov	r6, r1
 8008c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c8a:	4614      	mov	r4, r2
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	461d      	mov	r5, r3
 8008c90:	b096      	sub	sp, #88	; 0x58
 8008c92:	da07      	bge.n	8008ca4 <__swhatbuf_r+0x22>
 8008c94:	2300      	movs	r3, #0
 8008c96:	602b      	str	r3, [r5, #0]
 8008c98:	89b3      	ldrh	r3, [r6, #12]
 8008c9a:	061a      	lsls	r2, r3, #24
 8008c9c:	d410      	bmi.n	8008cc0 <__swhatbuf_r+0x3e>
 8008c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca2:	e00e      	b.n	8008cc2 <__swhatbuf_r+0x40>
 8008ca4:	466a      	mov	r2, sp
 8008ca6:	f000 f8e3 	bl	8008e70 <_fstat_r>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	dbf2      	blt.n	8008c94 <__swhatbuf_r+0x12>
 8008cae:	9a01      	ldr	r2, [sp, #4]
 8008cb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cb8:	425a      	negs	r2, r3
 8008cba:	415a      	adcs	r2, r3
 8008cbc:	602a      	str	r2, [r5, #0]
 8008cbe:	e7ee      	b.n	8008c9e <__swhatbuf_r+0x1c>
 8008cc0:	2340      	movs	r3, #64	; 0x40
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	b016      	add	sp, #88	; 0x58
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ccc <__smakebuf_r>:
 8008ccc:	898b      	ldrh	r3, [r1, #12]
 8008cce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cd0:	079d      	lsls	r5, r3, #30
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	d507      	bpl.n	8008ce8 <__smakebuf_r+0x1c>
 8008cd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	6123      	str	r3, [r4, #16]
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	6163      	str	r3, [r4, #20]
 8008ce4:	b002      	add	sp, #8
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
 8008ce8:	466a      	mov	r2, sp
 8008cea:	ab01      	add	r3, sp, #4
 8008cec:	f7ff ffc9 	bl	8008c82 <__swhatbuf_r>
 8008cf0:	9900      	ldr	r1, [sp, #0]
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f7fe ff75 	bl	8007be4 <_malloc_r>
 8008cfa:	b948      	cbnz	r0, 8008d10 <__smakebuf_r+0x44>
 8008cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d00:	059a      	lsls	r2, r3, #22
 8008d02:	d4ef      	bmi.n	8008ce4 <__smakebuf_r+0x18>
 8008d04:	f023 0303 	bic.w	r3, r3, #3
 8008d08:	f043 0302 	orr.w	r3, r3, #2
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	e7e3      	b.n	8008cd8 <__smakebuf_r+0xc>
 8008d10:	4b0d      	ldr	r3, [pc, #52]	; (8008d48 <__smakebuf_r+0x7c>)
 8008d12:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	6020      	str	r0, [r4, #0]
 8008d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1c:	81a3      	strh	r3, [r4, #12]
 8008d1e:	9b00      	ldr	r3, [sp, #0]
 8008d20:	6120      	str	r0, [r4, #16]
 8008d22:	6163      	str	r3, [r4, #20]
 8008d24:	9b01      	ldr	r3, [sp, #4]
 8008d26:	b15b      	cbz	r3, 8008d40 <__smakebuf_r+0x74>
 8008d28:	4630      	mov	r0, r6
 8008d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d2e:	f000 f8b1 	bl	8008e94 <_isatty_r>
 8008d32:	b128      	cbz	r0, 8008d40 <__smakebuf_r+0x74>
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	f023 0303 	bic.w	r3, r3, #3
 8008d3a:	f043 0301 	orr.w	r3, r3, #1
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	89a0      	ldrh	r0, [r4, #12]
 8008d42:	4305      	orrs	r5, r0
 8008d44:	81a5      	strh	r5, [r4, #12]
 8008d46:	e7cd      	b.n	8008ce4 <__smakebuf_r+0x18>
 8008d48:	080079c5 	.word	0x080079c5

08008d4c <memchr>:
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	b510      	push	{r4, lr}
 8008d50:	b2c9      	uxtb	r1, r1
 8008d52:	4402      	add	r2, r0
 8008d54:	4293      	cmp	r3, r2
 8008d56:	4618      	mov	r0, r3
 8008d58:	d101      	bne.n	8008d5e <memchr+0x12>
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	e003      	b.n	8008d66 <memchr+0x1a>
 8008d5e:	7804      	ldrb	r4, [r0, #0]
 8008d60:	3301      	adds	r3, #1
 8008d62:	428c      	cmp	r4, r1
 8008d64:	d1f6      	bne.n	8008d54 <memchr+0x8>
 8008d66:	bd10      	pop	{r4, pc}

08008d68 <memmove>:
 8008d68:	4288      	cmp	r0, r1
 8008d6a:	b510      	push	{r4, lr}
 8008d6c:	eb01 0402 	add.w	r4, r1, r2
 8008d70:	d902      	bls.n	8008d78 <memmove+0x10>
 8008d72:	4284      	cmp	r4, r0
 8008d74:	4623      	mov	r3, r4
 8008d76:	d807      	bhi.n	8008d88 <memmove+0x20>
 8008d78:	1e43      	subs	r3, r0, #1
 8008d7a:	42a1      	cmp	r1, r4
 8008d7c:	d008      	beq.n	8008d90 <memmove+0x28>
 8008d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d86:	e7f8      	b.n	8008d7a <memmove+0x12>
 8008d88:	4601      	mov	r1, r0
 8008d8a:	4402      	add	r2, r0
 8008d8c:	428a      	cmp	r2, r1
 8008d8e:	d100      	bne.n	8008d92 <memmove+0x2a>
 8008d90:	bd10      	pop	{r4, pc}
 8008d92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d9a:	e7f7      	b.n	8008d8c <memmove+0x24>

08008d9c <_realloc_r>:
 8008d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9e:	4607      	mov	r7, r0
 8008da0:	4614      	mov	r4, r2
 8008da2:	460e      	mov	r6, r1
 8008da4:	b921      	cbnz	r1, 8008db0 <_realloc_r+0x14>
 8008da6:	4611      	mov	r1, r2
 8008da8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008dac:	f7fe bf1a 	b.w	8007be4 <_malloc_r>
 8008db0:	b922      	cbnz	r2, 8008dbc <_realloc_r+0x20>
 8008db2:	f7ff f9f7 	bl	80081a4 <_free_r>
 8008db6:	4625      	mov	r5, r4
 8008db8:	4628      	mov	r0, r5
 8008dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dbc:	f000 f87a 	bl	8008eb4 <_malloc_usable_size_r>
 8008dc0:	42a0      	cmp	r0, r4
 8008dc2:	d20f      	bcs.n	8008de4 <_realloc_r+0x48>
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f7fe ff0c 	bl	8007be4 <_malloc_r>
 8008dcc:	4605      	mov	r5, r0
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d0f2      	beq.n	8008db8 <_realloc_r+0x1c>
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	f7fe feee 	bl	8007bb6 <memcpy>
 8008dda:	4631      	mov	r1, r6
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f7ff f9e1 	bl	80081a4 <_free_r>
 8008de2:	e7e9      	b.n	8008db8 <_realloc_r+0x1c>
 8008de4:	4635      	mov	r5, r6
 8008de6:	e7e7      	b.n	8008db8 <_realloc_r+0x1c>

08008de8 <_raise_r>:
 8008de8:	291f      	cmp	r1, #31
 8008dea:	b538      	push	{r3, r4, r5, lr}
 8008dec:	4604      	mov	r4, r0
 8008dee:	460d      	mov	r5, r1
 8008df0:	d904      	bls.n	8008dfc <_raise_r+0x14>
 8008df2:	2316      	movs	r3, #22
 8008df4:	6003      	str	r3, [r0, #0]
 8008df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008dfe:	b112      	cbz	r2, 8008e06 <_raise_r+0x1e>
 8008e00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e04:	b94b      	cbnz	r3, 8008e1a <_raise_r+0x32>
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 f830 	bl	8008e6c <_getpid_r>
 8008e0c:	462a      	mov	r2, r5
 8008e0e:	4601      	mov	r1, r0
 8008e10:	4620      	mov	r0, r4
 8008e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e16:	f000 b817 	b.w	8008e48 <_kill_r>
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d00a      	beq.n	8008e34 <_raise_r+0x4c>
 8008e1e:	1c59      	adds	r1, r3, #1
 8008e20:	d103      	bne.n	8008e2a <_raise_r+0x42>
 8008e22:	2316      	movs	r3, #22
 8008e24:	6003      	str	r3, [r0, #0]
 8008e26:	2001      	movs	r0, #1
 8008e28:	e7e7      	b.n	8008dfa <_raise_r+0x12>
 8008e2a:	2400      	movs	r4, #0
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e32:	4798      	blx	r3
 8008e34:	2000      	movs	r0, #0
 8008e36:	e7e0      	b.n	8008dfa <_raise_r+0x12>

08008e38 <raise>:
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <raise+0xc>)
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	f7ff bfd3 	b.w	8008de8 <_raise_r>
 8008e42:	bf00      	nop
 8008e44:	20000034 	.word	0x20000034

08008e48 <_kill_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	4d06      	ldr	r5, [pc, #24]	; (8008e68 <_kill_r+0x20>)
 8008e4e:	4604      	mov	r4, r0
 8008e50:	4608      	mov	r0, r1
 8008e52:	4611      	mov	r1, r2
 8008e54:	602b      	str	r3, [r5, #0]
 8008e56:	f7fa fd6c 	bl	8003932 <_kill>
 8008e5a:	1c43      	adds	r3, r0, #1
 8008e5c:	d102      	bne.n	8008e64 <_kill_r+0x1c>
 8008e5e:	682b      	ldr	r3, [r5, #0]
 8008e60:	b103      	cbz	r3, 8008e64 <_kill_r+0x1c>
 8008e62:	6023      	str	r3, [r4, #0]
 8008e64:	bd38      	pop	{r3, r4, r5, pc}
 8008e66:	bf00      	nop
 8008e68:	200023a0 	.word	0x200023a0

08008e6c <_getpid_r>:
 8008e6c:	f7fa bd5a 	b.w	8003924 <_getpid>

08008e70 <_fstat_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	2300      	movs	r3, #0
 8008e74:	4d06      	ldr	r5, [pc, #24]	; (8008e90 <_fstat_r+0x20>)
 8008e76:	4604      	mov	r4, r0
 8008e78:	4608      	mov	r0, r1
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	602b      	str	r3, [r5, #0]
 8008e7e:	f7fa fdb6 	bl	80039ee <_fstat>
 8008e82:	1c43      	adds	r3, r0, #1
 8008e84:	d102      	bne.n	8008e8c <_fstat_r+0x1c>
 8008e86:	682b      	ldr	r3, [r5, #0]
 8008e88:	b103      	cbz	r3, 8008e8c <_fstat_r+0x1c>
 8008e8a:	6023      	str	r3, [r4, #0]
 8008e8c:	bd38      	pop	{r3, r4, r5, pc}
 8008e8e:	bf00      	nop
 8008e90:	200023a0 	.word	0x200023a0

08008e94 <_isatty_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	2300      	movs	r3, #0
 8008e98:	4d05      	ldr	r5, [pc, #20]	; (8008eb0 <_isatty_r+0x1c>)
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	602b      	str	r3, [r5, #0]
 8008ea0:	f7fa fdb4 	bl	8003a0c <_isatty>
 8008ea4:	1c43      	adds	r3, r0, #1
 8008ea6:	d102      	bne.n	8008eae <_isatty_r+0x1a>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	b103      	cbz	r3, 8008eae <_isatty_r+0x1a>
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	200023a0 	.word	0x200023a0

08008eb4 <_malloc_usable_size_r>:
 8008eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eb8:	1f18      	subs	r0, r3, #4
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	bfbc      	itt	lt
 8008ebe:	580b      	ldrlt	r3, [r1, r0]
 8008ec0:	18c0      	addlt	r0, r0, r3
 8008ec2:	4770      	bx	lr

08008ec4 <_init>:
 8008ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec6:	bf00      	nop
 8008ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eca:	bc08      	pop	{r3}
 8008ecc:	469e      	mov	lr, r3
 8008ece:	4770      	bx	lr

08008ed0 <_fini>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	bf00      	nop
 8008ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed6:	bc08      	pop	{r3}
 8008ed8:	469e      	mov	lr, r3
 8008eda:	4770      	bx	lr
